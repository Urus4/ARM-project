
MPU6050_4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b734  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000005b0  0800b848  0800b848  0001b848  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800bdf8  0800bdf8  000201e4  2**0
                  CONTENTS
  4 .ARM          00000000  0800bdf8  0800bdf8  000201e4  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800bdf8  0800bdf8  000201e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800bdf8  0800bdf8  0001bdf8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800bdfc  0800bdfc  0001bdfc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e4  20000000  0800be00  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000047c  200001e8  0800bfe4  000201e8  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  20000664  0800bfe4  00020664  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201e4  2**0
                  CONTENTS, READONLY
 12 .debug_info   00011119  00000000  00000000  0002020d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000285a  00000000  00000000  00031326  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001208  00000000  00000000  00033b80  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001128  00000000  00000000  00034d88  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00019b47  00000000  00000000  00035eb0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00013eb3  00000000  00000000  0004f9f7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00094122  00000000  00000000  000638aa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000f79cc  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000062d0  00000000  00000000  000f7a1c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001e8 	.word	0x200001e8
 800012c:	00000000 	.word	0x00000000
 8000130:	0800b82c 	.word	0x0800b82c

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001ec 	.word	0x200001ec
 800014c:	0800b82c 	.word	0x0800b82c

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_d2uiz>:
 8000a88:	004a      	lsls	r2, r1, #1
 8000a8a:	d211      	bcs.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a8c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a90:	d211      	bcs.n	8000ab6 <__aeabi_d2uiz+0x2e>
 8000a92:	d50d      	bpl.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a94:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a9c:	d40e      	bmi.n	8000abc <__aeabi_d2uiz+0x34>
 8000a9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aa2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000aa6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000aaa:	fa23 f002 	lsr.w	r0, r3, r2
 8000aae:	4770      	bx	lr
 8000ab0:	f04f 0000 	mov.w	r0, #0
 8000ab4:	4770      	bx	lr
 8000ab6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aba:	d102      	bne.n	8000ac2 <__aeabi_d2uiz+0x3a>
 8000abc:	f04f 30ff 	mov.w	r0, #4294967295
 8000ac0:	4770      	bx	lr
 8000ac2:	f04f 0000 	mov.w	r0, #0
 8000ac6:	4770      	bx	lr

08000ac8 <__aeabi_d2f>:
 8000ac8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000acc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000ad0:	bf24      	itt	cs
 8000ad2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000ad6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000ada:	d90d      	bls.n	8000af8 <__aeabi_d2f+0x30>
 8000adc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000ae0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000ae4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000ae8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000aec:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000af0:	bf08      	it	eq
 8000af2:	f020 0001 	biceq.w	r0, r0, #1
 8000af6:	4770      	bx	lr
 8000af8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000afc:	d121      	bne.n	8000b42 <__aeabi_d2f+0x7a>
 8000afe:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b02:	bfbc      	itt	lt
 8000b04:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b08:	4770      	bxlt	lr
 8000b0a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b0e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b12:	f1c2 0218 	rsb	r2, r2, #24
 8000b16:	f1c2 0c20 	rsb	ip, r2, #32
 8000b1a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b1e:	fa20 f002 	lsr.w	r0, r0, r2
 8000b22:	bf18      	it	ne
 8000b24:	f040 0001 	orrne.w	r0, r0, #1
 8000b28:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b2c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b30:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b34:	ea40 000c 	orr.w	r0, r0, ip
 8000b38:	fa23 f302 	lsr.w	r3, r3, r2
 8000b3c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b40:	e7cc      	b.n	8000adc <__aeabi_d2f+0x14>
 8000b42:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b46:	d107      	bne.n	8000b58 <__aeabi_d2f+0x90>
 8000b48:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b4c:	bf1e      	ittt	ne
 8000b4e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b52:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b56:	4770      	bxne	lr
 8000b58:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b5c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b60:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b64:	4770      	bx	lr
 8000b66:	bf00      	nop

08000b68 <__aeabi_d2lz>:
 8000b68:	b538      	push	{r3, r4, r5, lr}
 8000b6a:	4605      	mov	r5, r0
 8000b6c:	460c      	mov	r4, r1
 8000b6e:	2200      	movs	r2, #0
 8000b70:	2300      	movs	r3, #0
 8000b72:	4628      	mov	r0, r5
 8000b74:	4621      	mov	r1, r4
 8000b76:	f7ff ff21 	bl	80009bc <__aeabi_dcmplt>
 8000b7a:	b928      	cbnz	r0, 8000b88 <__aeabi_d2lz+0x20>
 8000b7c:	4628      	mov	r0, r5
 8000b7e:	4621      	mov	r1, r4
 8000b80:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000b84:	f000 b80a 	b.w	8000b9c <__aeabi_d2ulz>
 8000b88:	4628      	mov	r0, r5
 8000b8a:	f104 4100 	add.w	r1, r4, #2147483648	; 0x80000000
 8000b8e:	f000 f805 	bl	8000b9c <__aeabi_d2ulz>
 8000b92:	4240      	negs	r0, r0
 8000b94:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000b98:	bd38      	pop	{r3, r4, r5, pc}
 8000b9a:	bf00      	nop

08000b9c <__aeabi_d2ulz>:
 8000b9c:	b5d0      	push	{r4, r6, r7, lr}
 8000b9e:	2200      	movs	r2, #0
 8000ba0:	4b0b      	ldr	r3, [pc, #44]	; (8000bd0 <__aeabi_d2ulz+0x34>)
 8000ba2:	4606      	mov	r6, r0
 8000ba4:	460f      	mov	r7, r1
 8000ba6:	f7ff fc97 	bl	80004d8 <__aeabi_dmul>
 8000baa:	f7ff ff6d 	bl	8000a88 <__aeabi_d2uiz>
 8000bae:	4604      	mov	r4, r0
 8000bb0:	f7ff fc18 	bl	80003e4 <__aeabi_ui2d>
 8000bb4:	2200      	movs	r2, #0
 8000bb6:	4b07      	ldr	r3, [pc, #28]	; (8000bd4 <__aeabi_d2ulz+0x38>)
 8000bb8:	f7ff fc8e 	bl	80004d8 <__aeabi_dmul>
 8000bbc:	4602      	mov	r2, r0
 8000bbe:	460b      	mov	r3, r1
 8000bc0:	4630      	mov	r0, r6
 8000bc2:	4639      	mov	r1, r7
 8000bc4:	f7ff fad0 	bl	8000168 <__aeabi_dsub>
 8000bc8:	f7ff ff5e 	bl	8000a88 <__aeabi_d2uiz>
 8000bcc:	4621      	mov	r1, r4
 8000bce:	bdd0      	pop	{r4, r6, r7, pc}
 8000bd0:	3df00000 	.word	0x3df00000
 8000bd4:	41f00000 	.word	0x41f00000

08000bd8 <lcd_send_cmd>:
extern I2C_HandleTypeDef hi2c1;  // change your handler here accordingly

#define SLAVE_ADDRESS_LCD 0x4E // change this according to ur setup 4E or 3F 27

void lcd_send_cmd (char cmd)
{
 8000bd8:	b580      	push	{r7, lr}
 8000bda:	b086      	sub	sp, #24
 8000bdc:	af02      	add	r7, sp, #8
 8000bde:	4603      	mov	r3, r0
 8000be0:	71fb      	strb	r3, [r7, #7]
  char data_u, data_l;
	uint8_t data_t[4];
	data_u = (cmd&0xf0);
 8000be2:	79fb      	ldrb	r3, [r7, #7]
 8000be4:	f023 030f 	bic.w	r3, r3, #15
 8000be8:	73fb      	strb	r3, [r7, #15]
	data_l = ((cmd<<4)&0xf0);
 8000bea:	79fb      	ldrb	r3, [r7, #7]
 8000bec:	011b      	lsls	r3, r3, #4
 8000bee:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8000bf0:	7bfb      	ldrb	r3, [r7, #15]
 8000bf2:	f043 030c 	orr.w	r3, r3, #12
 8000bf6:	b2db      	uxtb	r3, r3
 8000bf8:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x08;  //en=0, rs=0
 8000bfa:	7bfb      	ldrb	r3, [r7, #15]
 8000bfc:	f043 0308 	orr.w	r3, r3, #8
 8000c00:	b2db      	uxtb	r3, r3
 8000c02:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0C;  //en=1, rs=0
 8000c04:	7bbb      	ldrb	r3, [r7, #14]
 8000c06:	f043 030c 	orr.w	r3, r3, #12
 8000c0a:	b2db      	uxtb	r3, r3
 8000c0c:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x08;  //en=0, rs=0
 8000c0e:	7bbb      	ldrb	r3, [r7, #14]
 8000c10:	f043 0308 	orr.w	r3, r3, #8
 8000c14:	b2db      	uxtb	r3, r3
 8000c16:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8000c18:	f107 0208 	add.w	r2, r7, #8
 8000c1c:	2364      	movs	r3, #100	; 0x64
 8000c1e:	9300      	str	r3, [sp, #0]
 8000c20:	2304      	movs	r3, #4
 8000c22:	214e      	movs	r1, #78	; 0x4e
 8000c24:	4803      	ldr	r0, [pc, #12]	; (8000c34 <lcd_send_cmd+0x5c>)
 8000c26:	f003 fc19 	bl	800445c <HAL_I2C_Master_Transmit>
}
 8000c2a:	bf00      	nop
 8000c2c:	3710      	adds	r7, #16
 8000c2e:	46bd      	mov	sp, r7
 8000c30:	bd80      	pop	{r7, pc}
 8000c32:	bf00      	nop
 8000c34:	20000278 	.word	0x20000278

08000c38 <lcd_send_data>:

void lcd_send_data (char data)
{
 8000c38:	b580      	push	{r7, lr}
 8000c3a:	b086      	sub	sp, #24
 8000c3c:	af02      	add	r7, sp, #8
 8000c3e:	4603      	mov	r3, r0
 8000c40:	71fb      	strb	r3, [r7, #7]
	char data_u, data_l;
	uint8_t data_t[4];
	data_u = (data&0xf0);
 8000c42:	79fb      	ldrb	r3, [r7, #7]
 8000c44:	f023 030f 	bic.w	r3, r3, #15
 8000c48:	73fb      	strb	r3, [r7, #15]
	data_l = ((data<<4)&0xf0);
 8000c4a:	79fb      	ldrb	r3, [r7, #7]
 8000c4c:	011b      	lsls	r3, r3, #4
 8000c4e:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8000c50:	7bfb      	ldrb	r3, [r7, #15]
 8000c52:	f043 030d 	orr.w	r3, r3, #13
 8000c56:	b2db      	uxtb	r3, r3
 8000c58:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x09;  //en=0, rs=0
 8000c5a:	7bfb      	ldrb	r3, [r7, #15]
 8000c5c:	f043 0309 	orr.w	r3, r3, #9
 8000c60:	b2db      	uxtb	r3, r3
 8000c62:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 8000c64:	7bbb      	ldrb	r3, [r7, #14]
 8000c66:	f043 030d 	orr.w	r3, r3, #13
 8000c6a:	b2db      	uxtb	r3, r3
 8000c6c:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x09;  //en=0, rs=0
 8000c6e:	7bbb      	ldrb	r3, [r7, #14]
 8000c70:	f043 0309 	orr.w	r3, r3, #9
 8000c74:	b2db      	uxtb	r3, r3
 8000c76:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8000c78:	f107 0208 	add.w	r2, r7, #8
 8000c7c:	2364      	movs	r3, #100	; 0x64
 8000c7e:	9300      	str	r3, [sp, #0]
 8000c80:	2304      	movs	r3, #4
 8000c82:	214e      	movs	r1, #78	; 0x4e
 8000c84:	4803      	ldr	r0, [pc, #12]	; (8000c94 <lcd_send_data+0x5c>)
 8000c86:	f003 fbe9 	bl	800445c <HAL_I2C_Master_Transmit>
}
 8000c8a:	bf00      	nop
 8000c8c:	3710      	adds	r7, #16
 8000c8e:	46bd      	mov	sp, r7
 8000c90:	bd80      	pop	{r7, pc}
 8000c92:	bf00      	nop
 8000c94:	20000278 	.word	0x20000278

08000c98 <lcd_clear>:

void lcd_clear (void)
{
 8000c98:	b580      	push	{r7, lr}
 8000c9a:	b082      	sub	sp, #8
 8000c9c:	af00      	add	r7, sp, #0
	lcd_send_cmd (0x80);
 8000c9e:	2080      	movs	r0, #128	; 0x80
 8000ca0:	f7ff ff9a 	bl	8000bd8 <lcd_send_cmd>
	for (int i=0; i<70; i++)
 8000ca4:	2300      	movs	r3, #0
 8000ca6:	607b      	str	r3, [r7, #4]
 8000ca8:	e005      	b.n	8000cb6 <lcd_clear+0x1e>
	{
		lcd_send_data (' ');
 8000caa:	2020      	movs	r0, #32
 8000cac:	f7ff ffc4 	bl	8000c38 <lcd_send_data>
	for (int i=0; i<70; i++)
 8000cb0:	687b      	ldr	r3, [r7, #4]
 8000cb2:	3301      	adds	r3, #1
 8000cb4:	607b      	str	r3, [r7, #4]
 8000cb6:	687b      	ldr	r3, [r7, #4]
 8000cb8:	2b45      	cmp	r3, #69	; 0x45
 8000cba:	ddf6      	ble.n	8000caa <lcd_clear+0x12>
	}
}
 8000cbc:	bf00      	nop
 8000cbe:	bf00      	nop
 8000cc0:	3708      	adds	r7, #8
 8000cc2:	46bd      	mov	sp, r7
 8000cc4:	bd80      	pop	{r7, pc}

08000cc6 <lcd_put_cur>:

void lcd_put_cur(int row, int col)
{
 8000cc6:	b580      	push	{r7, lr}
 8000cc8:	b082      	sub	sp, #8
 8000cca:	af00      	add	r7, sp, #0
 8000ccc:	6078      	str	r0, [r7, #4]
 8000cce:	6039      	str	r1, [r7, #0]
    switch (row)
 8000cd0:	687b      	ldr	r3, [r7, #4]
 8000cd2:	2b00      	cmp	r3, #0
 8000cd4:	d003      	beq.n	8000cde <lcd_put_cur+0x18>
 8000cd6:	687b      	ldr	r3, [r7, #4]
 8000cd8:	2b01      	cmp	r3, #1
 8000cda:	d005      	beq.n	8000ce8 <lcd_put_cur+0x22>
 8000cdc:	e009      	b.n	8000cf2 <lcd_put_cur+0x2c>
    {
        case 0:
            col |= 0x80;
 8000cde:	683b      	ldr	r3, [r7, #0]
 8000ce0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000ce4:	603b      	str	r3, [r7, #0]
            break;
 8000ce6:	e004      	b.n	8000cf2 <lcd_put_cur+0x2c>
        case 1:
            col |= 0xC0;
 8000ce8:	683b      	ldr	r3, [r7, #0]
 8000cea:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8000cee:	603b      	str	r3, [r7, #0]
            break;
 8000cf0:	bf00      	nop
    }

    lcd_send_cmd (col);
 8000cf2:	683b      	ldr	r3, [r7, #0]
 8000cf4:	b2db      	uxtb	r3, r3
 8000cf6:	4618      	mov	r0, r3
 8000cf8:	f7ff ff6e 	bl	8000bd8 <lcd_send_cmd>
}
 8000cfc:	bf00      	nop
 8000cfe:	3708      	adds	r7, #8
 8000d00:	46bd      	mov	sp, r7
 8000d02:	bd80      	pop	{r7, pc}

08000d04 <lcd_init>:


void lcd_init (void)
{
 8000d04:	b580      	push	{r7, lr}
 8000d06:	af00      	add	r7, sp, #0
	// 4 bit initialisation
	HAL_Delay(50);  // wait for >40ms
 8000d08:	2032      	movs	r0, #50	; 0x32
 8000d0a:	f002 f8ef 	bl	8002eec <HAL_Delay>
	lcd_send_cmd (0x30);
 8000d0e:	2030      	movs	r0, #48	; 0x30
 8000d10:	f7ff ff62 	bl	8000bd8 <lcd_send_cmd>
	HAL_Delay(5);  // wait for >4.1ms
 8000d14:	2005      	movs	r0, #5
 8000d16:	f002 f8e9 	bl	8002eec <HAL_Delay>
	lcd_send_cmd (0x30);
 8000d1a:	2030      	movs	r0, #48	; 0x30
 8000d1c:	f7ff ff5c 	bl	8000bd8 <lcd_send_cmd>
	HAL_Delay(1);  // wait for >100us
 8000d20:	2001      	movs	r0, #1
 8000d22:	f002 f8e3 	bl	8002eec <HAL_Delay>
	lcd_send_cmd (0x30);
 8000d26:	2030      	movs	r0, #48	; 0x30
 8000d28:	f7ff ff56 	bl	8000bd8 <lcd_send_cmd>
	HAL_Delay(10);
 8000d2c:	200a      	movs	r0, #10
 8000d2e:	f002 f8dd 	bl	8002eec <HAL_Delay>
	lcd_send_cmd (0x20);  // 4bit mode
 8000d32:	2020      	movs	r0, #32
 8000d34:	f7ff ff50 	bl	8000bd8 <lcd_send_cmd>
	HAL_Delay(10);
 8000d38:	200a      	movs	r0, #10
 8000d3a:	f002 f8d7 	bl	8002eec <HAL_Delay>

  // dislay initialisation
	lcd_send_cmd (0x28); // Function set --> DL=0 (4 bit mode), N = 1 (2 line display) F = 0 (5x8 characters)
 8000d3e:	2028      	movs	r0, #40	; 0x28
 8000d40:	f7ff ff4a 	bl	8000bd8 <lcd_send_cmd>
	HAL_Delay(1);
 8000d44:	2001      	movs	r0, #1
 8000d46:	f002 f8d1 	bl	8002eec <HAL_Delay>
	lcd_send_cmd (0x08); //Display on/off control --> D=0,C=0, B=0  ---> display off
 8000d4a:	2008      	movs	r0, #8
 8000d4c:	f7ff ff44 	bl	8000bd8 <lcd_send_cmd>
	HAL_Delay(1);
 8000d50:	2001      	movs	r0, #1
 8000d52:	f002 f8cb 	bl	8002eec <HAL_Delay>
	lcd_send_cmd (0x01);  // clear display
 8000d56:	2001      	movs	r0, #1
 8000d58:	f7ff ff3e 	bl	8000bd8 <lcd_send_cmd>
	HAL_Delay(1);
 8000d5c:	2001      	movs	r0, #1
 8000d5e:	f002 f8c5 	bl	8002eec <HAL_Delay>
	HAL_Delay(1);
 8000d62:	2001      	movs	r0, #1
 8000d64:	f002 f8c2 	bl	8002eec <HAL_Delay>
	lcd_send_cmd (0x06); //Entry mode set --> I/D = 1 (increment cursor) & S = 0 (no shift)
 8000d68:	2006      	movs	r0, #6
 8000d6a:	f7ff ff35 	bl	8000bd8 <lcd_send_cmd>
	HAL_Delay(1);
 8000d6e:	2001      	movs	r0, #1
 8000d70:	f002 f8bc 	bl	8002eec <HAL_Delay>
	lcd_send_cmd (0x0C); //Display on/off control --> D = 1, C and B = 0. (Cursor and blink, last two bits)
 8000d74:	200c      	movs	r0, #12
 8000d76:	f7ff ff2f 	bl	8000bd8 <lcd_send_cmd>
}
 8000d7a:	bf00      	nop
 8000d7c:	bd80      	pop	{r7, pc}

08000d7e <lcd_send_string>:

void lcd_send_string (char *str)
{
 8000d7e:	b580      	push	{r7, lr}
 8000d80:	b082      	sub	sp, #8
 8000d82:	af00      	add	r7, sp, #0
 8000d84:	6078      	str	r0, [r7, #4]
	while (*str) lcd_send_data (*str++);
 8000d86:	e006      	b.n	8000d96 <lcd_send_string+0x18>
 8000d88:	687b      	ldr	r3, [r7, #4]
 8000d8a:	1c5a      	adds	r2, r3, #1
 8000d8c:	607a      	str	r2, [r7, #4]
 8000d8e:	781b      	ldrb	r3, [r3, #0]
 8000d90:	4618      	mov	r0, r3
 8000d92:	f7ff ff51 	bl	8000c38 <lcd_send_data>
 8000d96:	687b      	ldr	r3, [r7, #4]
 8000d98:	781b      	ldrb	r3, [r3, #0]
 8000d9a:	2b00      	cmp	r3, #0
 8000d9c:	d1f4      	bne.n	8000d88 <lcd_send_string+0xa>
}
 8000d9e:	bf00      	nop
 8000da0:	bf00      	nop
 8000da2:	3708      	adds	r7, #8
 8000da4:	46bd      	mov	sp, r7
 8000da6:	bd80      	pop	{r7, pc}

08000da8 <Init>:
      double y; // Angle difference
      double S; // Estimate error
  };


  void   Init(struct Kalman* klm){
 8000da8:	b480      	push	{r7}
 8000daa:	b083      	sub	sp, #12
 8000dac:	af00      	add	r7, sp, #0
 8000dae:	6078      	str	r0, [r7, #4]
      /* We will set the variables like so, these can also be tuned by the user */
      klm->Q_angle = 0.001;
 8000db0:	6879      	ldr	r1, [r7, #4]
 8000db2:	a321      	add	r3, pc, #132	; (adr r3, 8000e38 <Init+0x90>)
 8000db4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000db8:	e9c1 2300 	strd	r2, r3, [r1]
      klm->Q_bias = 0.003;
 8000dbc:	6879      	ldr	r1, [r7, #4]
 8000dbe:	a320      	add	r3, pc, #128	; (adr r3, 8000e40 <Init+0x98>)
 8000dc0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000dc4:	e9c1 2302 	strd	r2, r3, [r1, #8]
      klm->R_measure = 0.03;
 8000dc8:	6879      	ldr	r1, [r7, #4]
 8000dca:	a31f      	add	r3, pc, #124	; (adr r3, 8000e48 <Init+0xa0>)
 8000dcc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000dd0:	e9c1 2304 	strd	r2, r3, [r1, #16]

      klm->angle = 0; // Reset the angle
 8000dd4:	6879      	ldr	r1, [r7, #4]
 8000dd6:	f04f 0200 	mov.w	r2, #0
 8000dda:	f04f 0300 	mov.w	r3, #0
 8000dde:	e9c1 2306 	strd	r2, r3, [r1, #24]
      klm->bias = 0; // Reset bias
 8000de2:	6879      	ldr	r1, [r7, #4]
 8000de4:	f04f 0200 	mov.w	r2, #0
 8000de8:	f04f 0300 	mov.w	r3, #0
 8000dec:	e9c1 2308 	strd	r2, r3, [r1, #32]

      klm->P[0][0] = 0; // Since we assume that the bias is 0 and we know the starting angle (use setAngle), the error covariance matrix is set like so - see: http://en->wikipedia->org/wiki/Kalman_filter#Example_application->2C_technical
 8000df0:	6879      	ldr	r1, [r7, #4]
 8000df2:	f04f 0200 	mov.w	r2, #0
 8000df6:	f04f 0300 	mov.w	r3, #0
 8000dfa:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
      klm->P[0][1] = 0;
 8000dfe:	6879      	ldr	r1, [r7, #4]
 8000e00:	f04f 0200 	mov.w	r2, #0
 8000e04:	f04f 0300 	mov.w	r3, #0
 8000e08:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
      klm->P[1][0] = 0;
 8000e0c:	6879      	ldr	r1, [r7, #4]
 8000e0e:	f04f 0200 	mov.w	r2, #0
 8000e12:	f04f 0300 	mov.w	r3, #0
 8000e16:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40
      klm->P[1][1] = 0;
 8000e1a:	6879      	ldr	r1, [r7, #4]
 8000e1c:	f04f 0200 	mov.w	r2, #0
 8000e20:	f04f 0300 	mov.w	r3, #0
 8000e24:	e9c1 2312 	strd	r2, r3, [r1, #72]	; 0x48
  }
 8000e28:	bf00      	nop
 8000e2a:	370c      	adds	r7, #12
 8000e2c:	46bd      	mov	sp, r7
 8000e2e:	bc80      	pop	{r7}
 8000e30:	4770      	bx	lr
 8000e32:	bf00      	nop
 8000e34:	f3af 8000 	nop.w
 8000e38:	d2f1a9fc 	.word	0xd2f1a9fc
 8000e3c:	3f50624d 	.word	0x3f50624d
 8000e40:	bc6a7efa 	.word	0xbc6a7efa
 8000e44:	3f689374 	.word	0x3f689374
 8000e48:	eb851eb8 	.word	0xeb851eb8
 8000e4c:	3f9eb851 	.word	0x3f9eb851

08000e50 <getAngle>:


  // The angle should be in degrees and the rate should be in degrees per second and the delta time in seconds
  double getAngle(struct Kalman * klm, double newAngle, double newRate, double dt) {
 8000e50:	b5b0      	push	{r4, r5, r7, lr}
 8000e52:	b084      	sub	sp, #16
 8000e54:	af00      	add	r7, sp, #0
 8000e56:	60f8      	str	r0, [r7, #12]
 8000e58:	e9c7 2300 	strd	r2, r3, [r7]

      /* Step 1 */
      klm->rate = newRate - klm->bias;
 8000e5c:	68fb      	ldr	r3, [r7, #12]
 8000e5e:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8000e62:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8000e66:	f7ff f97f 	bl	8000168 <__aeabi_dsub>
 8000e6a:	4602      	mov	r2, r0
 8000e6c:	460b      	mov	r3, r1
 8000e6e:	68f9      	ldr	r1, [r7, #12]
 8000e70:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
      klm->angle += dt * klm->rate;
 8000e74:	68fb      	ldr	r3, [r7, #12]
 8000e76:	e9d3 4506 	ldrd	r4, r5, [r3, #24]
 8000e7a:	68fb      	ldr	r3, [r7, #12]
 8000e7c:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	; 0x28
 8000e80:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8000e84:	f7ff fb28 	bl	80004d8 <__aeabi_dmul>
 8000e88:	4602      	mov	r2, r0
 8000e8a:	460b      	mov	r3, r1
 8000e8c:	4620      	mov	r0, r4
 8000e8e:	4629      	mov	r1, r5
 8000e90:	f7ff f96c 	bl	800016c <__adddf3>
 8000e94:	4602      	mov	r2, r0
 8000e96:	460b      	mov	r3, r1
 8000e98:	68f9      	ldr	r1, [r7, #12]
 8000e9a:	e9c1 2306 	strd	r2, r3, [r1, #24]

      // Update estimation error covariance - Project the error covariance ahead
      /* Step 2 */
      klm->P[0][0] += dt * (dt*klm->P[1][1] - klm->P[0][1] - klm->P[1][0] + klm->Q_angle);
 8000e9e:	68fb      	ldr	r3, [r7, #12]
 8000ea0:	e9d3 450c 	ldrd	r4, r5, [r3, #48]	; 0x30
 8000ea4:	68fb      	ldr	r3, [r7, #12]
 8000ea6:	e9d3 0112 	ldrd	r0, r1, [r3, #72]	; 0x48
 8000eaa:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8000eae:	f7ff fb13 	bl	80004d8 <__aeabi_dmul>
 8000eb2:	4602      	mov	r2, r0
 8000eb4:	460b      	mov	r3, r1
 8000eb6:	4610      	mov	r0, r2
 8000eb8:	4619      	mov	r1, r3
 8000eba:	68fb      	ldr	r3, [r7, #12]
 8000ebc:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 8000ec0:	f7ff f952 	bl	8000168 <__aeabi_dsub>
 8000ec4:	4602      	mov	r2, r0
 8000ec6:	460b      	mov	r3, r1
 8000ec8:	4610      	mov	r0, r2
 8000eca:	4619      	mov	r1, r3
 8000ecc:	68fb      	ldr	r3, [r7, #12]
 8000ece:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	; 0x40
 8000ed2:	f7ff f949 	bl	8000168 <__aeabi_dsub>
 8000ed6:	4602      	mov	r2, r0
 8000ed8:	460b      	mov	r3, r1
 8000eda:	4610      	mov	r0, r2
 8000edc:	4619      	mov	r1, r3
 8000ede:	68fb      	ldr	r3, [r7, #12]
 8000ee0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000ee4:	f7ff f942 	bl	800016c <__adddf3>
 8000ee8:	4602      	mov	r2, r0
 8000eea:	460b      	mov	r3, r1
 8000eec:	4610      	mov	r0, r2
 8000eee:	4619      	mov	r1, r3
 8000ef0:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8000ef4:	f7ff faf0 	bl	80004d8 <__aeabi_dmul>
 8000ef8:	4602      	mov	r2, r0
 8000efa:	460b      	mov	r3, r1
 8000efc:	4620      	mov	r0, r4
 8000efe:	4629      	mov	r1, r5
 8000f00:	f7ff f934 	bl	800016c <__adddf3>
 8000f04:	4602      	mov	r2, r0
 8000f06:	460b      	mov	r3, r1
 8000f08:	68f9      	ldr	r1, [r7, #12]
 8000f0a:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
      klm->P[0][1] -= dt * klm->P[1][1];
 8000f0e:	68fb      	ldr	r3, [r7, #12]
 8000f10:	e9d3 450e 	ldrd	r4, r5, [r3, #56]	; 0x38
 8000f14:	68fb      	ldr	r3, [r7, #12]
 8000f16:	e9d3 0112 	ldrd	r0, r1, [r3, #72]	; 0x48
 8000f1a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8000f1e:	f7ff fadb 	bl	80004d8 <__aeabi_dmul>
 8000f22:	4602      	mov	r2, r0
 8000f24:	460b      	mov	r3, r1
 8000f26:	4620      	mov	r0, r4
 8000f28:	4629      	mov	r1, r5
 8000f2a:	f7ff f91d 	bl	8000168 <__aeabi_dsub>
 8000f2e:	4602      	mov	r2, r0
 8000f30:	460b      	mov	r3, r1
 8000f32:	68f9      	ldr	r1, [r7, #12]
 8000f34:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
      klm->P[1][0] -= dt * klm->P[1][1];
 8000f38:	68fb      	ldr	r3, [r7, #12]
 8000f3a:	e9d3 4510 	ldrd	r4, r5, [r3, #64]	; 0x40
 8000f3e:	68fb      	ldr	r3, [r7, #12]
 8000f40:	e9d3 0112 	ldrd	r0, r1, [r3, #72]	; 0x48
 8000f44:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8000f48:	f7ff fac6 	bl	80004d8 <__aeabi_dmul>
 8000f4c:	4602      	mov	r2, r0
 8000f4e:	460b      	mov	r3, r1
 8000f50:	4620      	mov	r0, r4
 8000f52:	4629      	mov	r1, r5
 8000f54:	f7ff f908 	bl	8000168 <__aeabi_dsub>
 8000f58:	4602      	mov	r2, r0
 8000f5a:	460b      	mov	r3, r1
 8000f5c:	68f9      	ldr	r1, [r7, #12]
 8000f5e:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40
      klm->P[1][1] += klm->Q_bias * dt;
 8000f62:	68fb      	ldr	r3, [r7, #12]
 8000f64:	e9d3 4512 	ldrd	r4, r5, [r3, #72]	; 0x48
 8000f68:	68fb      	ldr	r3, [r7, #12]
 8000f6a:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8000f6e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8000f72:	f7ff fab1 	bl	80004d8 <__aeabi_dmul>
 8000f76:	4602      	mov	r2, r0
 8000f78:	460b      	mov	r3, r1
 8000f7a:	4620      	mov	r0, r4
 8000f7c:	4629      	mov	r1, r5
 8000f7e:	f7ff f8f5 	bl	800016c <__adddf3>
 8000f82:	4602      	mov	r2, r0
 8000f84:	460b      	mov	r3, r1
 8000f86:	68f9      	ldr	r1, [r7, #12]
 8000f88:	e9c1 2312 	strd	r2, r3, [r1, #72]	; 0x48

      // Discrete Kalman filter measurement update equations - Measurement Update ("Correct")
      // Calculate Kalman gain - Compute the Kalman gain
      /* Step 4 */
      klm->S = klm->P[0][0] + klm->R_measure;
 8000f8c:	68fb      	ldr	r3, [r7, #12]
 8000f8e:	e9d3 010c 	ldrd	r0, r1, [r3, #48]	; 0x30
 8000f92:	68fb      	ldr	r3, [r7, #12]
 8000f94:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8000f98:	f7ff f8e8 	bl	800016c <__adddf3>
 8000f9c:	4602      	mov	r2, r0
 8000f9e:	460b      	mov	r3, r1
 8000fa0:	68f9      	ldr	r1, [r7, #12]
 8000fa2:	e9c1 231a 	strd	r2, r3, [r1, #104]	; 0x68
      /* Step 5 */
      klm->K[0] = klm->P[0][0] / klm->S;
 8000fa6:	68fb      	ldr	r3, [r7, #12]
 8000fa8:	e9d3 010c 	ldrd	r0, r1, [r3, #48]	; 0x30
 8000fac:	68fb      	ldr	r3, [r7, #12]
 8000fae:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	; 0x68
 8000fb2:	f7ff fbbb 	bl	800072c <__aeabi_ddiv>
 8000fb6:	4602      	mov	r2, r0
 8000fb8:	460b      	mov	r3, r1
 8000fba:	68f9      	ldr	r1, [r7, #12]
 8000fbc:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
      klm->K[1] = klm->P[1][0] / klm->S;
 8000fc0:	68fb      	ldr	r3, [r7, #12]
 8000fc2:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	; 0x40
 8000fc6:	68fb      	ldr	r3, [r7, #12]
 8000fc8:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	; 0x68
 8000fcc:	f7ff fbae 	bl	800072c <__aeabi_ddiv>
 8000fd0:	4602      	mov	r2, r0
 8000fd2:	460b      	mov	r3, r1
 8000fd4:	68f9      	ldr	r1, [r7, #12]
 8000fd6:	e9c1 2316 	strd	r2, r3, [r1, #88]	; 0x58

      // Calculate angle and bias - Update estimate with measurement zk (newAngle)
      /* Step 3 */
      klm->y = newAngle - klm->angle;
 8000fda:	68fb      	ldr	r3, [r7, #12]
 8000fdc:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8000fe0:	e9d7 0100 	ldrd	r0, r1, [r7]
 8000fe4:	f7ff f8c0 	bl	8000168 <__aeabi_dsub>
 8000fe8:	4602      	mov	r2, r0
 8000fea:	460b      	mov	r3, r1
 8000fec:	68f9      	ldr	r1, [r7, #12]
 8000fee:	e9c1 2318 	strd	r2, r3, [r1, #96]	; 0x60
      /* Step 6 */
      klm->angle += klm->K[0] * klm->y;
 8000ff2:	68fb      	ldr	r3, [r7, #12]
 8000ff4:	e9d3 4506 	ldrd	r4, r5, [r3, #24]
 8000ff8:	68fb      	ldr	r3, [r7, #12]
 8000ffa:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	; 0x50
 8000ffe:	68fb      	ldr	r3, [r7, #12]
 8001000:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	; 0x60
 8001004:	f7ff fa68 	bl	80004d8 <__aeabi_dmul>
 8001008:	4602      	mov	r2, r0
 800100a:	460b      	mov	r3, r1
 800100c:	4620      	mov	r0, r4
 800100e:	4629      	mov	r1, r5
 8001010:	f7ff f8ac 	bl	800016c <__adddf3>
 8001014:	4602      	mov	r2, r0
 8001016:	460b      	mov	r3, r1
 8001018:	68f9      	ldr	r1, [r7, #12]
 800101a:	e9c1 2306 	strd	r2, r3, [r1, #24]
      klm->bias += klm->K[1] * klm->y;
 800101e:	68fb      	ldr	r3, [r7, #12]
 8001020:	e9d3 4508 	ldrd	r4, r5, [r3, #32]
 8001024:	68fb      	ldr	r3, [r7, #12]
 8001026:	e9d3 0116 	ldrd	r0, r1, [r3, #88]	; 0x58
 800102a:	68fb      	ldr	r3, [r7, #12]
 800102c:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	; 0x60
 8001030:	f7ff fa52 	bl	80004d8 <__aeabi_dmul>
 8001034:	4602      	mov	r2, r0
 8001036:	460b      	mov	r3, r1
 8001038:	4620      	mov	r0, r4
 800103a:	4629      	mov	r1, r5
 800103c:	f7ff f896 	bl	800016c <__adddf3>
 8001040:	4602      	mov	r2, r0
 8001042:	460b      	mov	r3, r1
 8001044:	68f9      	ldr	r1, [r7, #12]
 8001046:	e9c1 2308 	strd	r2, r3, [r1, #32]

      // Calculate estimation error covariance - Update the error covariance
      /* Step 7 */
      klm->P[0][0] -= klm->K[0] * klm->P[0][0];
 800104a:	68fb      	ldr	r3, [r7, #12]
 800104c:	e9d3 450c 	ldrd	r4, r5, [r3, #48]	; 0x30
 8001050:	68fb      	ldr	r3, [r7, #12]
 8001052:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	; 0x50
 8001056:	68fb      	ldr	r3, [r7, #12]
 8001058:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	; 0x30
 800105c:	f7ff fa3c 	bl	80004d8 <__aeabi_dmul>
 8001060:	4602      	mov	r2, r0
 8001062:	460b      	mov	r3, r1
 8001064:	4620      	mov	r0, r4
 8001066:	4629      	mov	r1, r5
 8001068:	f7ff f87e 	bl	8000168 <__aeabi_dsub>
 800106c:	4602      	mov	r2, r0
 800106e:	460b      	mov	r3, r1
 8001070:	68f9      	ldr	r1, [r7, #12]
 8001072:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
      klm->P[0][1] -= klm->K[0] * klm->P[0][1];
 8001076:	68fb      	ldr	r3, [r7, #12]
 8001078:	e9d3 450e 	ldrd	r4, r5, [r3, #56]	; 0x38
 800107c:	68fb      	ldr	r3, [r7, #12]
 800107e:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	; 0x50
 8001082:	68fb      	ldr	r3, [r7, #12]
 8001084:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 8001088:	f7ff fa26 	bl	80004d8 <__aeabi_dmul>
 800108c:	4602      	mov	r2, r0
 800108e:	460b      	mov	r3, r1
 8001090:	4620      	mov	r0, r4
 8001092:	4629      	mov	r1, r5
 8001094:	f7ff f868 	bl	8000168 <__aeabi_dsub>
 8001098:	4602      	mov	r2, r0
 800109a:	460b      	mov	r3, r1
 800109c:	68f9      	ldr	r1, [r7, #12]
 800109e:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
      klm->P[1][0] -= klm->K[1] * klm->P[0][0];
 80010a2:	68fb      	ldr	r3, [r7, #12]
 80010a4:	e9d3 4510 	ldrd	r4, r5, [r3, #64]	; 0x40
 80010a8:	68fb      	ldr	r3, [r7, #12]
 80010aa:	e9d3 0116 	ldrd	r0, r1, [r3, #88]	; 0x58
 80010ae:	68fb      	ldr	r3, [r7, #12]
 80010b0:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	; 0x30
 80010b4:	f7ff fa10 	bl	80004d8 <__aeabi_dmul>
 80010b8:	4602      	mov	r2, r0
 80010ba:	460b      	mov	r3, r1
 80010bc:	4620      	mov	r0, r4
 80010be:	4629      	mov	r1, r5
 80010c0:	f7ff f852 	bl	8000168 <__aeabi_dsub>
 80010c4:	4602      	mov	r2, r0
 80010c6:	460b      	mov	r3, r1
 80010c8:	68f9      	ldr	r1, [r7, #12]
 80010ca:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40
      klm->P[1][1] -= klm->K[1] * klm->P[0][1];
 80010ce:	68fb      	ldr	r3, [r7, #12]
 80010d0:	e9d3 4512 	ldrd	r4, r5, [r3, #72]	; 0x48
 80010d4:	68fb      	ldr	r3, [r7, #12]
 80010d6:	e9d3 0116 	ldrd	r0, r1, [r3, #88]	; 0x58
 80010da:	68fb      	ldr	r3, [r7, #12]
 80010dc:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 80010e0:	f7ff f9fa 	bl	80004d8 <__aeabi_dmul>
 80010e4:	4602      	mov	r2, r0
 80010e6:	460b      	mov	r3, r1
 80010e8:	4620      	mov	r0, r4
 80010ea:	4629      	mov	r1, r5
 80010ec:	f7ff f83c 	bl	8000168 <__aeabi_dsub>
 80010f0:	4602      	mov	r2, r0
 80010f2:	460b      	mov	r3, r1
 80010f4:	68f9      	ldr	r1, [r7, #12]
 80010f6:	e9c1 2312 	strd	r2, r3, [r1, #72]	; 0x48

      return klm->angle;
 80010fa:	68fb      	ldr	r3, [r7, #12]
 80010fc:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
  }
 8001100:	4610      	mov	r0, r2
 8001102:	4619      	mov	r1, r3
 8001104:	3710      	adds	r7, #16
 8001106:	46bd      	mov	sp, r7
 8001108:	bdb0      	pop	{r4, r5, r7, pc}

0800110a <setAngle>:

  void setAngle(struct Kalman* klm, double newAngle) { klm->angle = newAngle; }
 800110a:	b480      	push	{r7}
 800110c:	b085      	sub	sp, #20
 800110e:	af00      	add	r7, sp, #0
 8001110:	60f8      	str	r0, [r7, #12]
 8001112:	e9c7 2300 	strd	r2, r3, [r7]
 8001116:	68f9      	ldr	r1, [r7, #12]
 8001118:	e9d7 2300 	ldrd	r2, r3, [r7]
 800111c:	e9c1 2306 	strd	r2, r3, [r1, #24]
 8001120:	bf00      	nop
 8001122:	3714      	adds	r7, #20
 8001124:	46bd      	mov	sp, r7
 8001126:	bc80      	pop	{r7}
 8001128:	4770      	bx	lr
	...

0800112c <__io_putchar>:
#define PUTCHAR_PROTOTYPE int __io_putchar(int ch)
#else
#define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
#endif
PUTCHAR_PROTOTYPE
{
 800112c:	b580      	push	{r7, lr}
 800112e:	b082      	sub	sp, #8
 8001130:	af00      	add	r7, sp, #0
 8001132:	6078      	str	r0, [r7, #4]
  HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, 0xFFFF);
 8001134:	1d39      	adds	r1, r7, #4
 8001136:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800113a:	2201      	movs	r2, #1
 800113c:	4803      	ldr	r0, [pc, #12]	; (800114c <__io_putchar+0x20>)
 800113e:	f005 fb2a 	bl	8006796 <HAL_UART_Transmit>
  return ch;
 8001142:	687b      	ldr	r3, [r7, #4]
}
 8001144:	4618      	mov	r0, r3
 8001146:	3708      	adds	r7, #8
 8001148:	46bd      	mov	sp, r7
 800114a:	bd80      	pop	{r7, pc}
 800114c:	200003a4 	.word	0x200003a4

08001150 <MPU6050_Init>:
char gyro_pitch_value [30];
//=====================================================================================================================
//Get Gyro,Accel value

 void MPU6050_Init (void)
{
 8001150:	b580      	push	{r7, lr}
 8001152:	b086      	sub	sp, #24
 8001154:	af04      	add	r7, sp, #16
	uint8_t Data;
	uint8_t offset;

	// check device ID WHO_AM_I

	HAL_I2C_Mem_Read (&hi2c1, MPU6050_ADDR,WHO_AM_I_REG,1, &check, 1, 1000);
 8001156:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800115a:	9302      	str	r3, [sp, #8]
 800115c:	2301      	movs	r3, #1
 800115e:	9301      	str	r3, [sp, #4]
 8001160:	1dfb      	adds	r3, r7, #7
 8001162:	9300      	str	r3, [sp, #0]
 8001164:	2301      	movs	r3, #1
 8001166:	2275      	movs	r2, #117	; 0x75
 8001168:	21d0      	movs	r1, #208	; 0xd0
 800116a:	4881      	ldr	r0, [pc, #516]	; (8001370 <MPU6050_Init+0x220>)
 800116c:	f003 fb6e 	bl	800484c <HAL_I2C_Mem_Read>


	if (check == 104)  // 0x68 will be returned by the sensor if everything goes well
 8001170:	79fb      	ldrb	r3, [r7, #7]
 8001172:	2b68      	cmp	r3, #104	; 0x68
 8001174:	f040 80f4 	bne.w	8001360 <MPU6050_Init+0x210>
	{

		printf(" Connect Success\n ");
 8001178:	487e      	ldr	r0, [pc, #504]	; (8001374 <MPU6050_Init+0x224>)
 800117a:	f006 fb17 	bl	80077ac <iprintf>
		// power management register 0X6B we should write all 0's to wake the sensor up
		Data = 0;
 800117e:	2300      	movs	r3, #0
 8001180:	71bb      	strb	r3, [r7, #6]
		HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, PWR_MGMT_1_REG, 1,&Data, 1, 1000);
 8001182:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001186:	9302      	str	r3, [sp, #8]
 8001188:	2301      	movs	r3, #1
 800118a:	9301      	str	r3, [sp, #4]
 800118c:	1dbb      	adds	r3, r7, #6
 800118e:	9300      	str	r3, [sp, #0]
 8001190:	2301      	movs	r3, #1
 8001192:	226b      	movs	r2, #107	; 0x6b
 8001194:	21d0      	movs	r1, #208	; 0xd0
 8001196:	4876      	ldr	r0, [pc, #472]	; (8001370 <MPU6050_Init+0x220>)
 8001198:	f003 fa5e 	bl	8004658 <HAL_I2C_Mem_Write>

		// Set DATA RATE of 1KHz by writing SMPLRT_DIV register
		Data = 0x07;
 800119c:	2307      	movs	r3, #7
 800119e:	71bb      	strb	r3, [r7, #6]
		HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, SMPLRT_DIV_REG, 1, &Data, 1, 1000);
 80011a0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80011a4:	9302      	str	r3, [sp, #8]
 80011a6:	2301      	movs	r3, #1
 80011a8:	9301      	str	r3, [sp, #4]
 80011aa:	1dbb      	adds	r3, r7, #6
 80011ac:	9300      	str	r3, [sp, #0]
 80011ae:	2301      	movs	r3, #1
 80011b0:	2219      	movs	r2, #25
 80011b2:	21d0      	movs	r1, #208	; 0xd0
 80011b4:	486e      	ldr	r0, [pc, #440]	; (8001370 <MPU6050_Init+0x220>)
 80011b6:	f003 fa4f 	bl	8004658 <HAL_I2C_Mem_Write>

		// Set accelerometer configuration in ACCEL_CONFIG Register
		// XA_ST=0,YA_ST=0,ZA_ST=0, FS_SEL=0 -> �????????????????????????? 2g
		Data = 0x00;
 80011ba:	2300      	movs	r3, #0
 80011bc:	71bb      	strb	r3, [r7, #6]
		HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, ACCEL_CONFIG_REG, 1, &Data, 1, 1000);
 80011be:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80011c2:	9302      	str	r3, [sp, #8]
 80011c4:	2301      	movs	r3, #1
 80011c6:	9301      	str	r3, [sp, #4]
 80011c8:	1dbb      	adds	r3, r7, #6
 80011ca:	9300      	str	r3, [sp, #0]
 80011cc:	2301      	movs	r3, #1
 80011ce:	221c      	movs	r2, #28
 80011d0:	21d0      	movs	r1, #208	; 0xd0
 80011d2:	4867      	ldr	r0, [pc, #412]	; (8001370 <MPU6050_Init+0x220>)
 80011d4:	f003 fa40 	bl	8004658 <HAL_I2C_Mem_Write>

		// Set Gyroscopic configuration in GYRO_CONFIG Register
		// XG_ST=0,YG_ST=0,ZG_ST=0, FS_SEL=0 -> �????????????????????????? 250 �?????????????????????????/s
		Data = 0x00;
 80011d8:	2300      	movs	r3, #0
 80011da:	71bb      	strb	r3, [r7, #6]
		HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, GYRO_CONFIG_REG, 1 , &Data, 1, 1000);
 80011dc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80011e0:	9302      	str	r3, [sp, #8]
 80011e2:	2301      	movs	r3, #1
 80011e4:	9301      	str	r3, [sp, #4]
 80011e6:	1dbb      	adds	r3, r7, #6
 80011e8:	9300      	str	r3, [sp, #0]
 80011ea:	2301      	movs	r3, #1
 80011ec:	221b      	movs	r2, #27
 80011ee:	21d0      	movs	r1, #208	; 0xd0
 80011f0:	485f      	ldr	r0, [pc, #380]	; (8001370 <MPU6050_Init+0x220>)
 80011f2:	f003 fa31 	bl	8004658 <HAL_I2C_Mem_Write>


		offset = 0x02;
 80011f6:	2302      	movs	r3, #2
 80011f8:	717b      	strb	r3, [r7, #5]
		HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, RA_XA_OFFS_H, 1, &offset, 1, 1000);
 80011fa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80011fe:	9302      	str	r3, [sp, #8]
 8001200:	2301      	movs	r3, #1
 8001202:	9301      	str	r3, [sp, #4]
 8001204:	1d7b      	adds	r3, r7, #5
 8001206:	9300      	str	r3, [sp, #0]
 8001208:	2301      	movs	r3, #1
 800120a:	2206      	movs	r2, #6
 800120c:	21d0      	movs	r1, #208	; 0xd0
 800120e:	4858      	ldr	r0, [pc, #352]	; (8001370 <MPU6050_Init+0x220>)
 8001210:	f003 fa22 	bl	8004658 <HAL_I2C_Mem_Write>
		offset = 0x32;
 8001214:	2332      	movs	r3, #50	; 0x32
 8001216:	717b      	strb	r3, [r7, #5]
		HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, RA_XA_OFFS_L_TC, 1, &offset, 1, 1000);
 8001218:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800121c:	9302      	str	r3, [sp, #8]
 800121e:	2301      	movs	r3, #1
 8001220:	9301      	str	r3, [sp, #4]
 8001222:	1d7b      	adds	r3, r7, #5
 8001224:	9300      	str	r3, [sp, #0]
 8001226:	2301      	movs	r3, #1
 8001228:	2207      	movs	r2, #7
 800122a:	21d0      	movs	r1, #208	; 0xd0
 800122c:	4850      	ldr	r0, [pc, #320]	; (8001370 <MPU6050_Init+0x220>)
 800122e:	f003 fa13 	bl	8004658 <HAL_I2C_Mem_Write>


		offset = 0XFB;
 8001232:	23fb      	movs	r3, #251	; 0xfb
 8001234:	717b      	strb	r3, [r7, #5]
		HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, RA_YA_OFFS_H, 1, &offset, 1, 1000);
 8001236:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800123a:	9302      	str	r3, [sp, #8]
 800123c:	2301      	movs	r3, #1
 800123e:	9301      	str	r3, [sp, #4]
 8001240:	1d7b      	adds	r3, r7, #5
 8001242:	9300      	str	r3, [sp, #0]
 8001244:	2301      	movs	r3, #1
 8001246:	2208      	movs	r2, #8
 8001248:	21d0      	movs	r1, #208	; 0xd0
 800124a:	4849      	ldr	r0, [pc, #292]	; (8001370 <MPU6050_Init+0x220>)
 800124c:	f003 fa04 	bl	8004658 <HAL_I2C_Mem_Write>
		offset = 0xC8;
 8001250:	23c8      	movs	r3, #200	; 0xc8
 8001252:	717b      	strb	r3, [r7, #5]
		HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, RA_YA_OFFS_L_TC, 1, &offset, 1, 1000);
 8001254:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001258:	9302      	str	r3, [sp, #8]
 800125a:	2301      	movs	r3, #1
 800125c:	9301      	str	r3, [sp, #4]
 800125e:	1d7b      	adds	r3, r7, #5
 8001260:	9300      	str	r3, [sp, #0]
 8001262:	2301      	movs	r3, #1
 8001264:	2209      	movs	r2, #9
 8001266:	21d0      	movs	r1, #208	; 0xd0
 8001268:	4841      	ldr	r0, [pc, #260]	; (8001370 <MPU6050_Init+0x220>)
 800126a:	f003 f9f5 	bl	8004658 <HAL_I2C_Mem_Write>


		offset = 0x08;
 800126e:	2308      	movs	r3, #8
 8001270:	717b      	strb	r3, [r7, #5]
		HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, RA_ZA_OFFS_H, 1, &offset, 1, 1000);
 8001272:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001276:	9302      	str	r3, [sp, #8]
 8001278:	2301      	movs	r3, #1
 800127a:	9301      	str	r3, [sp, #4]
 800127c:	1d7b      	adds	r3, r7, #5
 800127e:	9300      	str	r3, [sp, #0]
 8001280:	2301      	movs	r3, #1
 8001282:	220a      	movs	r2, #10
 8001284:	21d0      	movs	r1, #208	; 0xd0
 8001286:	483a      	ldr	r0, [pc, #232]	; (8001370 <MPU6050_Init+0x220>)
 8001288:	f003 f9e6 	bl	8004658 <HAL_I2C_Mem_Write>
		offset = 0xA1;
 800128c:	23a1      	movs	r3, #161	; 0xa1
 800128e:	717b      	strb	r3, [r7, #5]
		HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, RA_ZA_OFFS_L_TC, 1, &offset, 1, 1000);
 8001290:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001294:	9302      	str	r3, [sp, #8]
 8001296:	2301      	movs	r3, #1
 8001298:	9301      	str	r3, [sp, #4]
 800129a:	1d7b      	adds	r3, r7, #5
 800129c:	9300      	str	r3, [sp, #0]
 800129e:	2301      	movs	r3, #1
 80012a0:	220b      	movs	r2, #11
 80012a2:	21d0      	movs	r1, #208	; 0xd0
 80012a4:	4832      	ldr	r0, [pc, #200]	; (8001370 <MPU6050_Init+0x220>)
 80012a6:	f003 f9d7 	bl	8004658 <HAL_I2C_Mem_Write>


		offset = 0xFF;
 80012aa:	23ff      	movs	r3, #255	; 0xff
 80012ac:	717b      	strb	r3, [r7, #5]
		HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, RA_XG_OFFS_USRH, 1, &offset, 1, 1000);
 80012ae:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80012b2:	9302      	str	r3, [sp, #8]
 80012b4:	2301      	movs	r3, #1
 80012b6:	9301      	str	r3, [sp, #4]
 80012b8:	1d7b      	adds	r3, r7, #5
 80012ba:	9300      	str	r3, [sp, #0]
 80012bc:	2301      	movs	r3, #1
 80012be:	2213      	movs	r2, #19
 80012c0:	21d0      	movs	r1, #208	; 0xd0
 80012c2:	482b      	ldr	r0, [pc, #172]	; (8001370 <MPU6050_Init+0x220>)
 80012c4:	f003 f9c8 	bl	8004658 <HAL_I2C_Mem_Write>
		offset = 0x6B;
 80012c8:	236b      	movs	r3, #107	; 0x6b
 80012ca:	717b      	strb	r3, [r7, #5]
		HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, RA_XG_OFFS_USRL, 1, &offset, 1, 1000);
 80012cc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80012d0:	9302      	str	r3, [sp, #8]
 80012d2:	2301      	movs	r3, #1
 80012d4:	9301      	str	r3, [sp, #4]
 80012d6:	1d7b      	adds	r3, r7, #5
 80012d8:	9300      	str	r3, [sp, #0]
 80012da:	2301      	movs	r3, #1
 80012dc:	2214      	movs	r2, #20
 80012de:	21d0      	movs	r1, #208	; 0xd0
 80012e0:	4823      	ldr	r0, [pc, #140]	; (8001370 <MPU6050_Init+0x220>)
 80012e2:	f003 f9b9 	bl	8004658 <HAL_I2C_Mem_Write>


		offset = 0x01;
 80012e6:	2301      	movs	r3, #1
 80012e8:	717b      	strb	r3, [r7, #5]
		HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, RA_YG_OFFS_USRH, 1, &offset, 1, 1000);
 80012ea:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80012ee:	9302      	str	r3, [sp, #8]
 80012f0:	2301      	movs	r3, #1
 80012f2:	9301      	str	r3, [sp, #4]
 80012f4:	1d7b      	adds	r3, r7, #5
 80012f6:	9300      	str	r3, [sp, #0]
 80012f8:	2301      	movs	r3, #1
 80012fa:	2215      	movs	r2, #21
 80012fc:	21d0      	movs	r1, #208	; 0xd0
 80012fe:	481c      	ldr	r0, [pc, #112]	; (8001370 <MPU6050_Init+0x220>)
 8001300:	f003 f9aa 	bl	8004658 <HAL_I2C_Mem_Write>
		offset = 0x19;
 8001304:	2319      	movs	r3, #25
 8001306:	717b      	strb	r3, [r7, #5]
		HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, RA_YG_OFFS_USRL, 1, &offset, 1, 1000);
 8001308:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800130c:	9302      	str	r3, [sp, #8]
 800130e:	2301      	movs	r3, #1
 8001310:	9301      	str	r3, [sp, #4]
 8001312:	1d7b      	adds	r3, r7, #5
 8001314:	9300      	str	r3, [sp, #0]
 8001316:	2301      	movs	r3, #1
 8001318:	2216      	movs	r2, #22
 800131a:	21d0      	movs	r1, #208	; 0xd0
 800131c:	4814      	ldr	r0, [pc, #80]	; (8001370 <MPU6050_Init+0x220>)
 800131e:	f003 f99b 	bl	8004658 <HAL_I2C_Mem_Write>

		offset = 0xFF;
 8001322:	23ff      	movs	r3, #255	; 0xff
 8001324:	717b      	strb	r3, [r7, #5]
		HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, RA_ZG_OFFS_USRH, 1, &offset, 1, 1000);
 8001326:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800132a:	9302      	str	r3, [sp, #8]
 800132c:	2301      	movs	r3, #1
 800132e:	9301      	str	r3, [sp, #4]
 8001330:	1d7b      	adds	r3, r7, #5
 8001332:	9300      	str	r3, [sp, #0]
 8001334:	2301      	movs	r3, #1
 8001336:	2217      	movs	r2, #23
 8001338:	21d0      	movs	r1, #208	; 0xd0
 800133a:	480d      	ldr	r0, [pc, #52]	; (8001370 <MPU6050_Init+0x220>)
 800133c:	f003 f98c 	bl	8004658 <HAL_I2C_Mem_Write>
		offset = 0x00;
 8001340:	2300      	movs	r3, #0
 8001342:	717b      	strb	r3, [r7, #5]
		HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, RA_ZG_OFFS_USRL, 1, &offset, 1, 1000);
 8001344:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001348:	9302      	str	r3, [sp, #8]
 800134a:	2301      	movs	r3, #1
 800134c:	9301      	str	r3, [sp, #4]
 800134e:	1d7b      	adds	r3, r7, #5
 8001350:	9300      	str	r3, [sp, #0]
 8001352:	2301      	movs	r3, #1
 8001354:	2218      	movs	r2, #24
 8001356:	21d0      	movs	r1, #208	; 0xd0
 8001358:	4805      	ldr	r0, [pc, #20]	; (8001370 <MPU6050_Init+0x220>)
 800135a:	f003 f97d 	bl	8004658 <HAL_I2C_Mem_Write>

	}else
	printf(" Connect Fail\n ");


}
 800135e:	e002      	b.n	8001366 <MPU6050_Init+0x216>
	printf(" Connect Fail\n ");
 8001360:	4805      	ldr	r0, [pc, #20]	; (8001378 <MPU6050_Init+0x228>)
 8001362:	f006 fa23 	bl	80077ac <iprintf>
}
 8001366:	bf00      	nop
 8001368:	3708      	adds	r7, #8
 800136a:	46bd      	mov	sp, r7
 800136c:	bd80      	pop	{r7, pc}
 800136e:	bf00      	nop
 8001370:	20000278 	.word	0x20000278
 8001374:	0800b848 	.word	0x0800b848
 8001378:	0800b85c 	.word	0x0800b85c

0800137c <InitAll>:



 void InitAll()
 {
 800137c:	b580      	push	{r7, lr}
 800137e:	af00      	add	r7, sp, #0
     /* Set Kalman and gyro starting angle */
     updateMPU6050();
 8001380:	f000 f852 	bl	8001428 <updateMPU6050>
     updatePitchRoll();
 8001384:	f000 f8bc 	bl	8001500 <updatePitchRoll>

     setAngle(&kalmanX,roll); // First set roll starting angle
 8001388:	4b1b      	ldr	r3, [pc, #108]	; (80013f8 <InitAll+0x7c>)
 800138a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800138e:	481b      	ldr	r0, [pc, #108]	; (80013fc <InitAll+0x80>)
 8001390:	f7ff febb 	bl	800110a <setAngle>
     gyroXangle = roll;
 8001394:	4b18      	ldr	r3, [pc, #96]	; (80013f8 <InitAll+0x7c>)
 8001396:	e9d3 2300 	ldrd	r2, r3, [r3]
 800139a:	4919      	ldr	r1, [pc, #100]	; (8001400 <InitAll+0x84>)
 800139c:	e9c1 2300 	strd	r2, r3, [r1]
     compAngleX = roll;
 80013a0:	4b15      	ldr	r3, [pc, #84]	; (80013f8 <InitAll+0x7c>)
 80013a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013a6:	4917      	ldr	r1, [pc, #92]	; (8001404 <InitAll+0x88>)
 80013a8:	e9c1 2300 	strd	r2, r3, [r1]

     setAngle(&kalmanY,pitch); // Then pitch
 80013ac:	4b16      	ldr	r3, [pc, #88]	; (8001408 <InitAll+0x8c>)
 80013ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013b2:	4816      	ldr	r0, [pc, #88]	; (800140c <InitAll+0x90>)
 80013b4:	f7ff fea9 	bl	800110a <setAngle>
     gyroYangle = pitch;
 80013b8:	4b13      	ldr	r3, [pc, #76]	; (8001408 <InitAll+0x8c>)
 80013ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013be:	4914      	ldr	r1, [pc, #80]	; (8001410 <InitAll+0x94>)
 80013c0:	e9c1 2300 	strd	r2, r3, [r1]
     compAngleY = pitch;
 80013c4:	4b10      	ldr	r3, [pc, #64]	; (8001408 <InitAll+0x8c>)
 80013c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013ca:	4912      	ldr	r1, [pc, #72]	; (8001414 <InitAll+0x98>)
 80013cc:	e9c1 2300 	strd	r2, r3, [r1]

     setAngle(&kalmanZ,yaw); // And finally yaw
 80013d0:	4b11      	ldr	r3, [pc, #68]	; (8001418 <InitAll+0x9c>)
 80013d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013d6:	4811      	ldr	r0, [pc, #68]	; (800141c <InitAll+0xa0>)
 80013d8:	f7ff fe97 	bl	800110a <setAngle>
     gyroZangle = yaw;
 80013dc:	4b0e      	ldr	r3, [pc, #56]	; (8001418 <InitAll+0x9c>)
 80013de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013e2:	490f      	ldr	r1, [pc, #60]	; (8001420 <InitAll+0xa4>)
 80013e4:	e9c1 2300 	strd	r2, r3, [r1]
     compAngleZ = yaw;
 80013e8:	4b0b      	ldr	r3, [pc, #44]	; (8001418 <InitAll+0x9c>)
 80013ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013ee:	490d      	ldr	r1, [pc, #52]	; (8001424 <InitAll+0xa8>)
 80013f0:	e9c1 2300 	strd	r2, r3, [r1]

 }
 80013f4:	bf00      	nop
 80013f6:	bd80      	pop	{r7, pc}
 80013f8:	20000550 	.word	0x20000550
 80013fc:	200003e8 	.word	0x200003e8
 8001400:	20000568 	.word	0x20000568
 8001404:	20000580 	.word	0x20000580
 8001408:	20000558 	.word	0x20000558
 800140c:	20000458 	.word	0x20000458
 8001410:	20000570 	.word	0x20000570
 8001414:	20000588 	.word	0x20000588
 8001418:	20000560 	.word	0x20000560
 800141c:	200004c8 	.word	0x200004c8
 8001420:	20000578 	.word	0x20000578
 8001424:	20000590 	.word	0x20000590

08001428 <updateMPU6050>:



void updateMPU6050()
 {
 8001428:	b580      	push	{r7, lr}
 800142a:	b088      	sub	sp, #32
 800142c:	af04      	add	r7, sp, #16
	uint8_t Rec_Data1[6];
	uint8_t Rec_Data2[6];

	HAL_I2C_Mem_Read (&hi2c1, MPU6050_ADDR, GYRO_XOUT_H_REG, 1, Rec_Data1, 6, 1000);
 800142e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001432:	9302      	str	r3, [sp, #8]
 8001434:	2306      	movs	r3, #6
 8001436:	9301      	str	r3, [sp, #4]
 8001438:	f107 0308 	add.w	r3, r7, #8
 800143c:	9300      	str	r3, [sp, #0]
 800143e:	2301      	movs	r3, #1
 8001440:	2243      	movs	r2, #67	; 0x43
 8001442:	21d0      	movs	r1, #208	; 0xd0
 8001444:	4827      	ldr	r0, [pc, #156]	; (80014e4 <updateMPU6050+0xbc>)
 8001446:	f003 fa01 	bl	800484c <HAL_I2C_Mem_Read>

	gyroX = -(int16_t)(Rec_Data1[0] << 8 | Rec_Data1 [1]);
 800144a:	7a3b      	ldrb	r3, [r7, #8]
 800144c:	021b      	lsls	r3, r3, #8
 800144e:	b21a      	sxth	r2, r3
 8001450:	7a7b      	ldrb	r3, [r7, #9]
 8001452:	b21b      	sxth	r3, r3
 8001454:	4313      	orrs	r3, r2
 8001456:	b21b      	sxth	r3, r3
 8001458:	425b      	negs	r3, r3
 800145a:	4a23      	ldr	r2, [pc, #140]	; (80014e8 <updateMPU6050+0xc0>)
 800145c:	6013      	str	r3, [r2, #0]
	gyroY = (int16_t)(Rec_Data1[2] << 8 | Rec_Data1 [3]);
 800145e:	7abb      	ldrb	r3, [r7, #10]
 8001460:	021b      	lsls	r3, r3, #8
 8001462:	b21a      	sxth	r2, r3
 8001464:	7afb      	ldrb	r3, [r7, #11]
 8001466:	b21b      	sxth	r3, r3
 8001468:	4313      	orrs	r3, r2
 800146a:	b21b      	sxth	r3, r3
 800146c:	461a      	mov	r2, r3
 800146e:	4b1f      	ldr	r3, [pc, #124]	; (80014ec <updateMPU6050+0xc4>)
 8001470:	601a      	str	r2, [r3, #0]
	gyroZ = -(int16_t)(Rec_Data1[4] << 8 | Rec_Data1 [5]);
 8001472:	7b3b      	ldrb	r3, [r7, #12]
 8001474:	021b      	lsls	r3, r3, #8
 8001476:	b21a      	sxth	r2, r3
 8001478:	7b7b      	ldrb	r3, [r7, #13]
 800147a:	b21b      	sxth	r3, r3
 800147c:	4313      	orrs	r3, r2
 800147e:	b21b      	sxth	r3, r3
 8001480:	425b      	negs	r3, r3
 8001482:	4a1b      	ldr	r2, [pc, #108]	; (80014f0 <updateMPU6050+0xc8>)
 8001484:	6013      	str	r3, [r2, #0]



	HAL_I2C_Mem_Read (&hi2c1, MPU6050_ADDR, ACCEL_XOUT_H_REG, 1, Rec_Data2, 6, 1000);
 8001486:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800148a:	9302      	str	r3, [sp, #8]
 800148c:	2306      	movs	r3, #6
 800148e:	9301      	str	r3, [sp, #4]
 8001490:	463b      	mov	r3, r7
 8001492:	9300      	str	r3, [sp, #0]
 8001494:	2301      	movs	r3, #1
 8001496:	223b      	movs	r2, #59	; 0x3b
 8001498:	21d0      	movs	r1, #208	; 0xd0
 800149a:	4812      	ldr	r0, [pc, #72]	; (80014e4 <updateMPU6050+0xbc>)
 800149c:	f003 f9d6 	bl	800484c <HAL_I2C_Mem_Read>

	accX = (int16_t)(Rec_Data2[0] << 8 | Rec_Data2 [1]);
 80014a0:	783b      	ldrb	r3, [r7, #0]
 80014a2:	021b      	lsls	r3, r3, #8
 80014a4:	b21a      	sxth	r2, r3
 80014a6:	787b      	ldrb	r3, [r7, #1]
 80014a8:	b21b      	sxth	r3, r3
 80014aa:	4313      	orrs	r3, r2
 80014ac:	b21b      	sxth	r3, r3
 80014ae:	461a      	mov	r2, r3
 80014b0:	4b10      	ldr	r3, [pc, #64]	; (80014f4 <updateMPU6050+0xcc>)
 80014b2:	601a      	str	r2, [r3, #0]
	accY = -(int16_t)(Rec_Data2[2] << 8 | Rec_Data2 [3]);
 80014b4:	78bb      	ldrb	r3, [r7, #2]
 80014b6:	021b      	lsls	r3, r3, #8
 80014b8:	b21a      	sxth	r2, r3
 80014ba:	78fb      	ldrb	r3, [r7, #3]
 80014bc:	b21b      	sxth	r3, r3
 80014be:	4313      	orrs	r3, r2
 80014c0:	b21b      	sxth	r3, r3
 80014c2:	425b      	negs	r3, r3
 80014c4:	4a0c      	ldr	r2, [pc, #48]	; (80014f8 <updateMPU6050+0xd0>)
 80014c6:	6013      	str	r3, [r2, #0]
	accZ = (int16_t)(Rec_Data2[4] << 8 | Rec_Data2 [5]);
 80014c8:	793b      	ldrb	r3, [r7, #4]
 80014ca:	021b      	lsls	r3, r3, #8
 80014cc:	b21a      	sxth	r2, r3
 80014ce:	797b      	ldrb	r3, [r7, #5]
 80014d0:	b21b      	sxth	r3, r3
 80014d2:	4313      	orrs	r3, r2
 80014d4:	b21b      	sxth	r3, r3
 80014d6:	461a      	mov	r2, r3
 80014d8:	4b08      	ldr	r3, [pc, #32]	; (80014fc <updateMPU6050+0xd4>)
 80014da:	601a      	str	r2, [r3, #0]

 }
 80014dc:	bf00      	nop
 80014de:	3710      	adds	r7, #16
 80014e0:	46bd      	mov	sp, r7
 80014e2:	bd80      	pop	{r7, pc}
 80014e4:	20000278 	.word	0x20000278
 80014e8:	20000544 	.word	0x20000544
 80014ec:	20000548 	.word	0x20000548
 80014f0:	2000054c 	.word	0x2000054c
 80014f4:	20000538 	.word	0x20000538
 80014f8:	2000053c 	.word	0x2000053c
 80014fc:	20000540 	.word	0x20000540

08001500 <updatePitchRoll>:


void updatePitchRoll()
{
 8001500:	b5b0      	push	{r4, r5, r7, lr}
 8001502:	af00      	add	r7, sp, #0

    #ifdef RESTRICT_PITCH
    roll = atan(accY/sqrt(accX*accX+accZ*accZ)) * RAD_TO_DEG;
 8001504:	4b36      	ldr	r3, [pc, #216]	; (80015e0 <updatePitchRoll+0xe0>)
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	4618      	mov	r0, r3
 800150a:	f7fe ff7b 	bl	8000404 <__aeabi_i2d>
 800150e:	4604      	mov	r4, r0
 8001510:	460d      	mov	r5, r1
 8001512:	4b34      	ldr	r3, [pc, #208]	; (80015e4 <updatePitchRoll+0xe4>)
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	4a33      	ldr	r2, [pc, #204]	; (80015e4 <updatePitchRoll+0xe4>)
 8001518:	6812      	ldr	r2, [r2, #0]
 800151a:	fb03 f202 	mul.w	r2, r3, r2
 800151e:	4b32      	ldr	r3, [pc, #200]	; (80015e8 <updatePitchRoll+0xe8>)
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	4931      	ldr	r1, [pc, #196]	; (80015e8 <updatePitchRoll+0xe8>)
 8001524:	6809      	ldr	r1, [r1, #0]
 8001526:	fb01 f303 	mul.w	r3, r1, r3
 800152a:	4413      	add	r3, r2
 800152c:	4618      	mov	r0, r3
 800152e:	f7fe ff69 	bl	8000404 <__aeabi_i2d>
 8001532:	4602      	mov	r2, r0
 8001534:	460b      	mov	r3, r1
 8001536:	4610      	mov	r0, r2
 8001538:	4619      	mov	r1, r3
 800153a:	f00a f8a2 	bl	800b682 <sqrt>
 800153e:	4602      	mov	r2, r0
 8001540:	460b      	mov	r3, r1
 8001542:	4620      	mov	r0, r4
 8001544:	4629      	mov	r1, r5
 8001546:	f7ff f8f1 	bl	800072c <__aeabi_ddiv>
 800154a:	4602      	mov	r2, r0
 800154c:	460b      	mov	r3, r1
 800154e:	4610      	mov	r0, r2
 8001550:	4619      	mov	r1, r3
 8001552:	f009 ff09 	bl	800b368 <atan>
 8001556:	a320      	add	r3, pc, #128	; (adr r3, 80015d8 <updatePitchRoll+0xd8>)
 8001558:	e9d3 2300 	ldrd	r2, r3, [r3]
 800155c:	f7fe ffbc 	bl	80004d8 <__aeabi_dmul>
 8001560:	4602      	mov	r2, r0
 8001562:	460b      	mov	r3, r1
 8001564:	4921      	ldr	r1, [pc, #132]	; (80015ec <updatePitchRoll+0xec>)
 8001566:	e9c1 2300 	strd	r2, r3, [r1]
    pitch = atan(-accX / sqrt(accY * accY + accZ * accZ)) * RAD_TO_DEG;
 800156a:	4b1e      	ldr	r3, [pc, #120]	; (80015e4 <updatePitchRoll+0xe4>)
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	425b      	negs	r3, r3
 8001570:	4618      	mov	r0, r3
 8001572:	f7fe ff47 	bl	8000404 <__aeabi_i2d>
 8001576:	4604      	mov	r4, r0
 8001578:	460d      	mov	r5, r1
 800157a:	4b19      	ldr	r3, [pc, #100]	; (80015e0 <updatePitchRoll+0xe0>)
 800157c:	681b      	ldr	r3, [r3, #0]
 800157e:	4a18      	ldr	r2, [pc, #96]	; (80015e0 <updatePitchRoll+0xe0>)
 8001580:	6812      	ldr	r2, [r2, #0]
 8001582:	fb03 f202 	mul.w	r2, r3, r2
 8001586:	4b18      	ldr	r3, [pc, #96]	; (80015e8 <updatePitchRoll+0xe8>)
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	4917      	ldr	r1, [pc, #92]	; (80015e8 <updatePitchRoll+0xe8>)
 800158c:	6809      	ldr	r1, [r1, #0]
 800158e:	fb01 f303 	mul.w	r3, r1, r3
 8001592:	4413      	add	r3, r2
 8001594:	4618      	mov	r0, r3
 8001596:	f7fe ff35 	bl	8000404 <__aeabi_i2d>
 800159a:	4602      	mov	r2, r0
 800159c:	460b      	mov	r3, r1
 800159e:	4610      	mov	r0, r2
 80015a0:	4619      	mov	r1, r3
 80015a2:	f00a f86e 	bl	800b682 <sqrt>
 80015a6:	4602      	mov	r2, r0
 80015a8:	460b      	mov	r3, r1
 80015aa:	4620      	mov	r0, r4
 80015ac:	4629      	mov	r1, r5
 80015ae:	f7ff f8bd 	bl	800072c <__aeabi_ddiv>
 80015b2:	4602      	mov	r2, r0
 80015b4:	460b      	mov	r3, r1
 80015b6:	4610      	mov	r0, r2
 80015b8:	4619      	mov	r1, r3
 80015ba:	f009 fed5 	bl	800b368 <atan>
 80015be:	a306      	add	r3, pc, #24	; (adr r3, 80015d8 <updatePitchRoll+0xd8>)
 80015c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015c4:	f7fe ff88 	bl	80004d8 <__aeabi_dmul>
 80015c8:	4602      	mov	r2, r0
 80015ca:	460b      	mov	r3, r1
 80015cc:	4908      	ldr	r1, [pc, #32]	; (80015f0 <updatePitchRoll+0xf0>)
 80015ce:	e9c1 2300 	strd	r2, r3, [r1]

    #else // Eq. 28 and 29
    roll = atan(accY / sqrt(accX * accX + accZ * accZ)) * RAD_TO_DEG;
    pitch = atan2(-accX, accZ) * RAD_TO_DEG;
    #endif
}
 80015d2:	bf00      	nop
 80015d4:	bdb0      	pop	{r4, r5, r7, pc}
 80015d6:	bf00      	nop
 80015d8:	1a63c1f8 	.word	0x1a63c1f8
 80015dc:	404ca5dc 	.word	0x404ca5dc
 80015e0:	2000053c 	.word	0x2000053c
 80015e4:	20000538 	.word	0x20000538
 80015e8:	20000540 	.word	0x20000540
 80015ec:	20000550 	.word	0x20000550
 80015f0:	20000558 	.word	0x20000558

080015f4 <Stepper_set_rpm>:
//=====================================================================================================================
//Step motor
void Stepper_set_rpm(int rpm)
{
 80015f4:	b580      	push	{r7, lr}
 80015f6:	b082      	sub	sp, #8
 80015f8:	af00      	add	r7, sp, #0
 80015fa:	6078      	str	r0, [r7, #4]
	delay(60000000/StepPerRev/rpm);
 80015fc:	f643 1238 	movw	r2, #14648	; 0x3938
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	fb92 f3f3 	sdiv	r3, r2, r3
 8001606:	b29b      	uxth	r3, r3
 8001608:	4618      	mov	r0, r3
 800160a:	f000 f983 	bl	8001914 <delay>
}
 800160e:	bf00      	nop
 8001610:	3708      	adds	r7, #8
 8001612:	46bd      	mov	sp, r7
 8001614:	bd80      	pop	{r7, pc}
	...

08001618 <stepper_half_drive>:

void stepper_half_drive(int step, GPIO_TypeDef  *GPIOx, uint16_t num1, uint16_t num2, uint16_t num3, uint16_t num4)
{
 8001618:	b580      	push	{r7, lr}
 800161a:	b084      	sub	sp, #16
 800161c:	af00      	add	r7, sp, #0
 800161e:	60f8      	str	r0, [r7, #12]
 8001620:	60b9      	str	r1, [r7, #8]
 8001622:	4611      	mov	r1, r2
 8001624:	461a      	mov	r2, r3
 8001626:	460b      	mov	r3, r1
 8001628:	80fb      	strh	r3, [r7, #6]
 800162a:	4613      	mov	r3, r2
 800162c:	80bb      	strh	r3, [r7, #4]
	switch(step){
 800162e:	68fb      	ldr	r3, [r7, #12]
 8001630:	2b07      	cmp	r3, #7
 8001632:	f200 80db 	bhi.w	80017ec <stepper_half_drive+0x1d4>
 8001636:	a201      	add	r2, pc, #4	; (adr r2, 800163c <stepper_half_drive+0x24>)
 8001638:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800163c:	0800165d 	.word	0x0800165d
 8001640:	0800168f 	.word	0x0800168f
 8001644:	080016c1 	.word	0x080016c1
 8001648:	080016f3 	.word	0x080016f3
 800164c:	08001725 	.word	0x08001725
 8001650:	08001757 	.word	0x08001757
 8001654:	08001789 	.word	0x08001789
 8001658:	080017bb 	.word	0x080017bb
	case 0:
		HAL_GPIO_WritePin(GPIOx, num1, GPIO_PIN_SET);      //IN1
 800165c:	88fb      	ldrh	r3, [r7, #6]
 800165e:	2201      	movs	r2, #1
 8001660:	4619      	mov	r1, r3
 8001662:	68b8      	ldr	r0, [r7, #8]
 8001664:	f002 fd86 	bl	8004174 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOx, num2, GPIO_PIN_RESET);    //IN2
 8001668:	88bb      	ldrh	r3, [r7, #4]
 800166a:	2200      	movs	r2, #0
 800166c:	4619      	mov	r1, r3
 800166e:	68b8      	ldr	r0, [r7, #8]
 8001670:	f002 fd80 	bl	8004174 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOx, num3, GPIO_PIN_RESET);    //IN3
 8001674:	8b3b      	ldrh	r3, [r7, #24]
 8001676:	2200      	movs	r2, #0
 8001678:	4619      	mov	r1, r3
 800167a:	68b8      	ldr	r0, [r7, #8]
 800167c:	f002 fd7a 	bl	8004174 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOx, num4, GPIO_PIN_RESET);    //IN4
 8001680:	8bbb      	ldrh	r3, [r7, #28]
 8001682:	2200      	movs	r2, #0
 8001684:	4619      	mov	r1, r3
 8001686:	68b8      	ldr	r0, [r7, #8]
 8001688:	f002 fd74 	bl	8004174 <HAL_GPIO_WritePin>
		break;
 800168c:	e0ae      	b.n	80017ec <stepper_half_drive+0x1d4>
	case 1:
		HAL_GPIO_WritePin(GPIOx, num1, GPIO_PIN_SET);      //IN1
 800168e:	88fb      	ldrh	r3, [r7, #6]
 8001690:	2201      	movs	r2, #1
 8001692:	4619      	mov	r1, r3
 8001694:	68b8      	ldr	r0, [r7, #8]
 8001696:	f002 fd6d 	bl	8004174 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOx, num2, GPIO_PIN_SET);      //IN2
 800169a:	88bb      	ldrh	r3, [r7, #4]
 800169c:	2201      	movs	r2, #1
 800169e:	4619      	mov	r1, r3
 80016a0:	68b8      	ldr	r0, [r7, #8]
 80016a2:	f002 fd67 	bl	8004174 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOx, num3, GPIO_PIN_RESET);    //IN3
 80016a6:	8b3b      	ldrh	r3, [r7, #24]
 80016a8:	2200      	movs	r2, #0
 80016aa:	4619      	mov	r1, r3
 80016ac:	68b8      	ldr	r0, [r7, #8]
 80016ae:	f002 fd61 	bl	8004174 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOx, num4, GPIO_PIN_RESET);    //IN4
 80016b2:	8bbb      	ldrh	r3, [r7, #28]
 80016b4:	2200      	movs	r2, #0
 80016b6:	4619      	mov	r1, r3
 80016b8:	68b8      	ldr	r0, [r7, #8]
 80016ba:	f002 fd5b 	bl	8004174 <HAL_GPIO_WritePin>
		break;
 80016be:	e095      	b.n	80017ec <stepper_half_drive+0x1d4>
	case 2:
		HAL_GPIO_WritePin(GPIOx, num1, GPIO_PIN_RESET);    //IN1
 80016c0:	88fb      	ldrh	r3, [r7, #6]
 80016c2:	2200      	movs	r2, #0
 80016c4:	4619      	mov	r1, r3
 80016c6:	68b8      	ldr	r0, [r7, #8]
 80016c8:	f002 fd54 	bl	8004174 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOx, num2, GPIO_PIN_SET);      //IN2
 80016cc:	88bb      	ldrh	r3, [r7, #4]
 80016ce:	2201      	movs	r2, #1
 80016d0:	4619      	mov	r1, r3
 80016d2:	68b8      	ldr	r0, [r7, #8]
 80016d4:	f002 fd4e 	bl	8004174 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOx, num3, GPIO_PIN_RESET);    //IN3
 80016d8:	8b3b      	ldrh	r3, [r7, #24]
 80016da:	2200      	movs	r2, #0
 80016dc:	4619      	mov	r1, r3
 80016de:	68b8      	ldr	r0, [r7, #8]
 80016e0:	f002 fd48 	bl	8004174 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOx, num4, GPIO_PIN_RESET);    //IN4
 80016e4:	8bbb      	ldrh	r3, [r7, #28]
 80016e6:	2200      	movs	r2, #0
 80016e8:	4619      	mov	r1, r3
 80016ea:	68b8      	ldr	r0, [r7, #8]
 80016ec:	f002 fd42 	bl	8004174 <HAL_GPIO_WritePin>
		break;
 80016f0:	e07c      	b.n	80017ec <stepper_half_drive+0x1d4>
	case 3:
		HAL_GPIO_WritePin(GPIOx, num1, GPIO_PIN_RESET);    //IN1
 80016f2:	88fb      	ldrh	r3, [r7, #6]
 80016f4:	2200      	movs	r2, #0
 80016f6:	4619      	mov	r1, r3
 80016f8:	68b8      	ldr	r0, [r7, #8]
 80016fa:	f002 fd3b 	bl	8004174 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOx, num2, GPIO_PIN_SET);      //IN2
 80016fe:	88bb      	ldrh	r3, [r7, #4]
 8001700:	2201      	movs	r2, #1
 8001702:	4619      	mov	r1, r3
 8001704:	68b8      	ldr	r0, [r7, #8]
 8001706:	f002 fd35 	bl	8004174 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOx, num3, GPIO_PIN_SET);      //IN3
 800170a:	8b3b      	ldrh	r3, [r7, #24]
 800170c:	2201      	movs	r2, #1
 800170e:	4619      	mov	r1, r3
 8001710:	68b8      	ldr	r0, [r7, #8]
 8001712:	f002 fd2f 	bl	8004174 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOx, num4, GPIO_PIN_RESET);    //IN4
 8001716:	8bbb      	ldrh	r3, [r7, #28]
 8001718:	2200      	movs	r2, #0
 800171a:	4619      	mov	r1, r3
 800171c:	68b8      	ldr	r0, [r7, #8]
 800171e:	f002 fd29 	bl	8004174 <HAL_GPIO_WritePin>
		break;
 8001722:	e063      	b.n	80017ec <stepper_half_drive+0x1d4>
	case 4:
		HAL_GPIO_WritePin(GPIOx, num1, GPIO_PIN_RESET);    //IN1
 8001724:	88fb      	ldrh	r3, [r7, #6]
 8001726:	2200      	movs	r2, #0
 8001728:	4619      	mov	r1, r3
 800172a:	68b8      	ldr	r0, [r7, #8]
 800172c:	f002 fd22 	bl	8004174 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOx, num2, GPIO_PIN_RESET);    //IN2
 8001730:	88bb      	ldrh	r3, [r7, #4]
 8001732:	2200      	movs	r2, #0
 8001734:	4619      	mov	r1, r3
 8001736:	68b8      	ldr	r0, [r7, #8]
 8001738:	f002 fd1c 	bl	8004174 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOx, num3, GPIO_PIN_SET);      //IN3
 800173c:	8b3b      	ldrh	r3, [r7, #24]
 800173e:	2201      	movs	r2, #1
 8001740:	4619      	mov	r1, r3
 8001742:	68b8      	ldr	r0, [r7, #8]
 8001744:	f002 fd16 	bl	8004174 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOx, num4, GPIO_PIN_RESET);    //IN4
 8001748:	8bbb      	ldrh	r3, [r7, #28]
 800174a:	2200      	movs	r2, #0
 800174c:	4619      	mov	r1, r3
 800174e:	68b8      	ldr	r0, [r7, #8]
 8001750:	f002 fd10 	bl	8004174 <HAL_GPIO_WritePin>
		break;
 8001754:	e04a      	b.n	80017ec <stepper_half_drive+0x1d4>
	case 5:
		HAL_GPIO_WritePin(GPIOx, num1, GPIO_PIN_RESET);    //IN1
 8001756:	88fb      	ldrh	r3, [r7, #6]
 8001758:	2200      	movs	r2, #0
 800175a:	4619      	mov	r1, r3
 800175c:	68b8      	ldr	r0, [r7, #8]
 800175e:	f002 fd09 	bl	8004174 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOx, num2, GPIO_PIN_RESET);    //IN2
 8001762:	88bb      	ldrh	r3, [r7, #4]
 8001764:	2200      	movs	r2, #0
 8001766:	4619      	mov	r1, r3
 8001768:	68b8      	ldr	r0, [r7, #8]
 800176a:	f002 fd03 	bl	8004174 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOx, num3, GPIO_PIN_SET);      //IN3
 800176e:	8b3b      	ldrh	r3, [r7, #24]
 8001770:	2201      	movs	r2, #1
 8001772:	4619      	mov	r1, r3
 8001774:	68b8      	ldr	r0, [r7, #8]
 8001776:	f002 fcfd 	bl	8004174 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOx, num4, GPIO_PIN_SET);      //IN4
 800177a:	8bbb      	ldrh	r3, [r7, #28]
 800177c:	2201      	movs	r2, #1
 800177e:	4619      	mov	r1, r3
 8001780:	68b8      	ldr	r0, [r7, #8]
 8001782:	f002 fcf7 	bl	8004174 <HAL_GPIO_WritePin>
		break;
 8001786:	e031      	b.n	80017ec <stepper_half_drive+0x1d4>
	case 6:
		HAL_GPIO_WritePin(GPIOx, num1, GPIO_PIN_RESET);    //IN1
 8001788:	88fb      	ldrh	r3, [r7, #6]
 800178a:	2200      	movs	r2, #0
 800178c:	4619      	mov	r1, r3
 800178e:	68b8      	ldr	r0, [r7, #8]
 8001790:	f002 fcf0 	bl	8004174 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOx, num2, GPIO_PIN_RESET);    //IN2
 8001794:	88bb      	ldrh	r3, [r7, #4]
 8001796:	2200      	movs	r2, #0
 8001798:	4619      	mov	r1, r3
 800179a:	68b8      	ldr	r0, [r7, #8]
 800179c:	f002 fcea 	bl	8004174 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOx, num3, GPIO_PIN_RESET);    //IN3
 80017a0:	8b3b      	ldrh	r3, [r7, #24]
 80017a2:	2200      	movs	r2, #0
 80017a4:	4619      	mov	r1, r3
 80017a6:	68b8      	ldr	r0, [r7, #8]
 80017a8:	f002 fce4 	bl	8004174 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOx, num4, GPIO_PIN_SET);      //IN4
 80017ac:	8bbb      	ldrh	r3, [r7, #28]
 80017ae:	2201      	movs	r2, #1
 80017b0:	4619      	mov	r1, r3
 80017b2:	68b8      	ldr	r0, [r7, #8]
 80017b4:	f002 fcde 	bl	8004174 <HAL_GPIO_WritePin>
		break;
 80017b8:	e018      	b.n	80017ec <stepper_half_drive+0x1d4>
	case 7:
		HAL_GPIO_WritePin(GPIOx, num1, GPIO_PIN_SET);      //IN1
 80017ba:	88fb      	ldrh	r3, [r7, #6]
 80017bc:	2201      	movs	r2, #1
 80017be:	4619      	mov	r1, r3
 80017c0:	68b8      	ldr	r0, [r7, #8]
 80017c2:	f002 fcd7 	bl	8004174 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOx, num2, GPIO_PIN_RESET);    //IN2
 80017c6:	88bb      	ldrh	r3, [r7, #4]
 80017c8:	2200      	movs	r2, #0
 80017ca:	4619      	mov	r1, r3
 80017cc:	68b8      	ldr	r0, [r7, #8]
 80017ce:	f002 fcd1 	bl	8004174 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOx, num3, GPIO_PIN_RESET);    //IN3
 80017d2:	8b3b      	ldrh	r3, [r7, #24]
 80017d4:	2200      	movs	r2, #0
 80017d6:	4619      	mov	r1, r3
 80017d8:	68b8      	ldr	r0, [r7, #8]
 80017da:	f002 fccb 	bl	8004174 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOx, num4, GPIO_PIN_SET);      //IN4
 80017de:	8bbb      	ldrh	r3, [r7, #28]
 80017e0:	2201      	movs	r2, #1
 80017e2:	4619      	mov	r1, r3
 80017e4:	68b8      	ldr	r0, [r7, #8]
 80017e6:	f002 fcc5 	bl	8004174 <HAL_GPIO_WritePin>
		break;
 80017ea:	bf00      	nop

	}
}
 80017ec:	bf00      	nop
 80017ee:	3710      	adds	r7, #16
 80017f0:	46bd      	mov	sp, r7
 80017f2:	bd80      	pop	{r7, pc}

080017f4 <stepper_step_angle>:

void stepper_step_angle (double angle, int direction,int rpm, GPIO_TypeDef  *GPIOx, uint16_t num1, uint16_t num2, uint16_t num3, uint16_t num4)
{
 80017f4:	b580      	push	{r7, lr}
 80017f6:	b08c      	sub	sp, #48	; 0x30
 80017f8:	af02      	add	r7, sp, #8
 80017fa:	e9c7 0102 	strd	r0, r1, [r7, #8]
 80017fe:	607a      	str	r2, [r7, #4]
 8001800:	603b      	str	r3, [r7, #0]
	float anglepersequence = 0.703125;
 8001802:	4b2c      	ldr	r3, [pc, #176]	; (80018b4 <stepper_step_angle+0xc0>)
 8001804:	61bb      	str	r3, [r7, #24]
	int numberofsequences = (int) (angle/anglepersequence);
 8001806:	69b8      	ldr	r0, [r7, #24]
 8001808:	f7fe fe0e 	bl	8000428 <__aeabi_f2d>
 800180c:	4602      	mov	r2, r0
 800180e:	460b      	mov	r3, r1
 8001810:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001814:	f7fe ff8a 	bl	800072c <__aeabi_ddiv>
 8001818:	4602      	mov	r2, r0
 800181a:	460b      	mov	r3, r1
 800181c:	4610      	mov	r0, r2
 800181e:	4619      	mov	r1, r3
 8001820:	f7ff f90a 	bl	8000a38 <__aeabi_d2iz>
 8001824:	4603      	mov	r3, r0
 8001826:	617b      	str	r3, [r7, #20]

	for(int seq = 0;seq<numberofsequences;seq++)
 8001828:	2300      	movs	r3, #0
 800182a:	627b      	str	r3, [r7, #36]	; 0x24
 800182c:	e039      	b.n	80018a2 <stepper_step_angle+0xae>
	{
		if(direction == 0)
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	2b00      	cmp	r3, #0
 8001832:	d118      	bne.n	8001866 <stepper_step_angle+0x72>
		{
			for(int step = 7;step>=0;step--)
 8001834:	2307      	movs	r3, #7
 8001836:	623b      	str	r3, [r7, #32]
 8001838:	e011      	b.n	800185e <stepper_step_angle+0x6a>
			{
				stepper_half_drive(step,GPIOx, num1, num2, num3, num4);
 800183a:	8f39      	ldrh	r1, [r7, #56]	; 0x38
 800183c:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 800183e:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8001842:	9301      	str	r3, [sp, #4]
 8001844:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8001846:	9300      	str	r3, [sp, #0]
 8001848:	460b      	mov	r3, r1
 800184a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800184c:	6a38      	ldr	r0, [r7, #32]
 800184e:	f7ff fee3 	bl	8001618 <stepper_half_drive>
				Stepper_set_rpm(rpm);
 8001852:	6838      	ldr	r0, [r7, #0]
 8001854:	f7ff fece 	bl	80015f4 <Stepper_set_rpm>
			for(int step = 7;step>=0;step--)
 8001858:	6a3b      	ldr	r3, [r7, #32]
 800185a:	3b01      	subs	r3, #1
 800185c:	623b      	str	r3, [r7, #32]
 800185e:	6a3b      	ldr	r3, [r7, #32]
 8001860:	2b00      	cmp	r3, #0
 8001862:	daea      	bge.n	800183a <stepper_step_angle+0x46>
 8001864:	e01a      	b.n	800189c <stepper_step_angle+0xa8>
			}
		}
		else if(direction == 1)
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	2b01      	cmp	r3, #1
 800186a:	d117      	bne.n	800189c <stepper_step_angle+0xa8>
		{
			for(int step = 0;step<8;step++)
 800186c:	2300      	movs	r3, #0
 800186e:	61fb      	str	r3, [r7, #28]
 8001870:	e011      	b.n	8001896 <stepper_step_angle+0xa2>
			{
				stepper_half_drive(step,GPIOx, num1, num2, num3, num4);
 8001872:	8f39      	ldrh	r1, [r7, #56]	; 0x38
 8001874:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8001876:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800187a:	9301      	str	r3, [sp, #4]
 800187c:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800187e:	9300      	str	r3, [sp, #0]
 8001880:	460b      	mov	r3, r1
 8001882:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8001884:	69f8      	ldr	r0, [r7, #28]
 8001886:	f7ff fec7 	bl	8001618 <stepper_half_drive>
				Stepper_set_rpm(rpm);
 800188a:	6838      	ldr	r0, [r7, #0]
 800188c:	f7ff feb2 	bl	80015f4 <Stepper_set_rpm>
			for(int step = 0;step<8;step++)
 8001890:	69fb      	ldr	r3, [r7, #28]
 8001892:	3301      	adds	r3, #1
 8001894:	61fb      	str	r3, [r7, #28]
 8001896:	69fb      	ldr	r3, [r7, #28]
 8001898:	2b07      	cmp	r3, #7
 800189a:	ddea      	ble.n	8001872 <stepper_step_angle+0x7e>
	for(int seq = 0;seq<numberofsequences;seq++)
 800189c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800189e:	3301      	adds	r3, #1
 80018a0:	627b      	str	r3, [r7, #36]	; 0x24
 80018a2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80018a4:	697b      	ldr	r3, [r7, #20]
 80018a6:	429a      	cmp	r2, r3
 80018a8:	dbc1      	blt.n	800182e <stepper_step_angle+0x3a>
			}
		}
	}
}
 80018aa:	bf00      	nop
 80018ac:	bf00      	nop
 80018ae:	3728      	adds	r7, #40	; 0x28
 80018b0:	46bd      	mov	sp, r7
 80018b2:	bd80      	pop	{r7, pc}
 80018b4:	3f340000 	.word	0x3f340000

080018b8 <read_us>:

//=====================================================================================================================
// Time
int read_us()
{
 80018b8:	b480      	push	{r7}
 80018ba:	b083      	sub	sp, #12
 80018bc:	af00      	add	r7, sp, #0
	int cur_time = (time_count*10000) + __HAL_TIM_GET_COUNTER(&htim3);
 80018be:	4b0a      	ldr	r3, [pc, #40]	; (80018e8 <read_us+0x30>)
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	f242 7210 	movw	r2, #10000	; 0x2710
 80018c6:	fb03 f202 	mul.w	r2, r3, r2
 80018ca:	4b08      	ldr	r3, [pc, #32]	; (80018ec <read_us+0x34>)
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018d0:	4413      	add	r3, r2
 80018d2:	607b      	str	r3, [r7, #4]
	__HAL_TIM_SET_COUNTER(&htim3,0);
 80018d4:	4b05      	ldr	r3, [pc, #20]	; (80018ec <read_us+0x34>)
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	2200      	movs	r2, #0
 80018da:	625a      	str	r2, [r3, #36]	; 0x24

	return cur_time;
 80018dc:	687b      	ldr	r3, [r7, #4]
}
 80018de:	4618      	mov	r0, r3
 80018e0:	370c      	adds	r7, #12
 80018e2:	46bd      	mov	sp, r7
 80018e4:	bc80      	pop	{r7}
 80018e6:	4770      	bx	lr
 80018e8:	200005ac 	.word	0x200005ac
 80018ec:	2000035c 	.word	0x2000035c

080018f0 <init_time>:
void init_time( ) {
 80018f0:	b580      	push	{r7, lr}
 80018f2:	af00      	add	r7, sp, #0

	HAL_TIM_Base_Start_IT(&htim3);
 80018f4:	4805      	ldr	r0, [pc, #20]	; (800190c <init_time+0x1c>)
 80018f6:	f004 fb57 	bl	8005fa8 <HAL_TIM_Base_Start_IT>
    t_prev = read_us();
 80018fa:	f7ff ffdd 	bl	80018b8 <read_us>
 80018fe:	4603      	mov	r3, r0
 8001900:	461a      	mov	r2, r3
 8001902:	4b03      	ldr	r3, [pc, #12]	; (8001910 <init_time+0x20>)
 8001904:	601a      	str	r2, [r3, #0]
}
 8001906:	bf00      	nop
 8001908:	bd80      	pop	{r7, pc}
 800190a:	bf00      	nop
 800190c:	2000035c 	.word	0x2000035c
 8001910:	200005a8 	.word	0x200005a8

08001914 <delay>:
	t_period = (t_now - t_prev)/1000000.0;
	t_prev = t_now;
	t_dt = t_period;
}
void delay(uint16_t us)						// Stepmotor RPM calc
{
 8001914:	b480      	push	{r7}
 8001916:	b083      	sub	sp, #12
 8001918:	af00      	add	r7, sp, #0
 800191a:	4603      	mov	r3, r0
 800191c:	80fb      	strh	r3, [r7, #6]
	__HAL_TIM_SET_COUNTER(&htim1, 0);
 800191e:	4b08      	ldr	r3, [pc, #32]	; (8001940 <delay+0x2c>)
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	2200      	movs	r2, #0
 8001924:	625a      	str	r2, [r3, #36]	; 0x24
	while(__HAL_TIM_GET_COUNTER(&htim1)<us);
 8001926:	bf00      	nop
 8001928:	4b05      	ldr	r3, [pc, #20]	; (8001940 <delay+0x2c>)
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800192e:	88fb      	ldrh	r3, [r7, #6]
 8001930:	429a      	cmp	r2, r3
 8001932:	d3f9      	bcc.n	8001928 <delay+0x14>
}
 8001934:	bf00      	nop
 8001936:	bf00      	nop
 8001938:	370c      	adds	r7, #12
 800193a:	46bd      	mov	sp, r7
 800193c:	bc80      	pop	{r7}
 800193e:	4770      	bx	lr
 8001940:	200002cc 	.word	0x200002cc

08001944 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001944:	b580      	push	{r7, lr}
 8001946:	b086      	sub	sp, #24
 8001948:	af06      	add	r7, sp, #24
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800194a:	f001 fa6d 	bl	8002e28 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800194e:	f000 fab5 	bl	8001ebc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001952:	f000 fcbb 	bl	80022cc <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8001956:	f000 fc71 	bl	800223c <MX_USART2_UART_Init>
  MX_DMA_Init();
 800195a:	f000 fc99 	bl	8002290 <MX_DMA_Init>
  MX_ADC1_Init();
 800195e:	f000 fb05 	bl	8001f6c <MX_ADC1_Init>
  MX_I2C1_Init();
 8001962:	f000 fb51 	bl	8002008 <MX_I2C1_Init>
  MX_TIM3_Init();
 8001966:	f000 fc1b 	bl	80021a0 <MX_TIM3_Init>
  MX_TIM1_Init();
 800196a:	f000 fb7b 	bl	8002064 <MX_TIM1_Init>
  MX_TIM2_Init();
 800196e:	f000 fbc9 	bl	8002104 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_ADC_Start_DMA(&hadc1, value, 2);
 8001972:	2202      	movs	r2, #2
 8001974:	49b1      	ldr	r1, [pc, #708]	; (8001c3c <main+0x2f8>)
 8001976:	48b2      	ldr	r0, [pc, #712]	; (8001c40 <main+0x2fc>)
 8001978:	f001 fbb4 	bl	80030e4 <HAL_ADC_Start_DMA>
  HAL_TIM_Base_Start(&htim1);
 800197c:	48b1      	ldr	r0, [pc, #708]	; (8001c44 <main+0x300>)
 800197e:	f004 fac9 	bl	8005f14 <HAL_TIM_Base_Start>
  HAL_TIM_Base_Start(&htim2);
 8001982:	48b1      	ldr	r0, [pc, #708]	; (8001c48 <main+0x304>)
 8001984:	f004 fac6 	bl	8005f14 <HAL_TIM_Base_Start>
  MPU6050_Init();
 8001988:	f7ff fbe2 	bl	8001150 <MPU6050_Init>
  lcd_init();
 800198c:	f7ff f9ba 	bl	8000d04 <lcd_init>
  InitAll();
 8001990:	f7ff fcf4 	bl	800137c <InitAll>
  init_time();
 8001994:	f7ff ffac 	bl	80018f0 <init_time>
  Init(&kalmanX);
 8001998:	48ac      	ldr	r0, [pc, #688]	; (8001c4c <main+0x308>)
 800199a:	f7ff fa05 	bl	8000da8 <Init>
  Init(&kalmanY);
 800199e:	48ac      	ldr	r0, [pc, #688]	; (8001c50 <main+0x30c>)
 80019a0:	f7ff fa02 	bl	8000da8 <Init>
  Init(&kalmanZ);
 80019a4:	48ab      	ldr	r0, [pc, #684]	; (8001c54 <main+0x310>)
 80019a6:	f7ff f9ff 	bl	8000da8 <Init>
  HAL_Delay(1000);
 80019aa:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80019ae:	f001 fa9d 	bl	8002eec <HAL_Delay>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	  func();
 80019b2:	f000 fd45 	bl	8002440 <func>
	  printf("kalAngleX : %.2lf    kalAngleY : %.2lf\n", kalAngleX,roll);
 80019b6:	4ba8      	ldr	r3, [pc, #672]	; (8001c58 <main+0x314>)
 80019b8:	e9d3 0100 	ldrd	r0, r1, [r3]
 80019bc:	4ba7      	ldr	r3, [pc, #668]	; (8001c5c <main+0x318>)
 80019be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80019c2:	e9cd 2300 	strd	r2, r3, [sp]
 80019c6:	4602      	mov	r2, r0
 80019c8:	460b      	mov	r3, r1
 80019ca:	48a5      	ldr	r0, [pc, #660]	; (8001c60 <main+0x31c>)
 80019cc:	f005 feee 	bl	80077ac <iprintf>
//==================================================================================================================
// gyro mode - step control
	  if( state == 1)
 80019d0:	4ba4      	ldr	r3, [pc, #656]	; (8001c64 <main+0x320>)
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	2b01      	cmp	r3, #1
 80019d6:	f040 80d0 	bne.w	8001b7a <main+0x236>
	  {
		  //Gyro step motor control
		  pre_pitch_angle = cur_pitch_angle;
 80019da:	4ba3      	ldr	r3, [pc, #652]	; (8001c68 <main+0x324>)
 80019dc:	f993 2000 	ldrsb.w	r2, [r3]
 80019e0:	4ba2      	ldr	r3, [pc, #648]	; (8001c6c <main+0x328>)
 80019e2:	701a      	strb	r2, [r3, #0]
		  pre_roll_angle = cur_roll_angle;
 80019e4:	4ba2      	ldr	r3, [pc, #648]	; (8001c70 <main+0x32c>)
 80019e6:	f993 2000 	ldrsb.w	r2, [r3]
 80019ea:	4ba2      	ldr	r3, [pc, #648]	; (8001c74 <main+0x330>)
 80019ec:	701a      	strb	r2, [r3, #0]
		  cur_pitch_angle = kalAngleX;
 80019ee:	4b9a      	ldr	r3, [pc, #616]	; (8001c58 <main+0x314>)
 80019f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80019f4:	4610      	mov	r0, r2
 80019f6:	4619      	mov	r1, r3
 80019f8:	f7ff f81e 	bl	8000a38 <__aeabi_d2iz>
 80019fc:	4603      	mov	r3, r0
 80019fe:	b25a      	sxtb	r2, r3
 8001a00:	4b99      	ldr	r3, [pc, #612]	; (8001c68 <main+0x324>)
 8001a02:	701a      	strb	r2, [r3, #0]
		  cur_roll_angle = kalAngleY;
 8001a04:	4b9c      	ldr	r3, [pc, #624]	; (8001c78 <main+0x334>)
 8001a06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a0a:	4610      	mov	r0, r2
 8001a0c:	4619      	mov	r1, r3
 8001a0e:	f7ff f813 	bl	8000a38 <__aeabi_d2iz>
 8001a12:	4603      	mov	r3, r0
 8001a14:	b25a      	sxtb	r2, r3
 8001a16:	4b96      	ldr	r3, [pc, #600]	; (8001c70 <main+0x32c>)
 8001a18:	701a      	strb	r2, [r3, #0]
		  if(cur_pitch_angle > pre_pitch_angle || cur_roll_angle > pre_roll_angle)
 8001a1a:	4b93      	ldr	r3, [pc, #588]	; (8001c68 <main+0x324>)
 8001a1c:	f993 2000 	ldrsb.w	r2, [r3]
 8001a20:	4b92      	ldr	r3, [pc, #584]	; (8001c6c <main+0x328>)
 8001a22:	f993 3000 	ldrsb.w	r3, [r3]
 8001a26:	429a      	cmp	r2, r3
 8001a28:	dc07      	bgt.n	8001a3a <main+0xf6>
 8001a2a:	4b91      	ldr	r3, [pc, #580]	; (8001c70 <main+0x32c>)
 8001a2c:	f993 2000 	ldrsb.w	r2, [r3]
 8001a30:	4b90      	ldr	r3, [pc, #576]	; (8001c74 <main+0x330>)
 8001a32:	f993 3000 	ldrsb.w	r3, [r3]
 8001a36:	429a      	cmp	r2, r3
 8001a38:	dd34      	ble.n	8001aa4 <main+0x160>
		  {
			stepper_step_angle(cur_pitch_angle - pre_pitch_angle , 1,13, GPIOC, GPIO_PIN_0, GPIO_PIN_1, GPIO_PIN_2, GPIO_PIN_3);
 8001a3a:	4b8b      	ldr	r3, [pc, #556]	; (8001c68 <main+0x324>)
 8001a3c:	f993 3000 	ldrsb.w	r3, [r3]
 8001a40:	461a      	mov	r2, r3
 8001a42:	4b8a      	ldr	r3, [pc, #552]	; (8001c6c <main+0x328>)
 8001a44:	f993 3000 	ldrsb.w	r3, [r3]
 8001a48:	1ad3      	subs	r3, r2, r3
 8001a4a:	4618      	mov	r0, r3
 8001a4c:	f7fe fcda 	bl	8000404 <__aeabi_i2d>
 8001a50:	2308      	movs	r3, #8
 8001a52:	9304      	str	r3, [sp, #16]
 8001a54:	2304      	movs	r3, #4
 8001a56:	9303      	str	r3, [sp, #12]
 8001a58:	2302      	movs	r3, #2
 8001a5a:	9302      	str	r3, [sp, #8]
 8001a5c:	2301      	movs	r3, #1
 8001a5e:	9301      	str	r3, [sp, #4]
 8001a60:	4b86      	ldr	r3, [pc, #536]	; (8001c7c <main+0x338>)
 8001a62:	9300      	str	r3, [sp, #0]
 8001a64:	230d      	movs	r3, #13
 8001a66:	2201      	movs	r2, #1
 8001a68:	f7ff fec4 	bl	80017f4 <stepper_step_angle>
			stepper_step_angle(cur_roll_angle - pre_roll_angle , 1,13, GPIOB, GPIO_PIN_13, GPIO_PIN_14, GPIO_PIN_15,GPIO_PIN_1);
 8001a6c:	4b80      	ldr	r3, [pc, #512]	; (8001c70 <main+0x32c>)
 8001a6e:	f993 3000 	ldrsb.w	r3, [r3]
 8001a72:	461a      	mov	r2, r3
 8001a74:	4b7f      	ldr	r3, [pc, #508]	; (8001c74 <main+0x330>)
 8001a76:	f993 3000 	ldrsb.w	r3, [r3]
 8001a7a:	1ad3      	subs	r3, r2, r3
 8001a7c:	4618      	mov	r0, r3
 8001a7e:	f7fe fcc1 	bl	8000404 <__aeabi_i2d>
 8001a82:	2302      	movs	r3, #2
 8001a84:	9304      	str	r3, [sp, #16]
 8001a86:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001a8a:	9303      	str	r3, [sp, #12]
 8001a8c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001a90:	9302      	str	r3, [sp, #8]
 8001a92:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001a96:	9301      	str	r3, [sp, #4]
 8001a98:	4b79      	ldr	r3, [pc, #484]	; (8001c80 <main+0x33c>)
 8001a9a:	9300      	str	r3, [sp, #0]
 8001a9c:	230d      	movs	r3, #13
 8001a9e:	2201      	movs	r2, #1
 8001aa0:	f7ff fea8 	bl	80017f4 <stepper_step_angle>

		  }
		  if(cur_pitch_angle < pre_pitch_angle || cur_roll_angle < pre_roll_angle)
 8001aa4:	4b70      	ldr	r3, [pc, #448]	; (8001c68 <main+0x324>)
 8001aa6:	f993 2000 	ldrsb.w	r2, [r3]
 8001aaa:	4b70      	ldr	r3, [pc, #448]	; (8001c6c <main+0x328>)
 8001aac:	f993 3000 	ldrsb.w	r3, [r3]
 8001ab0:	429a      	cmp	r2, r3
 8001ab2:	db07      	blt.n	8001ac4 <main+0x180>
 8001ab4:	4b6e      	ldr	r3, [pc, #440]	; (8001c70 <main+0x32c>)
 8001ab6:	f993 2000 	ldrsb.w	r2, [r3]
 8001aba:	4b6e      	ldr	r3, [pc, #440]	; (8001c74 <main+0x330>)
 8001abc:	f993 3000 	ldrsb.w	r3, [r3]
 8001ac0:	429a      	cmp	r2, r3
 8001ac2:	da34      	bge.n	8001b2e <main+0x1ea>
		  {
			stepper_step_angle(pre_pitch_angle - cur_pitch_angle, 0, 13, GPIOC, GPIO_PIN_0, GPIO_PIN_1, GPIO_PIN_2, GPIO_PIN_3);
 8001ac4:	4b69      	ldr	r3, [pc, #420]	; (8001c6c <main+0x328>)
 8001ac6:	f993 3000 	ldrsb.w	r3, [r3]
 8001aca:	461a      	mov	r2, r3
 8001acc:	4b66      	ldr	r3, [pc, #408]	; (8001c68 <main+0x324>)
 8001ace:	f993 3000 	ldrsb.w	r3, [r3]
 8001ad2:	1ad3      	subs	r3, r2, r3
 8001ad4:	4618      	mov	r0, r3
 8001ad6:	f7fe fc95 	bl	8000404 <__aeabi_i2d>
 8001ada:	2308      	movs	r3, #8
 8001adc:	9304      	str	r3, [sp, #16]
 8001ade:	2304      	movs	r3, #4
 8001ae0:	9303      	str	r3, [sp, #12]
 8001ae2:	2302      	movs	r3, #2
 8001ae4:	9302      	str	r3, [sp, #8]
 8001ae6:	2301      	movs	r3, #1
 8001ae8:	9301      	str	r3, [sp, #4]
 8001aea:	4b64      	ldr	r3, [pc, #400]	; (8001c7c <main+0x338>)
 8001aec:	9300      	str	r3, [sp, #0]
 8001aee:	230d      	movs	r3, #13
 8001af0:	2200      	movs	r2, #0
 8001af2:	f7ff fe7f 	bl	80017f4 <stepper_step_angle>
			stepper_step_angle(pre_roll_angle - cur_roll_angle, 0,13, GPIOB, GPIO_PIN_13, GPIO_PIN_14, GPIO_PIN_15, GPIO_PIN_1);
 8001af6:	4b5f      	ldr	r3, [pc, #380]	; (8001c74 <main+0x330>)
 8001af8:	f993 3000 	ldrsb.w	r3, [r3]
 8001afc:	461a      	mov	r2, r3
 8001afe:	4b5c      	ldr	r3, [pc, #368]	; (8001c70 <main+0x32c>)
 8001b00:	f993 3000 	ldrsb.w	r3, [r3]
 8001b04:	1ad3      	subs	r3, r2, r3
 8001b06:	4618      	mov	r0, r3
 8001b08:	f7fe fc7c 	bl	8000404 <__aeabi_i2d>
 8001b0c:	2302      	movs	r3, #2
 8001b0e:	9304      	str	r3, [sp, #16]
 8001b10:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001b14:	9303      	str	r3, [sp, #12]
 8001b16:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001b1a:	9302      	str	r3, [sp, #8]
 8001b1c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001b20:	9301      	str	r3, [sp, #4]
 8001b22:	4b57      	ldr	r3, [pc, #348]	; (8001c80 <main+0x33c>)
 8001b24:	9300      	str	r3, [sp, #0]
 8001b26:	230d      	movs	r3, #13
 8001b28:	2200      	movs	r2, #0
 8001b2a:	f7ff fe63 	bl	80017f4 <stepper_step_angle>
		  }

//		  printf("kalAngleX : %.2lf    kalAngleY : %.2lf\n", kalAngleX,kalAngleY);
//=====================================================================================================================
// gyro mode - LCD
		  lcd_clear();
 8001b2e:	f7ff f8b3 	bl	8000c98 <lcd_clear>
		  lcd_put_cur(0, 0);
 8001b32:	2100      	movs	r1, #0
 8001b34:	2000      	movs	r0, #0
 8001b36:	f7ff f8c6 	bl	8000cc6 <lcd_put_cur>
		  lcd_send_string("Gyro mode");
 8001b3a:	4852      	ldr	r0, [pc, #328]	; (8001c84 <main+0x340>)
 8001b3c:	f7ff f91f 	bl	8000d7e <lcd_send_string>
		  lcd_put_cur(1, 0);
 8001b40:	2100      	movs	r1, #0
 8001b42:	2001      	movs	r0, #1
 8001b44:	f7ff f8bf 	bl	8000cc6 <lcd_put_cur>
		  sprintf(gyro_roll_value,"r=%.1lf", kalAngleX);
 8001b48:	4b43      	ldr	r3, [pc, #268]	; (8001c58 <main+0x314>)
 8001b4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b4e:	494e      	ldr	r1, [pc, #312]	; (8001c88 <main+0x344>)
 8001b50:	484e      	ldr	r0, [pc, #312]	; (8001c8c <main+0x348>)
 8001b52:	f005 fe47 	bl	80077e4 <siprintf>
		  lcd_send_string(gyro_roll_value);
 8001b56:	484d      	ldr	r0, [pc, #308]	; (8001c8c <main+0x348>)
 8001b58:	f7ff f911 	bl	8000d7e <lcd_send_string>
		  lcd_put_cur(1, 9);
 8001b5c:	2109      	movs	r1, #9
 8001b5e:	2001      	movs	r0, #1
 8001b60:	f7ff f8b1 	bl	8000cc6 <lcd_put_cur>
		  sprintf(gyro_pitch_value,"p=%.1lf", kalAngleY);
 8001b64:	4b44      	ldr	r3, [pc, #272]	; (8001c78 <main+0x334>)
 8001b66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b6a:	4949      	ldr	r1, [pc, #292]	; (8001c90 <main+0x34c>)
 8001b6c:	4849      	ldr	r0, [pc, #292]	; (8001c94 <main+0x350>)
 8001b6e:	f005 fe39 	bl	80077e4 <siprintf>
		  lcd_send_string(gyro_pitch_value);
 8001b72:	4848      	ldr	r0, [pc, #288]	; (8001c94 <main+0x350>)
 8001b74:	f7ff f903 	bl	8000d7e <lcd_send_string>
 8001b78:	e71b      	b.n	80019b2 <main+0x6e>
	  }
//=====================================================================================================================
// joystick mode - step control
	  else if(state == 0)
 8001b7a:	4b3a      	ldr	r3, [pc, #232]	; (8001c64 <main+0x320>)
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	2b00      	cmp	r3, #0
 8001b80:	f47f af17 	bne.w	80019b2 <main+0x6e>
	  {
		  //Joystic step motor control
		  while(value[1] == 4095)
 8001b84:	e036      	b.n	8001bf4 <main+0x2b0>
		  {
			  if(step_count_roll_L > 0)
 8001b86:	4b44      	ldr	r3, [pc, #272]	; (8001c98 <main+0x354>)
 8001b88:	781b      	ldrb	r3, [r3, #0]
 8001b8a:	2b00      	cmp	r3, #0
 8001b8c:	d017      	beq.n	8001bbe <main+0x27a>
			  {
				  stepper_step_angle(1, 1, 13, GPIOC, GPIO_PIN_0, GPIO_PIN_1, GPIO_PIN_2, GPIO_PIN_3);
 8001b8e:	2308      	movs	r3, #8
 8001b90:	9304      	str	r3, [sp, #16]
 8001b92:	2304      	movs	r3, #4
 8001b94:	9303      	str	r3, [sp, #12]
 8001b96:	2302      	movs	r3, #2
 8001b98:	9302      	str	r3, [sp, #8]
 8001b9a:	2301      	movs	r3, #1
 8001b9c:	9301      	str	r3, [sp, #4]
 8001b9e:	4b37      	ldr	r3, [pc, #220]	; (8001c7c <main+0x338>)
 8001ba0:	9300      	str	r3, [sp, #0]
 8001ba2:	230d      	movs	r3, #13
 8001ba4:	2201      	movs	r2, #1
 8001ba6:	f04f 0000 	mov.w	r0, #0
 8001baa:	493c      	ldr	r1, [pc, #240]	; (8001c9c <main+0x358>)
 8001bac:	f7ff fe22 	bl	80017f4 <stepper_step_angle>
				  step_count_roll_L--;
 8001bb0:	4b39      	ldr	r3, [pc, #228]	; (8001c98 <main+0x354>)
 8001bb2:	781b      	ldrb	r3, [r3, #0]
 8001bb4:	3b01      	subs	r3, #1
 8001bb6:	b2da      	uxtb	r2, r3
 8001bb8:	4b37      	ldr	r3, [pc, #220]	; (8001c98 <main+0x354>)
 8001bba:	701a      	strb	r2, [r3, #0]
 8001bbc:	e01a      	b.n	8001bf4 <main+0x2b0>
			  }
			  else if (step_count_roll_H < 90 )
 8001bbe:	4b38      	ldr	r3, [pc, #224]	; (8001ca0 <main+0x35c>)
 8001bc0:	781b      	ldrb	r3, [r3, #0]
 8001bc2:	2b59      	cmp	r3, #89	; 0x59
 8001bc4:	d816      	bhi.n	8001bf4 <main+0x2b0>
			  {
				  step_count_roll_H++;
 8001bc6:	4b36      	ldr	r3, [pc, #216]	; (8001ca0 <main+0x35c>)
 8001bc8:	781b      	ldrb	r3, [r3, #0]
 8001bca:	3301      	adds	r3, #1
 8001bcc:	b2da      	uxtb	r2, r3
 8001bce:	4b34      	ldr	r3, [pc, #208]	; (8001ca0 <main+0x35c>)
 8001bd0:	701a      	strb	r2, [r3, #0]
				  stepper_step_angle(1, 1, 13, GPIOC, GPIO_PIN_0, GPIO_PIN_1, GPIO_PIN_2, GPIO_PIN_3);
 8001bd2:	2308      	movs	r3, #8
 8001bd4:	9304      	str	r3, [sp, #16]
 8001bd6:	2304      	movs	r3, #4
 8001bd8:	9303      	str	r3, [sp, #12]
 8001bda:	2302      	movs	r3, #2
 8001bdc:	9302      	str	r3, [sp, #8]
 8001bde:	2301      	movs	r3, #1
 8001be0:	9301      	str	r3, [sp, #4]
 8001be2:	4b26      	ldr	r3, [pc, #152]	; (8001c7c <main+0x338>)
 8001be4:	9300      	str	r3, [sp, #0]
 8001be6:	230d      	movs	r3, #13
 8001be8:	2201      	movs	r2, #1
 8001bea:	f04f 0000 	mov.w	r0, #0
 8001bee:	492b      	ldr	r1, [pc, #172]	; (8001c9c <main+0x358>)
 8001bf0:	f7ff fe00 	bl	80017f4 <stepper_step_angle>
		  while(value[1] == 4095)
 8001bf4:	4b11      	ldr	r3, [pc, #68]	; (8001c3c <main+0x2f8>)
 8001bf6:	685b      	ldr	r3, [r3, #4]
 8001bf8:	f640 72ff 	movw	r2, #4095	; 0xfff
 8001bfc:	4293      	cmp	r3, r2
 8001bfe:	d0c2      	beq.n	8001b86 <main+0x242>
			  }
		  }
		  while(value[1] < 1000)
 8001c00:	e06b      	b.n	8001cda <main+0x396>
		  {
			  if(step_count_roll_H > 0)
 8001c02:	4b27      	ldr	r3, [pc, #156]	; (8001ca0 <main+0x35c>)
 8001c04:	781b      	ldrb	r3, [r3, #0]
 8001c06:	2b00      	cmp	r3, #0
 8001c08:	d04c      	beq.n	8001ca4 <main+0x360>
			  {
				  stepper_step_angle(1, 0, 13, GPIOC, GPIO_PIN_0, GPIO_PIN_1, GPIO_PIN_2, GPIO_PIN_3);
 8001c0a:	2308      	movs	r3, #8
 8001c0c:	9304      	str	r3, [sp, #16]
 8001c0e:	2304      	movs	r3, #4
 8001c10:	9303      	str	r3, [sp, #12]
 8001c12:	2302      	movs	r3, #2
 8001c14:	9302      	str	r3, [sp, #8]
 8001c16:	2301      	movs	r3, #1
 8001c18:	9301      	str	r3, [sp, #4]
 8001c1a:	4b18      	ldr	r3, [pc, #96]	; (8001c7c <main+0x338>)
 8001c1c:	9300      	str	r3, [sp, #0]
 8001c1e:	230d      	movs	r3, #13
 8001c20:	2200      	movs	r2, #0
 8001c22:	f04f 0000 	mov.w	r0, #0
 8001c26:	491d      	ldr	r1, [pc, #116]	; (8001c9c <main+0x358>)
 8001c28:	f7ff fde4 	bl	80017f4 <stepper_step_angle>
				  step_count_roll_H--;
 8001c2c:	4b1c      	ldr	r3, [pc, #112]	; (8001ca0 <main+0x35c>)
 8001c2e:	781b      	ldrb	r3, [r3, #0]
 8001c30:	3b01      	subs	r3, #1
 8001c32:	b2da      	uxtb	r2, r3
 8001c34:	4b1a      	ldr	r3, [pc, #104]	; (8001ca0 <main+0x35c>)
 8001c36:	701a      	strb	r2, [r3, #0]
 8001c38:	e04f      	b.n	8001cda <main+0x396>
 8001c3a:	bf00      	nop
 8001c3c:	200005b8 	.word	0x200005b8
 8001c40:	20000204 	.word	0x20000204
 8001c44:	200002cc 	.word	0x200002cc
 8001c48:	20000314 	.word	0x20000314
 8001c4c:	200003e8 	.word	0x200003e8
 8001c50:	20000458 	.word	0x20000458
 8001c54:	200004c8 	.word	0x200004c8
 8001c58:	20000598 	.word	0x20000598
 8001c5c:	20000550 	.word	0x20000550
 8001c60:	0800b86c 	.word	0x0800b86c
 8001c64:	200005c4 	.word	0x200005c4
 8001c68:	200005c0 	.word	0x200005c0
 8001c6c:	200005c1 	.word	0x200005c1
 8001c70:	200005c2 	.word	0x200005c2
 8001c74:	200005c3 	.word	0x200005c3
 8001c78:	200005a0 	.word	0x200005a0
 8001c7c:	40011000 	.word	0x40011000
 8001c80:	40010c00 	.word	0x40010c00
 8001c84:	0800b894 	.word	0x0800b894
 8001c88:	0800b8a0 	.word	0x0800b8a0
 8001c8c:	2000060c 	.word	0x2000060c
 8001c90:	0800b8a8 	.word	0x0800b8a8
 8001c94:	2000062c 	.word	0x2000062c
 8001c98:	200005ca 	.word	0x200005ca
 8001c9c:	3ff00000 	.word	0x3ff00000
 8001ca0:	200005cb 	.word	0x200005cb
			  }
			  else if(step_count_roll_L < 90 ){
 8001ca4:	4b76      	ldr	r3, [pc, #472]	; (8001e80 <main+0x53c>)
 8001ca6:	781b      	ldrb	r3, [r3, #0]
 8001ca8:	2b59      	cmp	r3, #89	; 0x59
 8001caa:	d816      	bhi.n	8001cda <main+0x396>
				  step_count_roll_L++ ;
 8001cac:	4b74      	ldr	r3, [pc, #464]	; (8001e80 <main+0x53c>)
 8001cae:	781b      	ldrb	r3, [r3, #0]
 8001cb0:	3301      	adds	r3, #1
 8001cb2:	b2da      	uxtb	r2, r3
 8001cb4:	4b72      	ldr	r3, [pc, #456]	; (8001e80 <main+0x53c>)
 8001cb6:	701a      	strb	r2, [r3, #0]
				  stepper_step_angle(1, 0, 13, GPIOC, GPIO_PIN_0, GPIO_PIN_1, GPIO_PIN_2, GPIO_PIN_3);
 8001cb8:	2308      	movs	r3, #8
 8001cba:	9304      	str	r3, [sp, #16]
 8001cbc:	2304      	movs	r3, #4
 8001cbe:	9303      	str	r3, [sp, #12]
 8001cc0:	2302      	movs	r3, #2
 8001cc2:	9302      	str	r3, [sp, #8]
 8001cc4:	2301      	movs	r3, #1
 8001cc6:	9301      	str	r3, [sp, #4]
 8001cc8:	4b6e      	ldr	r3, [pc, #440]	; (8001e84 <main+0x540>)
 8001cca:	9300      	str	r3, [sp, #0]
 8001ccc:	230d      	movs	r3, #13
 8001cce:	2200      	movs	r2, #0
 8001cd0:	f04f 0000 	mov.w	r0, #0
 8001cd4:	496c      	ldr	r1, [pc, #432]	; (8001e88 <main+0x544>)
 8001cd6:	f7ff fd8d 	bl	80017f4 <stepper_step_angle>
		  while(value[1] < 1000)
 8001cda:	4b6c      	ldr	r3, [pc, #432]	; (8001e8c <main+0x548>)
 8001cdc:	685b      	ldr	r3, [r3, #4]
 8001cde:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001ce2:	d38e      	bcc.n	8001c02 <main+0x2be>
			  }
		  }

		  while(value[0] == 4095)
 8001ce4:	e03c      	b.n	8001d60 <main+0x41c>
		  {
				if(step_count_pitch_L > 0)
 8001ce6:	4b6a      	ldr	r3, [pc, #424]	; (8001e90 <main+0x54c>)
 8001ce8:	781b      	ldrb	r3, [r3, #0]
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	d01a      	beq.n	8001d24 <main+0x3e0>
				{
					stepper_step_angle(1, 1,13, GPIOB, GPIO_PIN_13, GPIO_PIN_14, GPIO_PIN_15, GPIO_PIN_1);
 8001cee:	2302      	movs	r3, #2
 8001cf0:	9304      	str	r3, [sp, #16]
 8001cf2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001cf6:	9303      	str	r3, [sp, #12]
 8001cf8:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001cfc:	9302      	str	r3, [sp, #8]
 8001cfe:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001d02:	9301      	str	r3, [sp, #4]
 8001d04:	4b63      	ldr	r3, [pc, #396]	; (8001e94 <main+0x550>)
 8001d06:	9300      	str	r3, [sp, #0]
 8001d08:	230d      	movs	r3, #13
 8001d0a:	2201      	movs	r2, #1
 8001d0c:	f04f 0000 	mov.w	r0, #0
 8001d10:	495d      	ldr	r1, [pc, #372]	; (8001e88 <main+0x544>)
 8001d12:	f7ff fd6f 	bl	80017f4 <stepper_step_angle>
					step_count_pitch_L--;
 8001d16:	4b5e      	ldr	r3, [pc, #376]	; (8001e90 <main+0x54c>)
 8001d18:	781b      	ldrb	r3, [r3, #0]
 8001d1a:	3b01      	subs	r3, #1
 8001d1c:	b2da      	uxtb	r2, r3
 8001d1e:	4b5c      	ldr	r3, [pc, #368]	; (8001e90 <main+0x54c>)
 8001d20:	701a      	strb	r2, [r3, #0]
 8001d22:	e01d      	b.n	8001d60 <main+0x41c>
				}
				else if (step_count_pitch_H < 90 )
 8001d24:	4b5c      	ldr	r3, [pc, #368]	; (8001e98 <main+0x554>)
 8001d26:	781b      	ldrb	r3, [r3, #0]
 8001d28:	2b59      	cmp	r3, #89	; 0x59
 8001d2a:	d819      	bhi.n	8001d60 <main+0x41c>
				{

					step_count_pitch_H++ ;
 8001d2c:	4b5a      	ldr	r3, [pc, #360]	; (8001e98 <main+0x554>)
 8001d2e:	781b      	ldrb	r3, [r3, #0]
 8001d30:	3301      	adds	r3, #1
 8001d32:	b2da      	uxtb	r2, r3
 8001d34:	4b58      	ldr	r3, [pc, #352]	; (8001e98 <main+0x554>)
 8001d36:	701a      	strb	r2, [r3, #0]
					stepper_step_angle(1, 1,13, GPIOB, GPIO_PIN_13, GPIO_PIN_14, GPIO_PIN_15, GPIO_PIN_1);
 8001d38:	2302      	movs	r3, #2
 8001d3a:	9304      	str	r3, [sp, #16]
 8001d3c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001d40:	9303      	str	r3, [sp, #12]
 8001d42:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001d46:	9302      	str	r3, [sp, #8]
 8001d48:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001d4c:	9301      	str	r3, [sp, #4]
 8001d4e:	4b51      	ldr	r3, [pc, #324]	; (8001e94 <main+0x550>)
 8001d50:	9300      	str	r3, [sp, #0]
 8001d52:	230d      	movs	r3, #13
 8001d54:	2201      	movs	r2, #1
 8001d56:	f04f 0000 	mov.w	r0, #0
 8001d5a:	494b      	ldr	r1, [pc, #300]	; (8001e88 <main+0x544>)
 8001d5c:	f7ff fd4a 	bl	80017f4 <stepper_step_angle>
		  while(value[0] == 4095)
 8001d60:	4b4a      	ldr	r3, [pc, #296]	; (8001e8c <main+0x548>)
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	f640 72ff 	movw	r2, #4095	; 0xfff
 8001d68:	4293      	cmp	r3, r2
 8001d6a:	d0bc      	beq.n	8001ce6 <main+0x3a2>
				}
		  }
		  while(value[0] < 1000)
 8001d6c:	e03c      	b.n	8001de8 <main+0x4a4>
		  {
				if(step_count_pitch_H > 0)
 8001d6e:	4b4a      	ldr	r3, [pc, #296]	; (8001e98 <main+0x554>)
 8001d70:	781b      	ldrb	r3, [r3, #0]
 8001d72:	2b00      	cmp	r3, #0
 8001d74:	d01a      	beq.n	8001dac <main+0x468>
				{
					stepper_step_angle(1, 0,13, GPIOB, GPIO_PIN_13, GPIO_PIN_14, GPIO_PIN_15, GPIO_PIN_1);
 8001d76:	2302      	movs	r3, #2
 8001d78:	9304      	str	r3, [sp, #16]
 8001d7a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001d7e:	9303      	str	r3, [sp, #12]
 8001d80:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001d84:	9302      	str	r3, [sp, #8]
 8001d86:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001d8a:	9301      	str	r3, [sp, #4]
 8001d8c:	4b41      	ldr	r3, [pc, #260]	; (8001e94 <main+0x550>)
 8001d8e:	9300      	str	r3, [sp, #0]
 8001d90:	230d      	movs	r3, #13
 8001d92:	2200      	movs	r2, #0
 8001d94:	f04f 0000 	mov.w	r0, #0
 8001d98:	493b      	ldr	r1, [pc, #236]	; (8001e88 <main+0x544>)
 8001d9a:	f7ff fd2b 	bl	80017f4 <stepper_step_angle>
					step_count_pitch_H--;
 8001d9e:	4b3e      	ldr	r3, [pc, #248]	; (8001e98 <main+0x554>)
 8001da0:	781b      	ldrb	r3, [r3, #0]
 8001da2:	3b01      	subs	r3, #1
 8001da4:	b2da      	uxtb	r2, r3
 8001da6:	4b3c      	ldr	r3, [pc, #240]	; (8001e98 <main+0x554>)
 8001da8:	701a      	strb	r2, [r3, #0]
 8001daa:	e01d      	b.n	8001de8 <main+0x4a4>
				}
				else if (step_count_pitch_L < 90 )
 8001dac:	4b38      	ldr	r3, [pc, #224]	; (8001e90 <main+0x54c>)
 8001dae:	781b      	ldrb	r3, [r3, #0]
 8001db0:	2b59      	cmp	r3, #89	; 0x59
 8001db2:	d819      	bhi.n	8001de8 <main+0x4a4>
				{

					step_count_pitch_L++ ;
 8001db4:	4b36      	ldr	r3, [pc, #216]	; (8001e90 <main+0x54c>)
 8001db6:	781b      	ldrb	r3, [r3, #0]
 8001db8:	3301      	adds	r3, #1
 8001dba:	b2da      	uxtb	r2, r3
 8001dbc:	4b34      	ldr	r3, [pc, #208]	; (8001e90 <main+0x54c>)
 8001dbe:	701a      	strb	r2, [r3, #0]
					stepper_step_angle(1, 0,13, GPIOB, GPIO_PIN_13, GPIO_PIN_14, GPIO_PIN_15, GPIO_PIN_1);
 8001dc0:	2302      	movs	r3, #2
 8001dc2:	9304      	str	r3, [sp, #16]
 8001dc4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001dc8:	9303      	str	r3, [sp, #12]
 8001dca:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001dce:	9302      	str	r3, [sp, #8]
 8001dd0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001dd4:	9301      	str	r3, [sp, #4]
 8001dd6:	4b2f      	ldr	r3, [pc, #188]	; (8001e94 <main+0x550>)
 8001dd8:	9300      	str	r3, [sp, #0]
 8001dda:	230d      	movs	r3, #13
 8001ddc:	2200      	movs	r2, #0
 8001dde:	f04f 0000 	mov.w	r0, #0
 8001de2:	4929      	ldr	r1, [pc, #164]	; (8001e88 <main+0x544>)
 8001de4:	f7ff fd06 	bl	80017f4 <stepper_step_angle>
		  while(value[0] < 1000)
 8001de8:	4b28      	ldr	r3, [pc, #160]	; (8001e8c <main+0x548>)
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001df0:	d3bd      	bcc.n	8001d6e <main+0x42a>

				}
		  }
//=============================================================================================
// joystick - LCD
		  lcd_clear();
 8001df2:	f7fe ff51 	bl	8000c98 <lcd_clear>
		  lcd_put_cur(0, 0);
 8001df6:	2100      	movs	r1, #0
 8001df8:	2000      	movs	r0, #0
 8001dfa:	f7fe ff64 	bl	8000cc6 <lcd_put_cur>
		  lcd_send_string("Joystick mode");
 8001dfe:	4827      	ldr	r0, [pc, #156]	; (8001e9c <main+0x558>)
 8001e00:	f7fe ffbd 	bl	8000d7e <lcd_send_string>
		  if(step_count_pitch_H == 0)
 8001e04:	4b24      	ldr	r3, [pc, #144]	; (8001e98 <main+0x554>)
 8001e06:	781b      	ldrb	r3, [r3, #0]
 8001e08:	2b00      	cmp	r3, #0
 8001e0a:	d107      	bne.n	8001e1c <main+0x4d8>
		  {
			  sprintf(joy_pitch_value,"p:-%d", step_count_pitch_L);
 8001e0c:	4b20      	ldr	r3, [pc, #128]	; (8001e90 <main+0x54c>)
 8001e0e:	781b      	ldrb	r3, [r3, #0]
 8001e10:	461a      	mov	r2, r3
 8001e12:	4923      	ldr	r1, [pc, #140]	; (8001ea0 <main+0x55c>)
 8001e14:	4823      	ldr	r0, [pc, #140]	; (8001ea4 <main+0x560>)
 8001e16:	f005 fce5 	bl	80077e4 <siprintf>
 8001e1a:	e00a      	b.n	8001e32 <main+0x4ee>
		  }
		  else if(step_count_pitch_L == 0)
 8001e1c:	4b1c      	ldr	r3, [pc, #112]	; (8001e90 <main+0x54c>)
 8001e1e:	781b      	ldrb	r3, [r3, #0]
 8001e20:	2b00      	cmp	r3, #0
 8001e22:	d106      	bne.n	8001e32 <main+0x4ee>
		  {
			  sprintf(joy_pitch_value,"p:+%d", step_count_pitch_H);
 8001e24:	4b1c      	ldr	r3, [pc, #112]	; (8001e98 <main+0x554>)
 8001e26:	781b      	ldrb	r3, [r3, #0]
 8001e28:	461a      	mov	r2, r3
 8001e2a:	491f      	ldr	r1, [pc, #124]	; (8001ea8 <main+0x564>)
 8001e2c:	481d      	ldr	r0, [pc, #116]	; (8001ea4 <main+0x560>)
 8001e2e:	f005 fcd9 	bl	80077e4 <siprintf>
		  }
		  lcd_put_cur(1, 0);
 8001e32:	2100      	movs	r1, #0
 8001e34:	2001      	movs	r0, #1
 8001e36:	f7fe ff46 	bl	8000cc6 <lcd_put_cur>
		  lcd_send_string(joy_pitch_value);
 8001e3a:	481a      	ldr	r0, [pc, #104]	; (8001ea4 <main+0x560>)
 8001e3c:	f7fe ff9f 	bl	8000d7e <lcd_send_string>

		  if(step_count_roll_H == 0)
 8001e40:	4b1a      	ldr	r3, [pc, #104]	; (8001eac <main+0x568>)
 8001e42:	781b      	ldrb	r3, [r3, #0]
 8001e44:	2b00      	cmp	r3, #0
 8001e46:	d107      	bne.n	8001e58 <main+0x514>
		  {
			  sprintf(joy_roll_value,"r :-%d", step_count_roll_L);
 8001e48:	4b0d      	ldr	r3, [pc, #52]	; (8001e80 <main+0x53c>)
 8001e4a:	781b      	ldrb	r3, [r3, #0]
 8001e4c:	461a      	mov	r2, r3
 8001e4e:	4918      	ldr	r1, [pc, #96]	; (8001eb0 <main+0x56c>)
 8001e50:	4818      	ldr	r0, [pc, #96]	; (8001eb4 <main+0x570>)
 8001e52:	f005 fcc7 	bl	80077e4 <siprintf>
 8001e56:	e00a      	b.n	8001e6e <main+0x52a>
		  }
		  else if(step_count_roll_L == 0)
 8001e58:	4b09      	ldr	r3, [pc, #36]	; (8001e80 <main+0x53c>)
 8001e5a:	781b      	ldrb	r3, [r3, #0]
 8001e5c:	2b00      	cmp	r3, #0
 8001e5e:	d106      	bne.n	8001e6e <main+0x52a>
		  {
			  sprintf(joy_roll_value,"r :+%d", step_count_roll_H);
 8001e60:	4b12      	ldr	r3, [pc, #72]	; (8001eac <main+0x568>)
 8001e62:	781b      	ldrb	r3, [r3, #0]
 8001e64:	461a      	mov	r2, r3
 8001e66:	4914      	ldr	r1, [pc, #80]	; (8001eb8 <main+0x574>)
 8001e68:	4812      	ldr	r0, [pc, #72]	; (8001eb4 <main+0x570>)
 8001e6a:	f005 fcbb 	bl	80077e4 <siprintf>
		  }
		  lcd_put_cur(1, 9);
 8001e6e:	2109      	movs	r1, #9
 8001e70:	2001      	movs	r0, #1
 8001e72:	f7fe ff28 	bl	8000cc6 <lcd_put_cur>
		  lcd_send_string(joy_roll_value);
 8001e76:	480f      	ldr	r0, [pc, #60]	; (8001eb4 <main+0x570>)
 8001e78:	f7fe ff81 	bl	8000d7e <lcd_send_string>
	  func();
 8001e7c:	e599      	b.n	80019b2 <main+0x6e>
 8001e7e:	bf00      	nop
 8001e80:	200005ca 	.word	0x200005ca
 8001e84:	40011000 	.word	0x40011000
 8001e88:	3ff00000 	.word	0x3ff00000
 8001e8c:	200005b8 	.word	0x200005b8
 8001e90:	200005c8 	.word	0x200005c8
 8001e94:	40010c00 	.word	0x40010c00
 8001e98:	200005c9 	.word	0x200005c9
 8001e9c:	0800b8b0 	.word	0x0800b8b0
 8001ea0:	0800b8c0 	.word	0x0800b8c0
 8001ea4:	200005ec 	.word	0x200005ec
 8001ea8:	0800b8c8 	.word	0x0800b8c8
 8001eac:	200005cb 	.word	0x200005cb
 8001eb0:	0800b8d0 	.word	0x0800b8d0
 8001eb4:	200005cc 	.word	0x200005cc
 8001eb8:	0800b8d8 	.word	0x0800b8d8

08001ebc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001ebc:	b580      	push	{r7, lr}
 8001ebe:	b094      	sub	sp, #80	; 0x50
 8001ec0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001ec2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001ec6:	2228      	movs	r2, #40	; 0x28
 8001ec8:	2100      	movs	r1, #0
 8001eca:	4618      	mov	r0, r3
 8001ecc:	f004 fdf8 	bl	8006ac0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001ed0:	f107 0314 	add.w	r3, r7, #20
 8001ed4:	2200      	movs	r2, #0
 8001ed6:	601a      	str	r2, [r3, #0]
 8001ed8:	605a      	str	r2, [r3, #4]
 8001eda:	609a      	str	r2, [r3, #8]
 8001edc:	60da      	str	r2, [r3, #12]
 8001ede:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001ee0:	1d3b      	adds	r3, r7, #4
 8001ee2:	2200      	movs	r2, #0
 8001ee4:	601a      	str	r2, [r3, #0]
 8001ee6:	605a      	str	r2, [r3, #4]
 8001ee8:	609a      	str	r2, [r3, #8]
 8001eea:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001eec:	2302      	movs	r3, #2
 8001eee:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001ef0:	2301      	movs	r3, #1
 8001ef2:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001ef4:	2310      	movs	r3, #16
 8001ef6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001ef8:	2302      	movs	r3, #2
 8001efa:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 8001efc:	2300      	movs	r3, #0
 8001efe:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 8001f00:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 8001f04:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001f06:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001f0a:	4618      	mov	r0, r3
 8001f0c:	f003 fae2 	bl	80054d4 <HAL_RCC_OscConfig>
 8001f10:	4603      	mov	r3, r0
 8001f12:	2b00      	cmp	r3, #0
 8001f14:	d001      	beq.n	8001f1a <SystemClock_Config+0x5e>
  {
    Error_Handler();
 8001f16:	f000 fcbf 	bl	8002898 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001f1a:	230f      	movs	r3, #15
 8001f1c:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001f1e:	2302      	movs	r3, #2
 8001f20:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001f22:	2300      	movs	r3, #0
 8001f24:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001f26:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001f2a:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001f2c:	2300      	movs	r3, #0
 8001f2e:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001f30:	f107 0314 	add.w	r3, r7, #20
 8001f34:	2102      	movs	r1, #2
 8001f36:	4618      	mov	r0, r3
 8001f38:	f003 fd4e 	bl	80059d8 <HAL_RCC_ClockConfig>
 8001f3c:	4603      	mov	r3, r0
 8001f3e:	2b00      	cmp	r3, #0
 8001f40:	d001      	beq.n	8001f46 <SystemClock_Config+0x8a>
  {
    Error_Handler();
 8001f42:	f000 fca9 	bl	8002898 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8001f46:	2302      	movs	r3, #2
 8001f48:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV8;
 8001f4a:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8001f4e:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001f50:	1d3b      	adds	r3, r7, #4
 8001f52:	4618      	mov	r0, r3
 8001f54:	f003 fed8 	bl	8005d08 <HAL_RCCEx_PeriphCLKConfig>
 8001f58:	4603      	mov	r3, r0
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	d001      	beq.n	8001f62 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8001f5e:	f000 fc9b 	bl	8002898 <Error_Handler>
  }
}
 8001f62:	bf00      	nop
 8001f64:	3750      	adds	r7, #80	; 0x50
 8001f66:	46bd      	mov	sp, r7
 8001f68:	bd80      	pop	{r7, pc}
	...

08001f6c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001f6c:	b580      	push	{r7, lr}
 8001f6e:	b084      	sub	sp, #16
 8001f70:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001f72:	1d3b      	adds	r3, r7, #4
 8001f74:	2200      	movs	r2, #0
 8001f76:	601a      	str	r2, [r3, #0]
 8001f78:	605a      	str	r2, [r3, #4]
 8001f7a:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8001f7c:	4b20      	ldr	r3, [pc, #128]	; (8002000 <MX_ADC1_Init+0x94>)
 8001f7e:	4a21      	ldr	r2, [pc, #132]	; (8002004 <MX_ADC1_Init+0x98>)
 8001f80:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8001f82:	4b1f      	ldr	r3, [pc, #124]	; (8002000 <MX_ADC1_Init+0x94>)
 8001f84:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001f88:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8001f8a:	4b1d      	ldr	r3, [pc, #116]	; (8002000 <MX_ADC1_Init+0x94>)
 8001f8c:	2201      	movs	r2, #1
 8001f8e:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001f90:	4b1b      	ldr	r3, [pc, #108]	; (8002000 <MX_ADC1_Init+0x94>)
 8001f92:	2200      	movs	r2, #0
 8001f94:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001f96:	4b1a      	ldr	r3, [pc, #104]	; (8002000 <MX_ADC1_Init+0x94>)
 8001f98:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8001f9c:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001f9e:	4b18      	ldr	r3, [pc, #96]	; (8002000 <MX_ADC1_Init+0x94>)
 8001fa0:	2200      	movs	r2, #0
 8001fa2:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 2;
 8001fa4:	4b16      	ldr	r3, [pc, #88]	; (8002000 <MX_ADC1_Init+0x94>)
 8001fa6:	2202      	movs	r2, #2
 8001fa8:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001faa:	4815      	ldr	r0, [pc, #84]	; (8002000 <MX_ADC1_Init+0x94>)
 8001fac:	f000 ffc2 	bl	8002f34 <HAL_ADC_Init>
 8001fb0:	4603      	mov	r3, r0
 8001fb2:	2b00      	cmp	r3, #0
 8001fb4:	d001      	beq.n	8001fba <MX_ADC1_Init+0x4e>
  {
    Error_Handler();
 8001fb6:	f000 fc6f 	bl	8002898 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8001fba:	2306      	movs	r3, #6
 8001fbc:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001fbe:	2301      	movs	r3, #1
 8001fc0:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_28CYCLES_5;
 8001fc2:	2303      	movs	r3, #3
 8001fc4:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001fc6:	1d3b      	adds	r3, r7, #4
 8001fc8:	4619      	mov	r1, r3
 8001fca:	480d      	ldr	r0, [pc, #52]	; (8002000 <MX_ADC1_Init+0x94>)
 8001fcc:	f001 fa50 	bl	8003470 <HAL_ADC_ConfigChannel>
 8001fd0:	4603      	mov	r3, r0
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	d001      	beq.n	8001fda <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 8001fd6:	f000 fc5f 	bl	8002898 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_7;
 8001fda:	2307      	movs	r3, #7
 8001fdc:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8001fde:	2302      	movs	r3, #2
 8001fe0:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001fe2:	1d3b      	adds	r3, r7, #4
 8001fe4:	4619      	mov	r1, r3
 8001fe6:	4806      	ldr	r0, [pc, #24]	; (8002000 <MX_ADC1_Init+0x94>)
 8001fe8:	f001 fa42 	bl	8003470 <HAL_ADC_ConfigChannel>
 8001fec:	4603      	mov	r3, r0
 8001fee:	2b00      	cmp	r3, #0
 8001ff0:	d001      	beq.n	8001ff6 <MX_ADC1_Init+0x8a>
  {
    Error_Handler();
 8001ff2:	f000 fc51 	bl	8002898 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001ff6:	bf00      	nop
 8001ff8:	3710      	adds	r7, #16
 8001ffa:	46bd      	mov	sp, r7
 8001ffc:	bd80      	pop	{r7, pc}
 8001ffe:	bf00      	nop
 8002000:	20000204 	.word	0x20000204
 8002004:	40012400 	.word	0x40012400

08002008 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8002008:	b580      	push	{r7, lr}
 800200a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800200c:	4b12      	ldr	r3, [pc, #72]	; (8002058 <MX_I2C1_Init+0x50>)
 800200e:	4a13      	ldr	r2, [pc, #76]	; (800205c <MX_I2C1_Init+0x54>)
 8002010:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8002012:	4b11      	ldr	r3, [pc, #68]	; (8002058 <MX_I2C1_Init+0x50>)
 8002014:	4a12      	ldr	r2, [pc, #72]	; (8002060 <MX_I2C1_Init+0x58>)
 8002016:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8002018:	4b0f      	ldr	r3, [pc, #60]	; (8002058 <MX_I2C1_Init+0x50>)
 800201a:	2200      	movs	r2, #0
 800201c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800201e:	4b0e      	ldr	r3, [pc, #56]	; (8002058 <MX_I2C1_Init+0x50>)
 8002020:	2200      	movs	r2, #0
 8002022:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002024:	4b0c      	ldr	r3, [pc, #48]	; (8002058 <MX_I2C1_Init+0x50>)
 8002026:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800202a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800202c:	4b0a      	ldr	r3, [pc, #40]	; (8002058 <MX_I2C1_Init+0x50>)
 800202e:	2200      	movs	r2, #0
 8002030:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8002032:	4b09      	ldr	r3, [pc, #36]	; (8002058 <MX_I2C1_Init+0x50>)
 8002034:	2200      	movs	r2, #0
 8002036:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002038:	4b07      	ldr	r3, [pc, #28]	; (8002058 <MX_I2C1_Init+0x50>)
 800203a:	2200      	movs	r2, #0
 800203c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800203e:	4b06      	ldr	r3, [pc, #24]	; (8002058 <MX_I2C1_Init+0x50>)
 8002040:	2200      	movs	r2, #0
 8002042:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8002044:	4804      	ldr	r0, [pc, #16]	; (8002058 <MX_I2C1_Init+0x50>)
 8002046:	f002 f8c5 	bl	80041d4 <HAL_I2C_Init>
 800204a:	4603      	mov	r3, r0
 800204c:	2b00      	cmp	r3, #0
 800204e:	d001      	beq.n	8002054 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8002050:	f000 fc22 	bl	8002898 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8002054:	bf00      	nop
 8002056:	bd80      	pop	{r7, pc}
 8002058:	20000278 	.word	0x20000278
 800205c:	40005400 	.word	0x40005400
 8002060:	00061a80 	.word	0x00061a80

08002064 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8002064:	b580      	push	{r7, lr}
 8002066:	b086      	sub	sp, #24
 8002068:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800206a:	f107 0308 	add.w	r3, r7, #8
 800206e:	2200      	movs	r2, #0
 8002070:	601a      	str	r2, [r3, #0]
 8002072:	605a      	str	r2, [r3, #4]
 8002074:	609a      	str	r2, [r3, #8]
 8002076:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002078:	463b      	mov	r3, r7
 800207a:	2200      	movs	r2, #0
 800207c:	601a      	str	r2, [r3, #0]
 800207e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8002080:	4b1e      	ldr	r3, [pc, #120]	; (80020fc <MX_TIM1_Init+0x98>)
 8002082:	4a1f      	ldr	r2, [pc, #124]	; (8002100 <MX_TIM1_Init+0x9c>)
 8002084:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 63;
 8002086:	4b1d      	ldr	r3, [pc, #116]	; (80020fc <MX_TIM1_Init+0x98>)
 8002088:	223f      	movs	r2, #63	; 0x3f
 800208a:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800208c:	4b1b      	ldr	r3, [pc, #108]	; (80020fc <MX_TIM1_Init+0x98>)
 800208e:	2200      	movs	r2, #0
 8002090:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535-1;
 8002092:	4b1a      	ldr	r3, [pc, #104]	; (80020fc <MX_TIM1_Init+0x98>)
 8002094:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8002098:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800209a:	4b18      	ldr	r3, [pc, #96]	; (80020fc <MX_TIM1_Init+0x98>)
 800209c:	2200      	movs	r2, #0
 800209e:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80020a0:	4b16      	ldr	r3, [pc, #88]	; (80020fc <MX_TIM1_Init+0x98>)
 80020a2:	2200      	movs	r2, #0
 80020a4:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80020a6:	4b15      	ldr	r3, [pc, #84]	; (80020fc <MX_TIM1_Init+0x98>)
 80020a8:	2200      	movs	r2, #0
 80020aa:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80020ac:	4813      	ldr	r0, [pc, #76]	; (80020fc <MX_TIM1_Init+0x98>)
 80020ae:	f003 fee1 	bl	8005e74 <HAL_TIM_Base_Init>
 80020b2:	4603      	mov	r3, r0
 80020b4:	2b00      	cmp	r3, #0
 80020b6:	d001      	beq.n	80020bc <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 80020b8:	f000 fbee 	bl	8002898 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80020bc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80020c0:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80020c2:	f107 0308 	add.w	r3, r7, #8
 80020c6:	4619      	mov	r1, r3
 80020c8:	480c      	ldr	r0, [pc, #48]	; (80020fc <MX_TIM1_Init+0x98>)
 80020ca:	f004 f8c7 	bl	800625c <HAL_TIM_ConfigClockSource>
 80020ce:	4603      	mov	r3, r0
 80020d0:	2b00      	cmp	r3, #0
 80020d2:	d001      	beq.n	80020d8 <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 80020d4:	f000 fbe0 	bl	8002898 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80020d8:	2300      	movs	r3, #0
 80020da:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80020dc:	2300      	movs	r3, #0
 80020de:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80020e0:	463b      	mov	r3, r7
 80020e2:	4619      	mov	r1, r3
 80020e4:	4805      	ldr	r0, [pc, #20]	; (80020fc <MX_TIM1_Init+0x98>)
 80020e6:	f004 fa99 	bl	800661c <HAL_TIMEx_MasterConfigSynchronization>
 80020ea:	4603      	mov	r3, r0
 80020ec:	2b00      	cmp	r3, #0
 80020ee:	d001      	beq.n	80020f4 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 80020f0:	f000 fbd2 	bl	8002898 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 80020f4:	bf00      	nop
 80020f6:	3718      	adds	r7, #24
 80020f8:	46bd      	mov	sp, r7
 80020fa:	bd80      	pop	{r7, pc}
 80020fc:	200002cc 	.word	0x200002cc
 8002100:	40012c00 	.word	0x40012c00

08002104 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8002104:	b580      	push	{r7, lr}
 8002106:	b086      	sub	sp, #24
 8002108:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800210a:	f107 0308 	add.w	r3, r7, #8
 800210e:	2200      	movs	r2, #0
 8002110:	601a      	str	r2, [r3, #0]
 8002112:	605a      	str	r2, [r3, #4]
 8002114:	609a      	str	r2, [r3, #8]
 8002116:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002118:	463b      	mov	r3, r7
 800211a:	2200      	movs	r2, #0
 800211c:	601a      	str	r2, [r3, #0]
 800211e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002120:	4b1e      	ldr	r3, [pc, #120]	; (800219c <MX_TIM2_Init+0x98>)
 8002122:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002126:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 63999;
 8002128:	4b1c      	ldr	r3, [pc, #112]	; (800219c <MX_TIM2_Init+0x98>)
 800212a:	f64f 12ff 	movw	r2, #63999	; 0xf9ff
 800212e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002130:	4b1a      	ldr	r3, [pc, #104]	; (800219c <MX_TIM2_Init+0x98>)
 8002132:	2200      	movs	r2, #0
 8002134:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 8002136:	4b19      	ldr	r3, [pc, #100]	; (800219c <MX_TIM2_Init+0x98>)
 8002138:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800213c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800213e:	4b17      	ldr	r3, [pc, #92]	; (800219c <MX_TIM2_Init+0x98>)
 8002140:	2200      	movs	r2, #0
 8002142:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002144:	4b15      	ldr	r3, [pc, #84]	; (800219c <MX_TIM2_Init+0x98>)
 8002146:	2200      	movs	r2, #0
 8002148:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800214a:	4814      	ldr	r0, [pc, #80]	; (800219c <MX_TIM2_Init+0x98>)
 800214c:	f003 fe92 	bl	8005e74 <HAL_TIM_Base_Init>
 8002150:	4603      	mov	r3, r0
 8002152:	2b00      	cmp	r3, #0
 8002154:	d001      	beq.n	800215a <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8002156:	f000 fb9f 	bl	8002898 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800215a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800215e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8002160:	f107 0308 	add.w	r3, r7, #8
 8002164:	4619      	mov	r1, r3
 8002166:	480d      	ldr	r0, [pc, #52]	; (800219c <MX_TIM2_Init+0x98>)
 8002168:	f004 f878 	bl	800625c <HAL_TIM_ConfigClockSource>
 800216c:	4603      	mov	r3, r0
 800216e:	2b00      	cmp	r3, #0
 8002170:	d001      	beq.n	8002176 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8002172:	f000 fb91 	bl	8002898 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002176:	2300      	movs	r3, #0
 8002178:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800217a:	2300      	movs	r3, #0
 800217c:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800217e:	463b      	mov	r3, r7
 8002180:	4619      	mov	r1, r3
 8002182:	4806      	ldr	r0, [pc, #24]	; (800219c <MX_TIM2_Init+0x98>)
 8002184:	f004 fa4a 	bl	800661c <HAL_TIMEx_MasterConfigSynchronization>
 8002188:	4603      	mov	r3, r0
 800218a:	2b00      	cmp	r3, #0
 800218c:	d001      	beq.n	8002192 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 800218e:	f000 fb83 	bl	8002898 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8002192:	bf00      	nop
 8002194:	3718      	adds	r7, #24
 8002196:	46bd      	mov	sp, r7
 8002198:	bd80      	pop	{r7, pc}
 800219a:	bf00      	nop
 800219c:	20000314 	.word	0x20000314

080021a0 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80021a0:	b580      	push	{r7, lr}
 80021a2:	b086      	sub	sp, #24
 80021a4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80021a6:	f107 0308 	add.w	r3, r7, #8
 80021aa:	2200      	movs	r2, #0
 80021ac:	601a      	str	r2, [r3, #0]
 80021ae:	605a      	str	r2, [r3, #4]
 80021b0:	609a      	str	r2, [r3, #8]
 80021b2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80021b4:	463b      	mov	r3, r7
 80021b6:	2200      	movs	r2, #0
 80021b8:	601a      	str	r2, [r3, #0]
 80021ba:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80021bc:	4b1d      	ldr	r3, [pc, #116]	; (8002234 <MX_TIM3_Init+0x94>)
 80021be:	4a1e      	ldr	r2, [pc, #120]	; (8002238 <MX_TIM3_Init+0x98>)
 80021c0:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 64-1;
 80021c2:	4b1c      	ldr	r3, [pc, #112]	; (8002234 <MX_TIM3_Init+0x94>)
 80021c4:	223f      	movs	r2, #63	; 0x3f
 80021c6:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80021c8:	4b1a      	ldr	r3, [pc, #104]	; (8002234 <MX_TIM3_Init+0x94>)
 80021ca:	2200      	movs	r2, #0
 80021cc:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 10000-1;
 80021ce:	4b19      	ldr	r3, [pc, #100]	; (8002234 <MX_TIM3_Init+0x94>)
 80021d0:	f242 720f 	movw	r2, #9999	; 0x270f
 80021d4:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80021d6:	4b17      	ldr	r3, [pc, #92]	; (8002234 <MX_TIM3_Init+0x94>)
 80021d8:	2200      	movs	r2, #0
 80021da:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80021dc:	4b15      	ldr	r3, [pc, #84]	; (8002234 <MX_TIM3_Init+0x94>)
 80021de:	2200      	movs	r2, #0
 80021e0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80021e2:	4814      	ldr	r0, [pc, #80]	; (8002234 <MX_TIM3_Init+0x94>)
 80021e4:	f003 fe46 	bl	8005e74 <HAL_TIM_Base_Init>
 80021e8:	4603      	mov	r3, r0
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	d001      	beq.n	80021f2 <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 80021ee:	f000 fb53 	bl	8002898 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80021f2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80021f6:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80021f8:	f107 0308 	add.w	r3, r7, #8
 80021fc:	4619      	mov	r1, r3
 80021fe:	480d      	ldr	r0, [pc, #52]	; (8002234 <MX_TIM3_Init+0x94>)
 8002200:	f004 f82c 	bl	800625c <HAL_TIM_ConfigClockSource>
 8002204:	4603      	mov	r3, r0
 8002206:	2b00      	cmp	r3, #0
 8002208:	d001      	beq.n	800220e <MX_TIM3_Init+0x6e>
  {
    Error_Handler();
 800220a:	f000 fb45 	bl	8002898 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800220e:	2300      	movs	r3, #0
 8002210:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002212:	2300      	movs	r3, #0
 8002214:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002216:	463b      	mov	r3, r7
 8002218:	4619      	mov	r1, r3
 800221a:	4806      	ldr	r0, [pc, #24]	; (8002234 <MX_TIM3_Init+0x94>)
 800221c:	f004 f9fe 	bl	800661c <HAL_TIMEx_MasterConfigSynchronization>
 8002220:	4603      	mov	r3, r0
 8002222:	2b00      	cmp	r3, #0
 8002224:	d001      	beq.n	800222a <MX_TIM3_Init+0x8a>
  {
    Error_Handler();
 8002226:	f000 fb37 	bl	8002898 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 800222a:	bf00      	nop
 800222c:	3718      	adds	r7, #24
 800222e:	46bd      	mov	sp, r7
 8002230:	bd80      	pop	{r7, pc}
 8002232:	bf00      	nop
 8002234:	2000035c 	.word	0x2000035c
 8002238:	40000400 	.word	0x40000400

0800223c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800223c:	b580      	push	{r7, lr}
 800223e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002240:	4b11      	ldr	r3, [pc, #68]	; (8002288 <MX_USART2_UART_Init+0x4c>)
 8002242:	4a12      	ldr	r2, [pc, #72]	; (800228c <MX_USART2_UART_Init+0x50>)
 8002244:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8002246:	4b10      	ldr	r3, [pc, #64]	; (8002288 <MX_USART2_UART_Init+0x4c>)
 8002248:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 800224c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800224e:	4b0e      	ldr	r3, [pc, #56]	; (8002288 <MX_USART2_UART_Init+0x4c>)
 8002250:	2200      	movs	r2, #0
 8002252:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002254:	4b0c      	ldr	r3, [pc, #48]	; (8002288 <MX_USART2_UART_Init+0x4c>)
 8002256:	2200      	movs	r2, #0
 8002258:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800225a:	4b0b      	ldr	r3, [pc, #44]	; (8002288 <MX_USART2_UART_Init+0x4c>)
 800225c:	2200      	movs	r2, #0
 800225e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002260:	4b09      	ldr	r3, [pc, #36]	; (8002288 <MX_USART2_UART_Init+0x4c>)
 8002262:	220c      	movs	r2, #12
 8002264:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002266:	4b08      	ldr	r3, [pc, #32]	; (8002288 <MX_USART2_UART_Init+0x4c>)
 8002268:	2200      	movs	r2, #0
 800226a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800226c:	4b06      	ldr	r3, [pc, #24]	; (8002288 <MX_USART2_UART_Init+0x4c>)
 800226e:	2200      	movs	r2, #0
 8002270:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002272:	4805      	ldr	r0, [pc, #20]	; (8002288 <MX_USART2_UART_Init+0x4c>)
 8002274:	f004 fa42 	bl	80066fc <HAL_UART_Init>
 8002278:	4603      	mov	r3, r0
 800227a:	2b00      	cmp	r3, #0
 800227c:	d001      	beq.n	8002282 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800227e:	f000 fb0b 	bl	8002898 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002282:	bf00      	nop
 8002284:	bd80      	pop	{r7, pc}
 8002286:	bf00      	nop
 8002288:	200003a4 	.word	0x200003a4
 800228c:	40004400 	.word	0x40004400

08002290 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8002290:	b580      	push	{r7, lr}
 8002292:	b082      	sub	sp, #8
 8002294:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8002296:	4b0c      	ldr	r3, [pc, #48]	; (80022c8 <MX_DMA_Init+0x38>)
 8002298:	695b      	ldr	r3, [r3, #20]
 800229a:	4a0b      	ldr	r2, [pc, #44]	; (80022c8 <MX_DMA_Init+0x38>)
 800229c:	f043 0301 	orr.w	r3, r3, #1
 80022a0:	6153      	str	r3, [r2, #20]
 80022a2:	4b09      	ldr	r3, [pc, #36]	; (80022c8 <MX_DMA_Init+0x38>)
 80022a4:	695b      	ldr	r3, [r3, #20]
 80022a6:	f003 0301 	and.w	r3, r3, #1
 80022aa:	607b      	str	r3, [r7, #4]
 80022ac:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 80022ae:	2200      	movs	r2, #0
 80022b0:	2100      	movs	r1, #0
 80022b2:	200b      	movs	r0, #11
 80022b4:	f001 fbb5 	bl	8003a22 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80022b8:	200b      	movs	r0, #11
 80022ba:	f001 fbce 	bl	8003a5a <HAL_NVIC_EnableIRQ>

}
 80022be:	bf00      	nop
 80022c0:	3708      	adds	r7, #8
 80022c2:	46bd      	mov	sp, r7
 80022c4:	bd80      	pop	{r7, pc}
 80022c6:	bf00      	nop
 80022c8:	40021000 	.word	0x40021000

080022cc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80022cc:	b580      	push	{r7, lr}
 80022ce:	b088      	sub	sp, #32
 80022d0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80022d2:	f107 0310 	add.w	r3, r7, #16
 80022d6:	2200      	movs	r2, #0
 80022d8:	601a      	str	r2, [r3, #0]
 80022da:	605a      	str	r2, [r3, #4]
 80022dc:	609a      	str	r2, [r3, #8]
 80022de:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80022e0:	4b52      	ldr	r3, [pc, #328]	; (800242c <MX_GPIO_Init+0x160>)
 80022e2:	699b      	ldr	r3, [r3, #24]
 80022e4:	4a51      	ldr	r2, [pc, #324]	; (800242c <MX_GPIO_Init+0x160>)
 80022e6:	f043 0310 	orr.w	r3, r3, #16
 80022ea:	6193      	str	r3, [r2, #24]
 80022ec:	4b4f      	ldr	r3, [pc, #316]	; (800242c <MX_GPIO_Init+0x160>)
 80022ee:	699b      	ldr	r3, [r3, #24]
 80022f0:	f003 0310 	and.w	r3, r3, #16
 80022f4:	60fb      	str	r3, [r7, #12]
 80022f6:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80022f8:	4b4c      	ldr	r3, [pc, #304]	; (800242c <MX_GPIO_Init+0x160>)
 80022fa:	699b      	ldr	r3, [r3, #24]
 80022fc:	4a4b      	ldr	r2, [pc, #300]	; (800242c <MX_GPIO_Init+0x160>)
 80022fe:	f043 0320 	orr.w	r3, r3, #32
 8002302:	6193      	str	r3, [r2, #24]
 8002304:	4b49      	ldr	r3, [pc, #292]	; (800242c <MX_GPIO_Init+0x160>)
 8002306:	699b      	ldr	r3, [r3, #24]
 8002308:	f003 0320 	and.w	r3, r3, #32
 800230c:	60bb      	str	r3, [r7, #8]
 800230e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002310:	4b46      	ldr	r3, [pc, #280]	; (800242c <MX_GPIO_Init+0x160>)
 8002312:	699b      	ldr	r3, [r3, #24]
 8002314:	4a45      	ldr	r2, [pc, #276]	; (800242c <MX_GPIO_Init+0x160>)
 8002316:	f043 0304 	orr.w	r3, r3, #4
 800231a:	6193      	str	r3, [r2, #24]
 800231c:	4b43      	ldr	r3, [pc, #268]	; (800242c <MX_GPIO_Init+0x160>)
 800231e:	699b      	ldr	r3, [r3, #24]
 8002320:	f003 0304 	and.w	r3, r3, #4
 8002324:	607b      	str	r3, [r7, #4]
 8002326:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002328:	4b40      	ldr	r3, [pc, #256]	; (800242c <MX_GPIO_Init+0x160>)
 800232a:	699b      	ldr	r3, [r3, #24]
 800232c:	4a3f      	ldr	r2, [pc, #252]	; (800242c <MX_GPIO_Init+0x160>)
 800232e:	f043 0308 	orr.w	r3, r3, #8
 8002332:	6193      	str	r3, [r2, #24]
 8002334:	4b3d      	ldr	r3, [pc, #244]	; (800242c <MX_GPIO_Init+0x160>)
 8002336:	699b      	ldr	r3, [r3, #24]
 8002338:	f003 0308 	and.w	r3, r3, #8
 800233c:	603b      	str	r3, [r7, #0]
 800233e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3, GPIO_PIN_RESET);
 8002340:	2200      	movs	r2, #0
 8002342:	210f      	movs	r1, #15
 8002344:	483a      	ldr	r0, [pc, #232]	; (8002430 <MX_GPIO_Init+0x164>)
 8002346:	f001 ff15 	bl	8004174 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800234a:	2200      	movs	r2, #0
 800234c:	2120      	movs	r1, #32
 800234e:	4839      	ldr	r0, [pc, #228]	; (8002434 <MX_GPIO_Init+0x168>)
 8002350:	f001 ff10 	bl	8004174 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 8002354:	2200      	movs	r2, #0
 8002356:	f24e 0102 	movw	r1, #57346	; 0xe002
 800235a:	4837      	ldr	r0, [pc, #220]	; (8002438 <MX_GPIO_Init+0x16c>)
 800235c:	f001 ff0a 	bl	8004174 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8002360:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002364:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002366:	4b35      	ldr	r3, [pc, #212]	; (800243c <MX_GPIO_Init+0x170>)
 8002368:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800236a:	2301      	movs	r3, #1
 800236c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800236e:	f107 0310 	add.w	r3, r7, #16
 8002372:	4619      	mov	r1, r3
 8002374:	482e      	ldr	r0, [pc, #184]	; (8002430 <MX_GPIO_Init+0x164>)
 8002376:	f001 fd79 	bl	8003e6c <HAL_GPIO_Init>

  /*Configure GPIO pins : PC0 PC1 PC2 PC3 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 800237a:	230f      	movs	r3, #15
 800237c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800237e:	2301      	movs	r3, #1
 8002380:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002382:	2300      	movs	r3, #0
 8002384:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002386:	2302      	movs	r3, #2
 8002388:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800238a:	f107 0310 	add.w	r3, r7, #16
 800238e:	4619      	mov	r1, r3
 8002390:	4827      	ldr	r0, [pc, #156]	; (8002430 <MX_GPIO_Init+0x164>)
 8002392:	f001 fd6b 	bl	8003e6c <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8002396:	2320      	movs	r3, #32
 8002398:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800239a:	2301      	movs	r3, #1
 800239c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800239e:	2300      	movs	r3, #0
 80023a0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80023a2:	2302      	movs	r3, #2
 80023a4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80023a6:	f107 0310 	add.w	r3, r7, #16
 80023aa:	4619      	mov	r1, r3
 80023ac:	4821      	ldr	r0, [pc, #132]	; (8002434 <MX_GPIO_Init+0x168>)
 80023ae:	f001 fd5d 	bl	8003e6c <HAL_GPIO_Init>

  /*Configure GPIO pins : PB1 PB13 PB14 PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 80023b2:	f24e 0302 	movw	r3, #57346	; 0xe002
 80023b6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80023b8:	2301      	movs	r3, #1
 80023ba:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023bc:	2300      	movs	r3, #0
 80023be:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80023c0:	2302      	movs	r3, #2
 80023c2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80023c4:	f107 0310 	add.w	r3, r7, #16
 80023c8:	4619      	mov	r1, r3
 80023ca:	481b      	ldr	r0, [pc, #108]	; (8002438 <MX_GPIO_Init+0x16c>)
 80023cc:	f001 fd4e 	bl	8003e6c <HAL_GPIO_Init>

  /*Configure GPIO pin : PC7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 80023d0:	2380      	movs	r3, #128	; 0x80
 80023d2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80023d4:	4b19      	ldr	r3, [pc, #100]	; (800243c <MX_GPIO_Init+0x170>)
 80023d6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023d8:	2300      	movs	r3, #0
 80023da:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80023dc:	f107 0310 	add.w	r3, r7, #16
 80023e0:	4619      	mov	r1, r3
 80023e2:	4813      	ldr	r0, [pc, #76]	; (8002430 <MX_GPIO_Init+0x164>)
 80023e4:	f001 fd42 	bl	8003e6c <HAL_GPIO_Init>

  /*Configure GPIO pin : PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 80023e8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80023ec:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80023ee:	4b13      	ldr	r3, [pc, #76]	; (800243c <MX_GPIO_Init+0x170>)
 80023f0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023f2:	2300      	movs	r3, #0
 80023f4:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80023f6:	f107 0310 	add.w	r3, r7, #16
 80023fa:	4619      	mov	r1, r3
 80023fc:	480d      	ldr	r0, [pc, #52]	; (8002434 <MX_GPIO_Init+0x168>)
 80023fe:	f001 fd35 	bl	8003e6c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8002402:	2200      	movs	r2, #0
 8002404:	2100      	movs	r1, #0
 8002406:	2017      	movs	r0, #23
 8002408:	f001 fb0b 	bl	8003a22 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 800240c:	2017      	movs	r0, #23
 800240e:	f001 fb24 	bl	8003a5a <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8002412:	2200      	movs	r2, #0
 8002414:	2100      	movs	r1, #0
 8002416:	2028      	movs	r0, #40	; 0x28
 8002418:	f001 fb03 	bl	8003a22 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800241c:	2028      	movs	r0, #40	; 0x28
 800241e:	f001 fb1c 	bl	8003a5a <HAL_NVIC_EnableIRQ>

}
 8002422:	bf00      	nop
 8002424:	3720      	adds	r7, #32
 8002426:	46bd      	mov	sp, r7
 8002428:	bd80      	pop	{r7, pc}
 800242a:	bf00      	nop
 800242c:	40021000 	.word	0x40021000
 8002430:	40011000 	.word	0x40011000
 8002434:	40010800 	.word	0x40010800
 8002438:	40010c00 	.word	0x40010c00
 800243c:	10110000 	.word	0x10110000

08002440 <func>:

/* USER CODE BEGIN 4 */
//=====================================================================================================================
// Get kalman value
void func()
{
 8002440:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8002444:	b08a      	sub	sp, #40	; 0x28
 8002446:	af04      	add	r7, sp, #16
    double gyroXrate,gyroYrate,dt;
    /* Update all the IMU values */
    updateMPU6050();
 8002448:	f7fe ffee 	bl	8001428 <updateMPU6050>

    dt = 0.03;
 800244c:	a356      	add	r3, pc, #344	; (adr r3, 80025a8 <func+0x168>)
 800244e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002452:	e9c7 2302 	strd	r2, r3, [r7, #8]


    /* Roll and pitch estimation */
    updatePitchRoll();
 8002456:	f7ff f853 	bl	8001500 <updatePitchRoll>
    gyroXrate = gyroX / 131.0;
 800245a:	4b57      	ldr	r3, [pc, #348]	; (80025b8 <func+0x178>)
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	4618      	mov	r0, r3
 8002460:	f7fd ffd0 	bl	8000404 <__aeabi_i2d>
 8002464:	a352      	add	r3, pc, #328	; (adr r3, 80025b0 <func+0x170>)
 8002466:	e9d3 2300 	ldrd	r2, r3, [r3]
 800246a:	f7fe f95f 	bl	800072c <__aeabi_ddiv>
 800246e:	4602      	mov	r2, r0
 8002470:	460b      	mov	r3, r1
 8002472:	e9c7 2300 	strd	r2, r3, [r7]
    gyroYrate = gyroY / 131.0;
 8002476:	4b51      	ldr	r3, [pc, #324]	; (80025bc <func+0x17c>)
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	4618      	mov	r0, r3
 800247c:	f7fd ffc2 	bl	8000404 <__aeabi_i2d>
 8002480:	a34b      	add	r3, pc, #300	; (adr r3, 80025b0 <func+0x170>)
 8002482:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002486:	f7fe f951 	bl	800072c <__aeabi_ddiv>
 800248a:	4602      	mov	r2, r0
 800248c:	460b      	mov	r3, r1
 800248e:	e9c7 2304 	strd	r2, r3, [r7, #16]

    #ifdef RESTRICT_PITCH

    if ((roll < -90 && kalAngleX > 90) || (roll > 90 && kalAngleX < -90)) {
 8002492:	4b4b      	ldr	r3, [pc, #300]	; (80025c0 <func+0x180>)
 8002494:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002498:	f04f 0200 	mov.w	r2, #0
 800249c:	4b49      	ldr	r3, [pc, #292]	; (80025c4 <func+0x184>)
 800249e:	f7fe fa8d 	bl	80009bc <__aeabi_dcmplt>
 80024a2:	4603      	mov	r3, r0
 80024a4:	2b00      	cmp	r3, #0
 80024a6:	d00a      	beq.n	80024be <func+0x7e>
 80024a8:	4b47      	ldr	r3, [pc, #284]	; (80025c8 <func+0x188>)
 80024aa:	e9d3 0100 	ldrd	r0, r1, [r3]
 80024ae:	f04f 0200 	mov.w	r2, #0
 80024b2:	4b46      	ldr	r3, [pc, #280]	; (80025cc <func+0x18c>)
 80024b4:	f7fe faa0 	bl	80009f8 <__aeabi_dcmpgt>
 80024b8:	4603      	mov	r3, r0
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	d115      	bne.n	80024ea <func+0xaa>
 80024be:	4b40      	ldr	r3, [pc, #256]	; (80025c0 <func+0x180>)
 80024c0:	e9d3 0100 	ldrd	r0, r1, [r3]
 80024c4:	f04f 0200 	mov.w	r2, #0
 80024c8:	4b40      	ldr	r3, [pc, #256]	; (80025cc <func+0x18c>)
 80024ca:	f7fe fa95 	bl	80009f8 <__aeabi_dcmpgt>
 80024ce:	4603      	mov	r3, r0
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	d023      	beq.n	800251c <func+0xdc>
 80024d4:	4b3c      	ldr	r3, [pc, #240]	; (80025c8 <func+0x188>)
 80024d6:	e9d3 0100 	ldrd	r0, r1, [r3]
 80024da:	f04f 0200 	mov.w	r2, #0
 80024de:	4b39      	ldr	r3, [pc, #228]	; (80025c4 <func+0x184>)
 80024e0:	f7fe fa6c 	bl	80009bc <__aeabi_dcmplt>
 80024e4:	4603      	mov	r3, r0
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	d018      	beq.n	800251c <func+0xdc>
        setAngle(&kalmanX,roll);
 80024ea:	4b35      	ldr	r3, [pc, #212]	; (80025c0 <func+0x180>)
 80024ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80024f0:	4837      	ldr	r0, [pc, #220]	; (80025d0 <func+0x190>)
 80024f2:	f7fe fe0a 	bl	800110a <setAngle>
        compAngleX = roll;
 80024f6:	4b32      	ldr	r3, [pc, #200]	; (80025c0 <func+0x180>)
 80024f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80024fc:	4935      	ldr	r1, [pc, #212]	; (80025d4 <func+0x194>)
 80024fe:	e9c1 2300 	strd	r2, r3, [r1]
        kalAngleX = roll;
 8002502:	4b2f      	ldr	r3, [pc, #188]	; (80025c0 <func+0x180>)
 8002504:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002508:	492f      	ldr	r1, [pc, #188]	; (80025c8 <func+0x188>)
 800250a:	e9c1 2300 	strd	r2, r3, [r1]
        gyroXangle = roll;
 800250e:	4b2c      	ldr	r3, [pc, #176]	; (80025c0 <func+0x180>)
 8002510:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002514:	4930      	ldr	r1, [pc, #192]	; (80025d8 <func+0x198>)
 8002516:	e9c1 2300 	strd	r2, r3, [r1]
 800251a:	e014      	b.n	8002546 <func+0x106>
    } else
    kalAngleX = getAngle(&kalmanX, roll, gyroXrate, dt); 				// Calculate the angle using a Kalman filter
 800251c:	4b28      	ldr	r3, [pc, #160]	; (80025c0 <func+0x180>)
 800251e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002522:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002526:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800252a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800252e:	e9cd 2300 	strd	r2, r3, [sp]
 8002532:	4602      	mov	r2, r0
 8002534:	460b      	mov	r3, r1
 8002536:	4826      	ldr	r0, [pc, #152]	; (80025d0 <func+0x190>)
 8002538:	f7fe fc8a 	bl	8000e50 <getAngle>
 800253c:	4602      	mov	r2, r0
 800253e:	460b      	mov	r3, r1
 8002540:	4921      	ldr	r1, [pc, #132]	; (80025c8 <func+0x188>)
 8002542:	e9c1 2300 	strd	r2, r3, [r1]

    if (fabs(kalAngleX) > 90)
 8002546:	4b20      	ldr	r3, [pc, #128]	; (80025c8 <func+0x188>)
 8002548:	e9d3 2300 	ldrd	r2, r3, [r3]
 800254c:	4690      	mov	r8, r2
 800254e:	f023 4900 	bic.w	r9, r3, #2147483648	; 0x80000000
 8002552:	f04f 0200 	mov.w	r2, #0
 8002556:	4b1d      	ldr	r3, [pc, #116]	; (80025cc <func+0x18c>)
 8002558:	4640      	mov	r0, r8
 800255a:	4649      	mov	r1, r9
 800255c:	f7fe fa4c 	bl	80009f8 <__aeabi_dcmpgt>
 8002560:	4603      	mov	r3, r0
 8002562:	2b00      	cmp	r3, #0
 8002564:	d005      	beq.n	8002572 <func+0x132>
        gyroYrate = -gyroYrate; 										// Invert rate, so it fits the restricted accelerometer reading
 8002566:	693c      	ldr	r4, [r7, #16]
 8002568:	697b      	ldr	r3, [r7, #20]
 800256a:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 800256e:	e9c7 4504 	strd	r4, r5, [r7, #16]
    kalAngleY = getAngle(&kalmanY,pitch, gyroYrate, dt);
 8002572:	4b1a      	ldr	r3, [pc, #104]	; (80025dc <func+0x19c>)
 8002574:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002578:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800257c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8002580:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8002584:	e9cd 2300 	strd	r2, r3, [sp]
 8002588:	4602      	mov	r2, r0
 800258a:	460b      	mov	r3, r1
 800258c:	4814      	ldr	r0, [pc, #80]	; (80025e0 <func+0x1a0>)
 800258e:	f7fe fc5f 	bl	8000e50 <getAngle>
 8002592:	4602      	mov	r2, r0
 8002594:	460b      	mov	r3, r1
 8002596:	4913      	ldr	r1, [pc, #76]	; (80025e4 <func+0x1a4>)
 8002598:	e9c1 2300 	strd	r2, r3, [r1]
//    if (gyroYangle < -180 || gyroYangle > 180)
//        gyroYangle = kalAngleY;
//    if (gyroZangle < -180 || gyroZangle > 180)
//        gyroZangle = kalAngleZ;

}
 800259c:	bf00      	nop
 800259e:	3718      	adds	r7, #24
 80025a0:	46bd      	mov	sp, r7
 80025a2:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80025a6:	bf00      	nop
 80025a8:	eb851eb8 	.word	0xeb851eb8
 80025ac:	3f9eb851 	.word	0x3f9eb851
 80025b0:	00000000 	.word	0x00000000
 80025b4:	40606000 	.word	0x40606000
 80025b8:	20000544 	.word	0x20000544
 80025bc:	20000548 	.word	0x20000548
 80025c0:	20000550 	.word	0x20000550
 80025c4:	c0568000 	.word	0xc0568000
 80025c8:	20000598 	.word	0x20000598
 80025cc:	40568000 	.word	0x40568000
 80025d0:	200003e8 	.word	0x200003e8
 80025d4:	20000580 	.word	0x20000580
 80025d8:	20000568 	.word	0x20000568
 80025dc:	20000558 	.word	0x20000558
 80025e0:	20000458 	.word	0x20000458
 80025e4:	200005a0 	.word	0x200005a0

080025e8 <HAL_GPIO_EXTI_Callback>:

//=====================================================================================================================
// Joystick control On/Off
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
  {
 80025e8:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80025ec:	b08c      	sub	sp, #48	; 0x30
 80025ee:	af06      	add	r7, sp, #24
 80025f0:	4603      	mov	r3, r0
 80025f2:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == GPIO_PIN_7)
 80025f4:	88fb      	ldrh	r3, [r7, #6]
 80025f6:	2b80      	cmp	r3, #128	; 0x80
 80025f8:	f040 811c 	bne.w	8002834 <HAL_GPIO_EXTI_Callback+0x24c>
		{
		cur_time = __HAL_TIM_GET_COUNTER(&htim2);
 80025fc:	4b90      	ldr	r3, [pc, #576]	; (8002840 <HAL_GPIO_EXTI_Callback+0x258>)
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002602:	461a      	mov	r2, r3
 8002604:	4b8f      	ldr	r3, [pc, #572]	; (8002844 <HAL_GPIO_EXTI_Callback+0x25c>)
 8002606:	601a      	str	r2, [r3, #0]
		if(cur_time - pre_time >= duration)
 8002608:	4b8e      	ldr	r3, [pc, #568]	; (8002844 <HAL_GPIO_EXTI_Callback+0x25c>)
 800260a:	681a      	ldr	r2, [r3, #0]
 800260c:	4b8e      	ldr	r3, [pc, #568]	; (8002848 <HAL_GPIO_EXTI_Callback+0x260>)
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	1ad2      	subs	r2, r2, r3
 8002612:	4b8e      	ldr	r3, [pc, #568]	; (800284c <HAL_GPIO_EXTI_Callback+0x264>)
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	429a      	cmp	r2, r3
 8002618:	f2c0 810c 	blt.w	8002834 <HAL_GPIO_EXTI_Callback+0x24c>
		{
			if(state == 0)
 800261c:	4b8c      	ldr	r3, [pc, #560]	; (8002850 <HAL_GPIO_EXTI_Callback+0x268>)
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	2b00      	cmp	r3, #0
 8002622:	f040 8098 	bne.w	8002756 <HAL_GPIO_EXTI_Callback+0x16e>
			{

				if(step_count_pitch_H > step_count_pitch_L)
 8002626:	4b8b      	ldr	r3, [pc, #556]	; (8002854 <HAL_GPIO_EXTI_Callback+0x26c>)
 8002628:	781a      	ldrb	r2, [r3, #0]
 800262a:	4b8b      	ldr	r3, [pc, #556]	; (8002858 <HAL_GPIO_EXTI_Callback+0x270>)
 800262c:	781b      	ldrb	r3, [r3, #0]
 800262e:	429a      	cmp	r2, r3
 8002630:	d920      	bls.n	8002674 <HAL_GPIO_EXTI_Callback+0x8c>
				{
					for(int i = 0; i<step_count_pitch_H +10  ; i++)
 8002632:	2300      	movs	r3, #0
 8002634:	617b      	str	r3, [r7, #20]
 8002636:	e016      	b.n	8002666 <HAL_GPIO_EXTI_Callback+0x7e>
						{
							stepper_step_angle(1, 0,13, GPIOB, GPIO_PIN_13, GPIO_PIN_14, GPIO_PIN_15, GPIO_PIN_1);
 8002638:	2302      	movs	r3, #2
 800263a:	9304      	str	r3, [sp, #16]
 800263c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002640:	9303      	str	r3, [sp, #12]
 8002642:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002646:	9302      	str	r3, [sp, #8]
 8002648:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800264c:	9301      	str	r3, [sp, #4]
 800264e:	4b83      	ldr	r3, [pc, #524]	; (800285c <HAL_GPIO_EXTI_Callback+0x274>)
 8002650:	9300      	str	r3, [sp, #0]
 8002652:	230d      	movs	r3, #13
 8002654:	2200      	movs	r2, #0
 8002656:	f04f 0000 	mov.w	r0, #0
 800265a:	4981      	ldr	r1, [pc, #516]	; (8002860 <HAL_GPIO_EXTI_Callback+0x278>)
 800265c:	f7ff f8ca 	bl	80017f4 <stepper_step_angle>
					for(int i = 0; i<step_count_pitch_H +10  ; i++)
 8002660:	697b      	ldr	r3, [r7, #20]
 8002662:	3301      	adds	r3, #1
 8002664:	617b      	str	r3, [r7, #20]
 8002666:	4b7b      	ldr	r3, [pc, #492]	; (8002854 <HAL_GPIO_EXTI_Callback+0x26c>)
 8002668:	781b      	ldrb	r3, [r3, #0]
 800266a:	3309      	adds	r3, #9
 800266c:	697a      	ldr	r2, [r7, #20]
 800266e:	429a      	cmp	r2, r3
 8002670:	dde2      	ble.n	8002638 <HAL_GPIO_EXTI_Callback+0x50>
 8002672:	e01f      	b.n	80026b4 <HAL_GPIO_EXTI_Callback+0xcc>
						}
				}
				else
				{
					for(int i = 0; i <step_count_pitch_L+10;i++)
 8002674:	2300      	movs	r3, #0
 8002676:	613b      	str	r3, [r7, #16]
 8002678:	e016      	b.n	80026a8 <HAL_GPIO_EXTI_Callback+0xc0>
					{
						stepper_step_angle(1, 1,13, GPIOB, GPIO_PIN_13, GPIO_PIN_14, GPIO_PIN_15, GPIO_PIN_1);
 800267a:	2302      	movs	r3, #2
 800267c:	9304      	str	r3, [sp, #16]
 800267e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002682:	9303      	str	r3, [sp, #12]
 8002684:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002688:	9302      	str	r3, [sp, #8]
 800268a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800268e:	9301      	str	r3, [sp, #4]
 8002690:	4b72      	ldr	r3, [pc, #456]	; (800285c <HAL_GPIO_EXTI_Callback+0x274>)
 8002692:	9300      	str	r3, [sp, #0]
 8002694:	230d      	movs	r3, #13
 8002696:	2201      	movs	r2, #1
 8002698:	f04f 0000 	mov.w	r0, #0
 800269c:	4970      	ldr	r1, [pc, #448]	; (8002860 <HAL_GPIO_EXTI_Callback+0x278>)
 800269e:	f7ff f8a9 	bl	80017f4 <stepper_step_angle>
					for(int i = 0; i <step_count_pitch_L+10;i++)
 80026a2:	693b      	ldr	r3, [r7, #16]
 80026a4:	3301      	adds	r3, #1
 80026a6:	613b      	str	r3, [r7, #16]
 80026a8:	4b6b      	ldr	r3, [pc, #428]	; (8002858 <HAL_GPIO_EXTI_Callback+0x270>)
 80026aa:	781b      	ldrb	r3, [r3, #0]
 80026ac:	3309      	adds	r3, #9
 80026ae:	693a      	ldr	r2, [r7, #16]
 80026b0:	429a      	cmp	r2, r3
 80026b2:	dde2      	ble.n	800267a <HAL_GPIO_EXTI_Callback+0x92>
					}
				}

				if(step_count_roll_H > step_count_roll_L)
 80026b4:	4b6b      	ldr	r3, [pc, #428]	; (8002864 <HAL_GPIO_EXTI_Callback+0x27c>)
 80026b6:	781a      	ldrb	r2, [r3, #0]
 80026b8:	4b6b      	ldr	r3, [pc, #428]	; (8002868 <HAL_GPIO_EXTI_Callback+0x280>)
 80026ba:	781b      	ldrb	r3, [r3, #0]
 80026bc:	429a      	cmp	r2, r3
 80026be:	d91d      	bls.n	80026fc <HAL_GPIO_EXTI_Callback+0x114>
				{

					for(int i = 0; i<step_count_roll_H; i++)
 80026c0:	2300      	movs	r3, #0
 80026c2:	60fb      	str	r3, [r7, #12]
 80026c4:	e013      	b.n	80026ee <HAL_GPIO_EXTI_Callback+0x106>
					{
						stepper_step_angle(1, 0, 13, GPIOC, GPIO_PIN_0, GPIO_PIN_1, GPIO_PIN_2, GPIO_PIN_3);
 80026c6:	2308      	movs	r3, #8
 80026c8:	9304      	str	r3, [sp, #16]
 80026ca:	2304      	movs	r3, #4
 80026cc:	9303      	str	r3, [sp, #12]
 80026ce:	2302      	movs	r3, #2
 80026d0:	9302      	str	r3, [sp, #8]
 80026d2:	2301      	movs	r3, #1
 80026d4:	9301      	str	r3, [sp, #4]
 80026d6:	4b65      	ldr	r3, [pc, #404]	; (800286c <HAL_GPIO_EXTI_Callback+0x284>)
 80026d8:	9300      	str	r3, [sp, #0]
 80026da:	230d      	movs	r3, #13
 80026dc:	2200      	movs	r2, #0
 80026de:	f04f 0000 	mov.w	r0, #0
 80026e2:	495f      	ldr	r1, [pc, #380]	; (8002860 <HAL_GPIO_EXTI_Callback+0x278>)
 80026e4:	f7ff f886 	bl	80017f4 <stepper_step_angle>
					for(int i = 0; i<step_count_roll_H; i++)
 80026e8:	68fb      	ldr	r3, [r7, #12]
 80026ea:	3301      	adds	r3, #1
 80026ec:	60fb      	str	r3, [r7, #12]
 80026ee:	4b5d      	ldr	r3, [pc, #372]	; (8002864 <HAL_GPIO_EXTI_Callback+0x27c>)
 80026f0:	781b      	ldrb	r3, [r3, #0]
 80026f2:	461a      	mov	r2, r3
 80026f4:	68fb      	ldr	r3, [r7, #12]
 80026f6:	4293      	cmp	r3, r2
 80026f8:	dbe5      	blt.n	80026c6 <HAL_GPIO_EXTI_Callback+0xde>
 80026fa:	e01c      	b.n	8002736 <HAL_GPIO_EXTI_Callback+0x14e>
					}
				}
				else
				{
					for(int i = 0 ; i<step_count_roll_L;i++)
 80026fc:	2300      	movs	r3, #0
 80026fe:	60bb      	str	r3, [r7, #8]
 8002700:	e013      	b.n	800272a <HAL_GPIO_EXTI_Callback+0x142>
					{
						stepper_step_angle(1, 1, 13, GPIOC, GPIO_PIN_0, GPIO_PIN_1, GPIO_PIN_2, GPIO_PIN_3);
 8002702:	2308      	movs	r3, #8
 8002704:	9304      	str	r3, [sp, #16]
 8002706:	2304      	movs	r3, #4
 8002708:	9303      	str	r3, [sp, #12]
 800270a:	2302      	movs	r3, #2
 800270c:	9302      	str	r3, [sp, #8]
 800270e:	2301      	movs	r3, #1
 8002710:	9301      	str	r3, [sp, #4]
 8002712:	4b56      	ldr	r3, [pc, #344]	; (800286c <HAL_GPIO_EXTI_Callback+0x284>)
 8002714:	9300      	str	r3, [sp, #0]
 8002716:	230d      	movs	r3, #13
 8002718:	2201      	movs	r2, #1
 800271a:	f04f 0000 	mov.w	r0, #0
 800271e:	4950      	ldr	r1, [pc, #320]	; (8002860 <HAL_GPIO_EXTI_Callback+0x278>)
 8002720:	f7ff f868 	bl	80017f4 <stepper_step_angle>
					for(int i = 0 ; i<step_count_roll_L;i++)
 8002724:	68bb      	ldr	r3, [r7, #8]
 8002726:	3301      	adds	r3, #1
 8002728:	60bb      	str	r3, [r7, #8]
 800272a:	4b4f      	ldr	r3, [pc, #316]	; (8002868 <HAL_GPIO_EXTI_Callback+0x280>)
 800272c:	781b      	ldrb	r3, [r3, #0]
 800272e:	461a      	mov	r2, r3
 8002730:	68bb      	ldr	r3, [r7, #8]
 8002732:	4293      	cmp	r3, r2
 8002734:	dbe5      	blt.n	8002702 <HAL_GPIO_EXTI_Callback+0x11a>
					}

				}

				step_count_pitch_H = 0;
 8002736:	4b47      	ldr	r3, [pc, #284]	; (8002854 <HAL_GPIO_EXTI_Callback+0x26c>)
 8002738:	2200      	movs	r2, #0
 800273a:	701a      	strb	r2, [r3, #0]
				step_count_pitch_L = 0;
 800273c:	4b46      	ldr	r3, [pc, #280]	; (8002858 <HAL_GPIO_EXTI_Callback+0x270>)
 800273e:	2200      	movs	r2, #0
 8002740:	701a      	strb	r2, [r3, #0]
				step_count_roll_H = 0;
 8002742:	4b48      	ldr	r3, [pc, #288]	; (8002864 <HAL_GPIO_EXTI_Callback+0x27c>)
 8002744:	2200      	movs	r2, #0
 8002746:	701a      	strb	r2, [r3, #0]
				step_count_roll_L = 0;
 8002748:	4b47      	ldr	r3, [pc, #284]	; (8002868 <HAL_GPIO_EXTI_Callback+0x280>)
 800274a:	2200      	movs	r2, #0
 800274c:	701a      	strb	r2, [r3, #0]
				state = 1;
 800274e:	4b40      	ldr	r3, [pc, #256]	; (8002850 <HAL_GPIO_EXTI_Callback+0x268>)
 8002750:	2201      	movs	r2, #1
 8002752:	601a      	str	r2, [r3, #0]
 8002754:	e06a      	b.n	800282c <HAL_GPIO_EXTI_Callback+0x244>
			}
			else if(state == 1)
 8002756:	4b3e      	ldr	r3, [pc, #248]	; (8002850 <HAL_GPIO_EXTI_Callback+0x268>)
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	2b01      	cmp	r3, #1
 800275c:	d166      	bne.n	800282c <HAL_GPIO_EXTI_Callback+0x244>
			{

				if(kalAngleX > 0)
 800275e:	4b44      	ldr	r3, [pc, #272]	; (8002870 <HAL_GPIO_EXTI_Callback+0x288>)
 8002760:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002764:	f04f 0200 	mov.w	r2, #0
 8002768:	f04f 0300 	mov.w	r3, #0
 800276c:	f7fe f944 	bl	80009f8 <__aeabi_dcmpgt>
 8002770:	4603      	mov	r3, r0
 8002772:	2b00      	cmp	r3, #0
 8002774:	d00b      	beq.n	800278e <HAL_GPIO_EXTI_Callback+0x1a6>
				{
					step_count_roll_H = kalAngleX;
 8002776:	4b3e      	ldr	r3, [pc, #248]	; (8002870 <HAL_GPIO_EXTI_Callback+0x288>)
 8002778:	e9d3 2300 	ldrd	r2, r3, [r3]
 800277c:	4610      	mov	r0, r2
 800277e:	4619      	mov	r1, r3
 8002780:	f7fe f982 	bl	8000a88 <__aeabi_d2uiz>
 8002784:	4603      	mov	r3, r0
 8002786:	b2da      	uxtb	r2, r3
 8002788:	4b36      	ldr	r3, [pc, #216]	; (8002864 <HAL_GPIO_EXTI_Callback+0x27c>)
 800278a:	701a      	strb	r2, [r3, #0]
 800278c:	e019      	b.n	80027c2 <HAL_GPIO_EXTI_Callback+0x1da>
				}
				else if(kalAngleX < 0)
 800278e:	4b38      	ldr	r3, [pc, #224]	; (8002870 <HAL_GPIO_EXTI_Callback+0x288>)
 8002790:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002794:	f04f 0200 	mov.w	r2, #0
 8002798:	f04f 0300 	mov.w	r3, #0
 800279c:	f7fe f90e 	bl	80009bc <__aeabi_dcmplt>
 80027a0:	4603      	mov	r3, r0
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	d00d      	beq.n	80027c2 <HAL_GPIO_EXTI_Callback+0x1da>
				{
					step_count_roll_L = kalAngleX *(-1);
 80027a6:	4b32      	ldr	r3, [pc, #200]	; (8002870 <HAL_GPIO_EXTI_Callback+0x288>)
 80027a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80027ac:	4690      	mov	r8, r2
 80027ae:	f083 4900 	eor.w	r9, r3, #2147483648	; 0x80000000
 80027b2:	4640      	mov	r0, r8
 80027b4:	4649      	mov	r1, r9
 80027b6:	f7fe f967 	bl	8000a88 <__aeabi_d2uiz>
 80027ba:	4603      	mov	r3, r0
 80027bc:	b2da      	uxtb	r2, r3
 80027be:	4b2a      	ldr	r3, [pc, #168]	; (8002868 <HAL_GPIO_EXTI_Callback+0x280>)
 80027c0:	701a      	strb	r2, [r3, #0]
				}
				if(kalAngleY > 0)
 80027c2:	4b2c      	ldr	r3, [pc, #176]	; (8002874 <HAL_GPIO_EXTI_Callback+0x28c>)
 80027c4:	e9d3 0100 	ldrd	r0, r1, [r3]
 80027c8:	f04f 0200 	mov.w	r2, #0
 80027cc:	f04f 0300 	mov.w	r3, #0
 80027d0:	f7fe f912 	bl	80009f8 <__aeabi_dcmpgt>
 80027d4:	4603      	mov	r3, r0
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	d00b      	beq.n	80027f2 <HAL_GPIO_EXTI_Callback+0x20a>
				{
					step_count_pitch_H = kalAngleY;
 80027da:	4b26      	ldr	r3, [pc, #152]	; (8002874 <HAL_GPIO_EXTI_Callback+0x28c>)
 80027dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80027e0:	4610      	mov	r0, r2
 80027e2:	4619      	mov	r1, r3
 80027e4:	f7fe f950 	bl	8000a88 <__aeabi_d2uiz>
 80027e8:	4603      	mov	r3, r0
 80027ea:	b2da      	uxtb	r2, r3
 80027ec:	4b19      	ldr	r3, [pc, #100]	; (8002854 <HAL_GPIO_EXTI_Callback+0x26c>)
 80027ee:	701a      	strb	r2, [r3, #0]
 80027f0:	e019      	b.n	8002826 <HAL_GPIO_EXTI_Callback+0x23e>
				}
				else if(kalAngleY < 0)
 80027f2:	4b20      	ldr	r3, [pc, #128]	; (8002874 <HAL_GPIO_EXTI_Callback+0x28c>)
 80027f4:	e9d3 0100 	ldrd	r0, r1, [r3]
 80027f8:	f04f 0200 	mov.w	r2, #0
 80027fc:	f04f 0300 	mov.w	r3, #0
 8002800:	f7fe f8dc 	bl	80009bc <__aeabi_dcmplt>
 8002804:	4603      	mov	r3, r0
 8002806:	2b00      	cmp	r3, #0
 8002808:	d00d      	beq.n	8002826 <HAL_GPIO_EXTI_Callback+0x23e>
				{
					step_count_pitch_L = kalAngleY * (-1);
 800280a:	4b1a      	ldr	r3, [pc, #104]	; (8002874 <HAL_GPIO_EXTI_Callback+0x28c>)
 800280c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002810:	4614      	mov	r4, r2
 8002812:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 8002816:	4620      	mov	r0, r4
 8002818:	4629      	mov	r1, r5
 800281a:	f7fe f935 	bl	8000a88 <__aeabi_d2uiz>
 800281e:	4603      	mov	r3, r0
 8002820:	b2da      	uxtb	r2, r3
 8002822:	4b0d      	ldr	r3, [pc, #52]	; (8002858 <HAL_GPIO_EXTI_Callback+0x270>)
 8002824:	701a      	strb	r2, [r3, #0]
				}
				state = 0;
 8002826:	4b0a      	ldr	r3, [pc, #40]	; (8002850 <HAL_GPIO_EXTI_Callback+0x268>)
 8002828:	2200      	movs	r2, #0
 800282a:	601a      	str	r2, [r3, #0]
			}

			__HAL_TIM_SET_COUNTER(&htim2, 0);
 800282c:	4b04      	ldr	r3, [pc, #16]	; (8002840 <HAL_GPIO_EXTI_Callback+0x258>)
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	2200      	movs	r2, #0
 8002832:	625a      	str	r2, [r3, #36]	; 0x24
		}
	}
  }
 8002834:	bf00      	nop
 8002836:	3718      	adds	r7, #24
 8002838:	46bd      	mov	sp, r7
 800283a:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800283e:	bf00      	nop
 8002840:	20000314 	.word	0x20000314
 8002844:	200005b4 	.word	0x200005b4
 8002848:	200005b0 	.word	0x200005b0
 800284c:	20000000 	.word	0x20000000
 8002850:	200005c4 	.word	0x200005c4
 8002854:	200005c9 	.word	0x200005c9
 8002858:	200005c8 	.word	0x200005c8
 800285c:	40010c00 	.word	0x40010c00
 8002860:	3ff00000 	.word	0x3ff00000
 8002864:	200005cb 	.word	0x200005cb
 8002868:	200005ca 	.word	0x200005ca
 800286c:	40011000 	.word	0x40011000
 8002870:	20000598 	.word	0x20000598
 8002874:	200005a0 	.word	0x200005a0

08002878 <HAL_TIM_PeriodElapsedCallback>:


//=====================================================================================================================
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) // Kalman calc
{
 8002878:	b480      	push	{r7}
 800287a:	b083      	sub	sp, #12
 800287c:	af00      	add	r7, sp, #0
 800287e:	6078      	str	r0, [r7, #4]
	time_count++;
 8002880:	4b04      	ldr	r3, [pc, #16]	; (8002894 <HAL_TIM_PeriodElapsedCallback+0x1c>)
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	3301      	adds	r3, #1
 8002886:	4a03      	ldr	r2, [pc, #12]	; (8002894 <HAL_TIM_PeriodElapsedCallback+0x1c>)
 8002888:	6013      	str	r3, [r2, #0]
}
 800288a:	bf00      	nop
 800288c:	370c      	adds	r7, #12
 800288e:	46bd      	mov	sp, r7
 8002890:	bc80      	pop	{r7}
 8002892:	4770      	bx	lr
 8002894:	200005ac 	.word	0x200005ac

08002898 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002898:	b480      	push	{r7}
 800289a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800289c:	b672      	cpsid	i
}
 800289e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80028a0:	e7fe      	b.n	80028a0 <Error_Handler+0x8>
	...

080028a4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80028a4:	b480      	push	{r7}
 80028a6:	b085      	sub	sp, #20
 80028a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80028aa:	4b15      	ldr	r3, [pc, #84]	; (8002900 <HAL_MspInit+0x5c>)
 80028ac:	699b      	ldr	r3, [r3, #24]
 80028ae:	4a14      	ldr	r2, [pc, #80]	; (8002900 <HAL_MspInit+0x5c>)
 80028b0:	f043 0301 	orr.w	r3, r3, #1
 80028b4:	6193      	str	r3, [r2, #24]
 80028b6:	4b12      	ldr	r3, [pc, #72]	; (8002900 <HAL_MspInit+0x5c>)
 80028b8:	699b      	ldr	r3, [r3, #24]
 80028ba:	f003 0301 	and.w	r3, r3, #1
 80028be:	60bb      	str	r3, [r7, #8]
 80028c0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80028c2:	4b0f      	ldr	r3, [pc, #60]	; (8002900 <HAL_MspInit+0x5c>)
 80028c4:	69db      	ldr	r3, [r3, #28]
 80028c6:	4a0e      	ldr	r2, [pc, #56]	; (8002900 <HAL_MspInit+0x5c>)
 80028c8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80028cc:	61d3      	str	r3, [r2, #28]
 80028ce:	4b0c      	ldr	r3, [pc, #48]	; (8002900 <HAL_MspInit+0x5c>)
 80028d0:	69db      	ldr	r3, [r3, #28]
 80028d2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80028d6:	607b      	str	r3, [r7, #4]
 80028d8:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80028da:	4b0a      	ldr	r3, [pc, #40]	; (8002904 <HAL_MspInit+0x60>)
 80028dc:	685b      	ldr	r3, [r3, #4]
 80028de:	60fb      	str	r3, [r7, #12]
 80028e0:	68fb      	ldr	r3, [r7, #12]
 80028e2:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80028e6:	60fb      	str	r3, [r7, #12]
 80028e8:	68fb      	ldr	r3, [r7, #12]
 80028ea:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80028ee:	60fb      	str	r3, [r7, #12]
 80028f0:	4a04      	ldr	r2, [pc, #16]	; (8002904 <HAL_MspInit+0x60>)
 80028f2:	68fb      	ldr	r3, [r7, #12]
 80028f4:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80028f6:	bf00      	nop
 80028f8:	3714      	adds	r7, #20
 80028fa:	46bd      	mov	sp, r7
 80028fc:	bc80      	pop	{r7}
 80028fe:	4770      	bx	lr
 8002900:	40021000 	.word	0x40021000
 8002904:	40010000 	.word	0x40010000

08002908 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002908:	b580      	push	{r7, lr}
 800290a:	b088      	sub	sp, #32
 800290c:	af00      	add	r7, sp, #0
 800290e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002910:	f107 0310 	add.w	r3, r7, #16
 8002914:	2200      	movs	r2, #0
 8002916:	601a      	str	r2, [r3, #0]
 8002918:	605a      	str	r2, [r3, #4]
 800291a:	609a      	str	r2, [r3, #8]
 800291c:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	4a2c      	ldr	r2, [pc, #176]	; (80029d4 <HAL_ADC_MspInit+0xcc>)
 8002924:	4293      	cmp	r3, r2
 8002926:	d151      	bne.n	80029cc <HAL_ADC_MspInit+0xc4>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8002928:	4b2b      	ldr	r3, [pc, #172]	; (80029d8 <HAL_ADC_MspInit+0xd0>)
 800292a:	699b      	ldr	r3, [r3, #24]
 800292c:	4a2a      	ldr	r2, [pc, #168]	; (80029d8 <HAL_ADC_MspInit+0xd0>)
 800292e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002932:	6193      	str	r3, [r2, #24]
 8002934:	4b28      	ldr	r3, [pc, #160]	; (80029d8 <HAL_ADC_MspInit+0xd0>)
 8002936:	699b      	ldr	r3, [r3, #24]
 8002938:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800293c:	60fb      	str	r3, [r7, #12]
 800293e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002940:	4b25      	ldr	r3, [pc, #148]	; (80029d8 <HAL_ADC_MspInit+0xd0>)
 8002942:	699b      	ldr	r3, [r3, #24]
 8002944:	4a24      	ldr	r2, [pc, #144]	; (80029d8 <HAL_ADC_MspInit+0xd0>)
 8002946:	f043 0304 	orr.w	r3, r3, #4
 800294a:	6193      	str	r3, [r2, #24]
 800294c:	4b22      	ldr	r3, [pc, #136]	; (80029d8 <HAL_ADC_MspInit+0xd0>)
 800294e:	699b      	ldr	r3, [r3, #24]
 8002950:	f003 0304 	and.w	r3, r3, #4
 8002954:	60bb      	str	r3, [r7, #8]
 8002956:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA6     ------> ADC1_IN6
    PA7     ------> ADC1_IN7
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002958:	23c0      	movs	r3, #192	; 0xc0
 800295a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800295c:	2303      	movs	r3, #3
 800295e:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002960:	f107 0310 	add.w	r3, r7, #16
 8002964:	4619      	mov	r1, r3
 8002966:	481d      	ldr	r0, [pc, #116]	; (80029dc <HAL_ADC_MspInit+0xd4>)
 8002968:	f001 fa80 	bl	8003e6c <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 800296c:	4b1c      	ldr	r3, [pc, #112]	; (80029e0 <HAL_ADC_MspInit+0xd8>)
 800296e:	4a1d      	ldr	r2, [pc, #116]	; (80029e4 <HAL_ADC_MspInit+0xdc>)
 8002970:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002972:	4b1b      	ldr	r3, [pc, #108]	; (80029e0 <HAL_ADC_MspInit+0xd8>)
 8002974:	2200      	movs	r2, #0
 8002976:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8002978:	4b19      	ldr	r3, [pc, #100]	; (80029e0 <HAL_ADC_MspInit+0xd8>)
 800297a:	2200      	movs	r2, #0
 800297c:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800297e:	4b18      	ldr	r3, [pc, #96]	; (80029e0 <HAL_ADC_MspInit+0xd8>)
 8002980:	2280      	movs	r2, #128	; 0x80
 8002982:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8002984:	4b16      	ldr	r3, [pc, #88]	; (80029e0 <HAL_ADC_MspInit+0xd8>)
 8002986:	f44f 7200 	mov.w	r2, #512	; 0x200
 800298a:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800298c:	4b14      	ldr	r3, [pc, #80]	; (80029e0 <HAL_ADC_MspInit+0xd8>)
 800298e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002992:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8002994:	4b12      	ldr	r3, [pc, #72]	; (80029e0 <HAL_ADC_MspInit+0xd8>)
 8002996:	2220      	movs	r2, #32
 8002998:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 800299a:	4b11      	ldr	r3, [pc, #68]	; (80029e0 <HAL_ADC_MspInit+0xd8>)
 800299c:	2200      	movs	r2, #0
 800299e:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80029a0:	480f      	ldr	r0, [pc, #60]	; (80029e0 <HAL_ADC_MspInit+0xd8>)
 80029a2:	f001 f875 	bl	8003a90 <HAL_DMA_Init>
 80029a6:	4603      	mov	r3, r0
 80029a8:	2b00      	cmp	r3, #0
 80029aa:	d001      	beq.n	80029b0 <HAL_ADC_MspInit+0xa8>
    {
      Error_Handler();
 80029ac:	f7ff ff74 	bl	8002898 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	4a0b      	ldr	r2, [pc, #44]	; (80029e0 <HAL_ADC_MspInit+0xd8>)
 80029b4:	621a      	str	r2, [r3, #32]
 80029b6:	4a0a      	ldr	r2, [pc, #40]	; (80029e0 <HAL_ADC_MspInit+0xd8>)
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	6253      	str	r3, [r2, #36]	; 0x24

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 80029bc:	2200      	movs	r2, #0
 80029be:	2100      	movs	r1, #0
 80029c0:	2012      	movs	r0, #18
 80029c2:	f001 f82e 	bl	8003a22 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 80029c6:	2012      	movs	r0, #18
 80029c8:	f001 f847 	bl	8003a5a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80029cc:	bf00      	nop
 80029ce:	3720      	adds	r7, #32
 80029d0:	46bd      	mov	sp, r7
 80029d2:	bd80      	pop	{r7, pc}
 80029d4:	40012400 	.word	0x40012400
 80029d8:	40021000 	.word	0x40021000
 80029dc:	40010800 	.word	0x40010800
 80029e0:	20000234 	.word	0x20000234
 80029e4:	40020008 	.word	0x40020008

080029e8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80029e8:	b580      	push	{r7, lr}
 80029ea:	b08a      	sub	sp, #40	; 0x28
 80029ec:	af00      	add	r7, sp, #0
 80029ee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80029f0:	f107 0314 	add.w	r3, r7, #20
 80029f4:	2200      	movs	r2, #0
 80029f6:	601a      	str	r2, [r3, #0]
 80029f8:	605a      	str	r2, [r3, #4]
 80029fa:	609a      	str	r2, [r3, #8]
 80029fc:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	4a1d      	ldr	r2, [pc, #116]	; (8002a78 <HAL_I2C_MspInit+0x90>)
 8002a04:	4293      	cmp	r3, r2
 8002a06:	d132      	bne.n	8002a6e <HAL_I2C_MspInit+0x86>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002a08:	4b1c      	ldr	r3, [pc, #112]	; (8002a7c <HAL_I2C_MspInit+0x94>)
 8002a0a:	699b      	ldr	r3, [r3, #24]
 8002a0c:	4a1b      	ldr	r2, [pc, #108]	; (8002a7c <HAL_I2C_MspInit+0x94>)
 8002a0e:	f043 0308 	orr.w	r3, r3, #8
 8002a12:	6193      	str	r3, [r2, #24]
 8002a14:	4b19      	ldr	r3, [pc, #100]	; (8002a7c <HAL_I2C_MspInit+0x94>)
 8002a16:	699b      	ldr	r3, [r3, #24]
 8002a18:	f003 0308 	and.w	r3, r3, #8
 8002a1c:	613b      	str	r3, [r7, #16]
 8002a1e:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8002a20:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002a24:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002a26:	2312      	movs	r3, #18
 8002a28:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002a2a:	2303      	movs	r3, #3
 8002a2c:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002a2e:	f107 0314 	add.w	r3, r7, #20
 8002a32:	4619      	mov	r1, r3
 8002a34:	4812      	ldr	r0, [pc, #72]	; (8002a80 <HAL_I2C_MspInit+0x98>)
 8002a36:	f001 fa19 	bl	8003e6c <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_I2C1_ENABLE();
 8002a3a:	4b12      	ldr	r3, [pc, #72]	; (8002a84 <HAL_I2C_MspInit+0x9c>)
 8002a3c:	685b      	ldr	r3, [r3, #4]
 8002a3e:	627b      	str	r3, [r7, #36]	; 0x24
 8002a40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a42:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8002a46:	627b      	str	r3, [r7, #36]	; 0x24
 8002a48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a4a:	f043 0302 	orr.w	r3, r3, #2
 8002a4e:	627b      	str	r3, [r7, #36]	; 0x24
 8002a50:	4a0c      	ldr	r2, [pc, #48]	; (8002a84 <HAL_I2C_MspInit+0x9c>)
 8002a52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a54:	6053      	str	r3, [r2, #4]

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002a56:	4b09      	ldr	r3, [pc, #36]	; (8002a7c <HAL_I2C_MspInit+0x94>)
 8002a58:	69db      	ldr	r3, [r3, #28]
 8002a5a:	4a08      	ldr	r2, [pc, #32]	; (8002a7c <HAL_I2C_MspInit+0x94>)
 8002a5c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002a60:	61d3      	str	r3, [r2, #28]
 8002a62:	4b06      	ldr	r3, [pc, #24]	; (8002a7c <HAL_I2C_MspInit+0x94>)
 8002a64:	69db      	ldr	r3, [r3, #28]
 8002a66:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002a6a:	60fb      	str	r3, [r7, #12]
 8002a6c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8002a6e:	bf00      	nop
 8002a70:	3728      	adds	r7, #40	; 0x28
 8002a72:	46bd      	mov	sp, r7
 8002a74:	bd80      	pop	{r7, pc}
 8002a76:	bf00      	nop
 8002a78:	40005400 	.word	0x40005400
 8002a7c:	40021000 	.word	0x40021000
 8002a80:	40010c00 	.word	0x40010c00
 8002a84:	40010000 	.word	0x40010000

08002a88 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002a88:	b580      	push	{r7, lr}
 8002a8a:	b086      	sub	sp, #24
 8002a8c:	af00      	add	r7, sp, #0
 8002a8e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	4a1f      	ldr	r2, [pc, #124]	; (8002b14 <HAL_TIM_Base_MspInit+0x8c>)
 8002a96:	4293      	cmp	r3, r2
 8002a98:	d10c      	bne.n	8002ab4 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002a9a:	4b1f      	ldr	r3, [pc, #124]	; (8002b18 <HAL_TIM_Base_MspInit+0x90>)
 8002a9c:	699b      	ldr	r3, [r3, #24]
 8002a9e:	4a1e      	ldr	r2, [pc, #120]	; (8002b18 <HAL_TIM_Base_MspInit+0x90>)
 8002aa0:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002aa4:	6193      	str	r3, [r2, #24]
 8002aa6:	4b1c      	ldr	r3, [pc, #112]	; (8002b18 <HAL_TIM_Base_MspInit+0x90>)
 8002aa8:	699b      	ldr	r3, [r3, #24]
 8002aaa:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002aae:	617b      	str	r3, [r7, #20]
 8002ab0:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8002ab2:	e02a      	b.n	8002b0a <HAL_TIM_Base_MspInit+0x82>
  else if(htim_base->Instance==TIM2)
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002abc:	d10c      	bne.n	8002ad8 <HAL_TIM_Base_MspInit+0x50>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002abe:	4b16      	ldr	r3, [pc, #88]	; (8002b18 <HAL_TIM_Base_MspInit+0x90>)
 8002ac0:	69db      	ldr	r3, [r3, #28]
 8002ac2:	4a15      	ldr	r2, [pc, #84]	; (8002b18 <HAL_TIM_Base_MspInit+0x90>)
 8002ac4:	f043 0301 	orr.w	r3, r3, #1
 8002ac8:	61d3      	str	r3, [r2, #28]
 8002aca:	4b13      	ldr	r3, [pc, #76]	; (8002b18 <HAL_TIM_Base_MspInit+0x90>)
 8002acc:	69db      	ldr	r3, [r3, #28]
 8002ace:	f003 0301 	and.w	r3, r3, #1
 8002ad2:	613b      	str	r3, [r7, #16]
 8002ad4:	693b      	ldr	r3, [r7, #16]
}
 8002ad6:	e018      	b.n	8002b0a <HAL_TIM_Base_MspInit+0x82>
  else if(htim_base->Instance==TIM3)
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	4a0f      	ldr	r2, [pc, #60]	; (8002b1c <HAL_TIM_Base_MspInit+0x94>)
 8002ade:	4293      	cmp	r3, r2
 8002ae0:	d113      	bne.n	8002b0a <HAL_TIM_Base_MspInit+0x82>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002ae2:	4b0d      	ldr	r3, [pc, #52]	; (8002b18 <HAL_TIM_Base_MspInit+0x90>)
 8002ae4:	69db      	ldr	r3, [r3, #28]
 8002ae6:	4a0c      	ldr	r2, [pc, #48]	; (8002b18 <HAL_TIM_Base_MspInit+0x90>)
 8002ae8:	f043 0302 	orr.w	r3, r3, #2
 8002aec:	61d3      	str	r3, [r2, #28]
 8002aee:	4b0a      	ldr	r3, [pc, #40]	; (8002b18 <HAL_TIM_Base_MspInit+0x90>)
 8002af0:	69db      	ldr	r3, [r3, #28]
 8002af2:	f003 0302 	and.w	r3, r3, #2
 8002af6:	60fb      	str	r3, [r7, #12]
 8002af8:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8002afa:	2200      	movs	r2, #0
 8002afc:	2100      	movs	r1, #0
 8002afe:	201d      	movs	r0, #29
 8002b00:	f000 ff8f 	bl	8003a22 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8002b04:	201d      	movs	r0, #29
 8002b06:	f000 ffa8 	bl	8003a5a <HAL_NVIC_EnableIRQ>
}
 8002b0a:	bf00      	nop
 8002b0c:	3718      	adds	r7, #24
 8002b0e:	46bd      	mov	sp, r7
 8002b10:	bd80      	pop	{r7, pc}
 8002b12:	bf00      	nop
 8002b14:	40012c00 	.word	0x40012c00
 8002b18:	40021000 	.word	0x40021000
 8002b1c:	40000400 	.word	0x40000400

08002b20 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002b20:	b580      	push	{r7, lr}
 8002b22:	b088      	sub	sp, #32
 8002b24:	af00      	add	r7, sp, #0
 8002b26:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002b28:	f107 0310 	add.w	r3, r7, #16
 8002b2c:	2200      	movs	r2, #0
 8002b2e:	601a      	str	r2, [r3, #0]
 8002b30:	605a      	str	r2, [r3, #4]
 8002b32:	609a      	str	r2, [r3, #8]
 8002b34:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	4a15      	ldr	r2, [pc, #84]	; (8002b90 <HAL_UART_MspInit+0x70>)
 8002b3c:	4293      	cmp	r3, r2
 8002b3e:	d123      	bne.n	8002b88 <HAL_UART_MspInit+0x68>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002b40:	4b14      	ldr	r3, [pc, #80]	; (8002b94 <HAL_UART_MspInit+0x74>)
 8002b42:	69db      	ldr	r3, [r3, #28]
 8002b44:	4a13      	ldr	r2, [pc, #76]	; (8002b94 <HAL_UART_MspInit+0x74>)
 8002b46:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002b4a:	61d3      	str	r3, [r2, #28]
 8002b4c:	4b11      	ldr	r3, [pc, #68]	; (8002b94 <HAL_UART_MspInit+0x74>)
 8002b4e:	69db      	ldr	r3, [r3, #28]
 8002b50:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b54:	60fb      	str	r3, [r7, #12]
 8002b56:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002b58:	4b0e      	ldr	r3, [pc, #56]	; (8002b94 <HAL_UART_MspInit+0x74>)
 8002b5a:	699b      	ldr	r3, [r3, #24]
 8002b5c:	4a0d      	ldr	r2, [pc, #52]	; (8002b94 <HAL_UART_MspInit+0x74>)
 8002b5e:	f043 0304 	orr.w	r3, r3, #4
 8002b62:	6193      	str	r3, [r2, #24]
 8002b64:	4b0b      	ldr	r3, [pc, #44]	; (8002b94 <HAL_UART_MspInit+0x74>)
 8002b66:	699b      	ldr	r3, [r3, #24]
 8002b68:	f003 0304 	and.w	r3, r3, #4
 8002b6c:	60bb      	str	r3, [r7, #8]
 8002b6e:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8002b70:	230c      	movs	r3, #12
 8002b72:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b74:	2302      	movs	r3, #2
 8002b76:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b78:	2302      	movs	r3, #2
 8002b7a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002b7c:	f107 0310 	add.w	r3, r7, #16
 8002b80:	4619      	mov	r1, r3
 8002b82:	4805      	ldr	r0, [pc, #20]	; (8002b98 <HAL_UART_MspInit+0x78>)
 8002b84:	f001 f972 	bl	8003e6c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8002b88:	bf00      	nop
 8002b8a:	3720      	adds	r7, #32
 8002b8c:	46bd      	mov	sp, r7
 8002b8e:	bd80      	pop	{r7, pc}
 8002b90:	40004400 	.word	0x40004400
 8002b94:	40021000 	.word	0x40021000
 8002b98:	40010800 	.word	0x40010800

08002b9c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002b9c:	b480      	push	{r7}
 8002b9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002ba0:	e7fe      	b.n	8002ba0 <NMI_Handler+0x4>

08002ba2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002ba2:	b480      	push	{r7}
 8002ba4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002ba6:	e7fe      	b.n	8002ba6 <HardFault_Handler+0x4>

08002ba8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002ba8:	b480      	push	{r7}
 8002baa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002bac:	e7fe      	b.n	8002bac <MemManage_Handler+0x4>

08002bae <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002bae:	b480      	push	{r7}
 8002bb0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002bb2:	e7fe      	b.n	8002bb2 <BusFault_Handler+0x4>

08002bb4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002bb4:	b480      	push	{r7}
 8002bb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002bb8:	e7fe      	b.n	8002bb8 <UsageFault_Handler+0x4>

08002bba <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002bba:	b480      	push	{r7}
 8002bbc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002bbe:	bf00      	nop
 8002bc0:	46bd      	mov	sp, r7
 8002bc2:	bc80      	pop	{r7}
 8002bc4:	4770      	bx	lr

08002bc6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002bc6:	b480      	push	{r7}
 8002bc8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002bca:	bf00      	nop
 8002bcc:	46bd      	mov	sp, r7
 8002bce:	bc80      	pop	{r7}
 8002bd0:	4770      	bx	lr

08002bd2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002bd2:	b480      	push	{r7}
 8002bd4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002bd6:	bf00      	nop
 8002bd8:	46bd      	mov	sp, r7
 8002bda:	bc80      	pop	{r7}
 8002bdc:	4770      	bx	lr

08002bde <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002bde:	b580      	push	{r7, lr}
 8002be0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002be2:	f000 f967 	bl	8002eb4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002be6:	bf00      	nop
 8002be8:	bd80      	pop	{r7, pc}
	...

08002bec <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8002bec:	b580      	push	{r7, lr}
 8002bee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8002bf0:	4802      	ldr	r0, [pc, #8]	; (8002bfc <DMA1_Channel1_IRQHandler+0x10>)
 8002bf2:	f001 f807 	bl	8003c04 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8002bf6:	bf00      	nop
 8002bf8:	bd80      	pop	{r7, pc}
 8002bfa:	bf00      	nop
 8002bfc:	20000234 	.word	0x20000234

08002c00 <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupts.
  */
void ADC1_2_IRQHandler(void)
{
 8002c00:	b580      	push	{r7, lr}
 8002c02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8002c04:	4802      	ldr	r0, [pc, #8]	; (8002c10 <ADC1_2_IRQHandler+0x10>)
 8002c06:	f000 fb4b 	bl	80032a0 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 8002c0a:	bf00      	nop
 8002c0c:	bd80      	pop	{r7, pc}
 8002c0e:	bf00      	nop
 8002c10:	20000204 	.word	0x20000204

08002c14 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8002c14:	b580      	push	{r7, lr}
 8002c16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_7);
 8002c18:	2080      	movs	r0, #128	; 0x80
 8002c1a:	f001 fac3 	bl	80041a4 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_8);
 8002c1e:	f44f 7080 	mov.w	r0, #256	; 0x100
 8002c22:	f001 fabf 	bl	80041a4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8002c26:	bf00      	nop
 8002c28:	bd80      	pop	{r7, pc}
	...

08002c2c <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8002c2c:	b580      	push	{r7, lr}
 8002c2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8002c30:	4802      	ldr	r0, [pc, #8]	; (8002c3c <TIM3_IRQHandler+0x10>)
 8002c32:	f003 fa0b 	bl	800604c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8002c36:	bf00      	nop
 8002c38:	bd80      	pop	{r7, pc}
 8002c3a:	bf00      	nop
 8002c3c:	2000035c 	.word	0x2000035c

08002c40 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8002c40:	b580      	push	{r7, lr}
 8002c42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8002c44:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8002c48:	f001 faac 	bl	80041a4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8002c4c:	bf00      	nop
 8002c4e:	bd80      	pop	{r7, pc}

08002c50 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002c50:	b480      	push	{r7}
 8002c52:	af00      	add	r7, sp, #0
	return 1;
 8002c54:	2301      	movs	r3, #1
}
 8002c56:	4618      	mov	r0, r3
 8002c58:	46bd      	mov	sp, r7
 8002c5a:	bc80      	pop	{r7}
 8002c5c:	4770      	bx	lr

08002c5e <_kill>:

int _kill(int pid, int sig)
{
 8002c5e:	b580      	push	{r7, lr}
 8002c60:	b082      	sub	sp, #8
 8002c62:	af00      	add	r7, sp, #0
 8002c64:	6078      	str	r0, [r7, #4]
 8002c66:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8002c68:	f003 ff00 	bl	8006a6c <__errno>
 8002c6c:	4603      	mov	r3, r0
 8002c6e:	2216      	movs	r2, #22
 8002c70:	601a      	str	r2, [r3, #0]
	return -1;
 8002c72:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002c76:	4618      	mov	r0, r3
 8002c78:	3708      	adds	r7, #8
 8002c7a:	46bd      	mov	sp, r7
 8002c7c:	bd80      	pop	{r7, pc}

08002c7e <_exit>:

void _exit (int status)
{
 8002c7e:	b580      	push	{r7, lr}
 8002c80:	b082      	sub	sp, #8
 8002c82:	af00      	add	r7, sp, #0
 8002c84:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8002c86:	f04f 31ff 	mov.w	r1, #4294967295
 8002c8a:	6878      	ldr	r0, [r7, #4]
 8002c8c:	f7ff ffe7 	bl	8002c5e <_kill>
	while (1) {}		/* Make sure we hang here */
 8002c90:	e7fe      	b.n	8002c90 <_exit+0x12>

08002c92 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002c92:	b580      	push	{r7, lr}
 8002c94:	b086      	sub	sp, #24
 8002c96:	af00      	add	r7, sp, #0
 8002c98:	60f8      	str	r0, [r7, #12]
 8002c9a:	60b9      	str	r1, [r7, #8]
 8002c9c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002c9e:	2300      	movs	r3, #0
 8002ca0:	617b      	str	r3, [r7, #20]
 8002ca2:	e00a      	b.n	8002cba <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8002ca4:	f3af 8000 	nop.w
 8002ca8:	4601      	mov	r1, r0
 8002caa:	68bb      	ldr	r3, [r7, #8]
 8002cac:	1c5a      	adds	r2, r3, #1
 8002cae:	60ba      	str	r2, [r7, #8]
 8002cb0:	b2ca      	uxtb	r2, r1
 8002cb2:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002cb4:	697b      	ldr	r3, [r7, #20]
 8002cb6:	3301      	adds	r3, #1
 8002cb8:	617b      	str	r3, [r7, #20]
 8002cba:	697a      	ldr	r2, [r7, #20]
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	429a      	cmp	r2, r3
 8002cc0:	dbf0      	blt.n	8002ca4 <_read+0x12>
	}

return len;
 8002cc2:	687b      	ldr	r3, [r7, #4]
}
 8002cc4:	4618      	mov	r0, r3
 8002cc6:	3718      	adds	r7, #24
 8002cc8:	46bd      	mov	sp, r7
 8002cca:	bd80      	pop	{r7, pc}

08002ccc <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002ccc:	b580      	push	{r7, lr}
 8002cce:	b086      	sub	sp, #24
 8002cd0:	af00      	add	r7, sp, #0
 8002cd2:	60f8      	str	r0, [r7, #12]
 8002cd4:	60b9      	str	r1, [r7, #8]
 8002cd6:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002cd8:	2300      	movs	r3, #0
 8002cda:	617b      	str	r3, [r7, #20]
 8002cdc:	e009      	b.n	8002cf2 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8002cde:	68bb      	ldr	r3, [r7, #8]
 8002ce0:	1c5a      	adds	r2, r3, #1
 8002ce2:	60ba      	str	r2, [r7, #8]
 8002ce4:	781b      	ldrb	r3, [r3, #0]
 8002ce6:	4618      	mov	r0, r3
 8002ce8:	f7fe fa20 	bl	800112c <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002cec:	697b      	ldr	r3, [r7, #20]
 8002cee:	3301      	adds	r3, #1
 8002cf0:	617b      	str	r3, [r7, #20]
 8002cf2:	697a      	ldr	r2, [r7, #20]
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	429a      	cmp	r2, r3
 8002cf8:	dbf1      	blt.n	8002cde <_write+0x12>
	}
	return len;
 8002cfa:	687b      	ldr	r3, [r7, #4]
}
 8002cfc:	4618      	mov	r0, r3
 8002cfe:	3718      	adds	r7, #24
 8002d00:	46bd      	mov	sp, r7
 8002d02:	bd80      	pop	{r7, pc}

08002d04 <_close>:

int _close(int file)
{
 8002d04:	b480      	push	{r7}
 8002d06:	b083      	sub	sp, #12
 8002d08:	af00      	add	r7, sp, #0
 8002d0a:	6078      	str	r0, [r7, #4]
	return -1;
 8002d0c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002d10:	4618      	mov	r0, r3
 8002d12:	370c      	adds	r7, #12
 8002d14:	46bd      	mov	sp, r7
 8002d16:	bc80      	pop	{r7}
 8002d18:	4770      	bx	lr

08002d1a <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002d1a:	b480      	push	{r7}
 8002d1c:	b083      	sub	sp, #12
 8002d1e:	af00      	add	r7, sp, #0
 8002d20:	6078      	str	r0, [r7, #4]
 8002d22:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8002d24:	683b      	ldr	r3, [r7, #0]
 8002d26:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002d2a:	605a      	str	r2, [r3, #4]
	return 0;
 8002d2c:	2300      	movs	r3, #0
}
 8002d2e:	4618      	mov	r0, r3
 8002d30:	370c      	adds	r7, #12
 8002d32:	46bd      	mov	sp, r7
 8002d34:	bc80      	pop	{r7}
 8002d36:	4770      	bx	lr

08002d38 <_isatty>:

int _isatty(int file)
{
 8002d38:	b480      	push	{r7}
 8002d3a:	b083      	sub	sp, #12
 8002d3c:	af00      	add	r7, sp, #0
 8002d3e:	6078      	str	r0, [r7, #4]
	return 1;
 8002d40:	2301      	movs	r3, #1
}
 8002d42:	4618      	mov	r0, r3
 8002d44:	370c      	adds	r7, #12
 8002d46:	46bd      	mov	sp, r7
 8002d48:	bc80      	pop	{r7}
 8002d4a:	4770      	bx	lr

08002d4c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002d4c:	b480      	push	{r7}
 8002d4e:	b085      	sub	sp, #20
 8002d50:	af00      	add	r7, sp, #0
 8002d52:	60f8      	str	r0, [r7, #12]
 8002d54:	60b9      	str	r1, [r7, #8]
 8002d56:	607a      	str	r2, [r7, #4]
	return 0;
 8002d58:	2300      	movs	r3, #0
}
 8002d5a:	4618      	mov	r0, r3
 8002d5c:	3714      	adds	r7, #20
 8002d5e:	46bd      	mov	sp, r7
 8002d60:	bc80      	pop	{r7}
 8002d62:	4770      	bx	lr

08002d64 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002d64:	b580      	push	{r7, lr}
 8002d66:	b086      	sub	sp, #24
 8002d68:	af00      	add	r7, sp, #0
 8002d6a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002d6c:	4a14      	ldr	r2, [pc, #80]	; (8002dc0 <_sbrk+0x5c>)
 8002d6e:	4b15      	ldr	r3, [pc, #84]	; (8002dc4 <_sbrk+0x60>)
 8002d70:	1ad3      	subs	r3, r2, r3
 8002d72:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002d74:	697b      	ldr	r3, [r7, #20]
 8002d76:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002d78:	4b13      	ldr	r3, [pc, #76]	; (8002dc8 <_sbrk+0x64>)
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	2b00      	cmp	r3, #0
 8002d7e:	d102      	bne.n	8002d86 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002d80:	4b11      	ldr	r3, [pc, #68]	; (8002dc8 <_sbrk+0x64>)
 8002d82:	4a12      	ldr	r2, [pc, #72]	; (8002dcc <_sbrk+0x68>)
 8002d84:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002d86:	4b10      	ldr	r3, [pc, #64]	; (8002dc8 <_sbrk+0x64>)
 8002d88:	681a      	ldr	r2, [r3, #0]
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	4413      	add	r3, r2
 8002d8e:	693a      	ldr	r2, [r7, #16]
 8002d90:	429a      	cmp	r2, r3
 8002d92:	d207      	bcs.n	8002da4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002d94:	f003 fe6a 	bl	8006a6c <__errno>
 8002d98:	4603      	mov	r3, r0
 8002d9a:	220c      	movs	r2, #12
 8002d9c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002d9e:	f04f 33ff 	mov.w	r3, #4294967295
 8002da2:	e009      	b.n	8002db8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002da4:	4b08      	ldr	r3, [pc, #32]	; (8002dc8 <_sbrk+0x64>)
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002daa:	4b07      	ldr	r3, [pc, #28]	; (8002dc8 <_sbrk+0x64>)
 8002dac:	681a      	ldr	r2, [r3, #0]
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	4413      	add	r3, r2
 8002db2:	4a05      	ldr	r2, [pc, #20]	; (8002dc8 <_sbrk+0x64>)
 8002db4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002db6:	68fb      	ldr	r3, [r7, #12]
}
 8002db8:	4618      	mov	r0, r3
 8002dba:	3718      	adds	r7, #24
 8002dbc:	46bd      	mov	sp, r7
 8002dbe:	bd80      	pop	{r7, pc}
 8002dc0:	20005000 	.word	0x20005000
 8002dc4:	00000400 	.word	0x00000400
 8002dc8:	2000064c 	.word	0x2000064c
 8002dcc:	20000668 	.word	0x20000668

08002dd0 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002dd0:	b480      	push	{r7}
 8002dd2:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002dd4:	bf00      	nop
 8002dd6:	46bd      	mov	sp, r7
 8002dd8:	bc80      	pop	{r7}
 8002dda:	4770      	bx	lr

08002ddc <Reset_Handler>:
 8002ddc:	480c      	ldr	r0, [pc, #48]	; (8002e10 <LoopFillZerobss+0x12>)
 8002dde:	490d      	ldr	r1, [pc, #52]	; (8002e14 <LoopFillZerobss+0x16>)
 8002de0:	4a0d      	ldr	r2, [pc, #52]	; (8002e18 <LoopFillZerobss+0x1a>)
 8002de2:	2300      	movs	r3, #0
 8002de4:	e002      	b.n	8002dec <LoopCopyDataInit>

08002de6 <CopyDataInit>:
 8002de6:	58d4      	ldr	r4, [r2, r3]
 8002de8:	50c4      	str	r4, [r0, r3]
 8002dea:	3304      	adds	r3, #4

08002dec <LoopCopyDataInit>:
 8002dec:	18c4      	adds	r4, r0, r3
 8002dee:	428c      	cmp	r4, r1
 8002df0:	d3f9      	bcc.n	8002de6 <CopyDataInit>
 8002df2:	4a0a      	ldr	r2, [pc, #40]	; (8002e1c <LoopFillZerobss+0x1e>)
 8002df4:	4c0a      	ldr	r4, [pc, #40]	; (8002e20 <LoopFillZerobss+0x22>)
 8002df6:	2300      	movs	r3, #0
 8002df8:	e001      	b.n	8002dfe <LoopFillZerobss>

08002dfa <FillZerobss>:
 8002dfa:	6013      	str	r3, [r2, #0]
 8002dfc:	3204      	adds	r2, #4

08002dfe <LoopFillZerobss>:
 8002dfe:	42a2      	cmp	r2, r4
 8002e00:	d3fb      	bcc.n	8002dfa <FillZerobss>
 8002e02:	f7ff ffe5 	bl	8002dd0 <SystemInit>
 8002e06:	f003 fe37 	bl	8006a78 <__libc_init_array>
 8002e0a:	f7fe fd9b 	bl	8001944 <main>
 8002e0e:	4770      	bx	lr
 8002e10:	20000000 	.word	0x20000000
 8002e14:	200001e4 	.word	0x200001e4
 8002e18:	0800be00 	.word	0x0800be00
 8002e1c:	200001e8 	.word	0x200001e8
 8002e20:	20000664 	.word	0x20000664

08002e24 <CAN1_RX1_IRQHandler>:
 8002e24:	e7fe      	b.n	8002e24 <CAN1_RX1_IRQHandler>
	...

08002e28 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002e28:	b580      	push	{r7, lr}
 8002e2a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002e2c:	4b08      	ldr	r3, [pc, #32]	; (8002e50 <HAL_Init+0x28>)
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	4a07      	ldr	r2, [pc, #28]	; (8002e50 <HAL_Init+0x28>)
 8002e32:	f043 0310 	orr.w	r3, r3, #16
 8002e36:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002e38:	2003      	movs	r0, #3
 8002e3a:	f000 fde7 	bl	8003a0c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002e3e:	2000      	movs	r0, #0
 8002e40:	f000 f808 	bl	8002e54 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002e44:	f7ff fd2e 	bl	80028a4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002e48:	2300      	movs	r3, #0
}
 8002e4a:	4618      	mov	r0, r3
 8002e4c:	bd80      	pop	{r7, pc}
 8002e4e:	bf00      	nop
 8002e50:	40022000 	.word	0x40022000

08002e54 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002e54:	b580      	push	{r7, lr}
 8002e56:	b082      	sub	sp, #8
 8002e58:	af00      	add	r7, sp, #0
 8002e5a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002e5c:	4b12      	ldr	r3, [pc, #72]	; (8002ea8 <HAL_InitTick+0x54>)
 8002e5e:	681a      	ldr	r2, [r3, #0]
 8002e60:	4b12      	ldr	r3, [pc, #72]	; (8002eac <HAL_InitTick+0x58>)
 8002e62:	781b      	ldrb	r3, [r3, #0]
 8002e64:	4619      	mov	r1, r3
 8002e66:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002e6a:	fbb3 f3f1 	udiv	r3, r3, r1
 8002e6e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e72:	4618      	mov	r0, r3
 8002e74:	f000 fdff 	bl	8003a76 <HAL_SYSTICK_Config>
 8002e78:	4603      	mov	r3, r0
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	d001      	beq.n	8002e82 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002e7e:	2301      	movs	r3, #1
 8002e80:	e00e      	b.n	8002ea0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	2b0f      	cmp	r3, #15
 8002e86:	d80a      	bhi.n	8002e9e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002e88:	2200      	movs	r2, #0
 8002e8a:	6879      	ldr	r1, [r7, #4]
 8002e8c:	f04f 30ff 	mov.w	r0, #4294967295
 8002e90:	f000 fdc7 	bl	8003a22 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002e94:	4a06      	ldr	r2, [pc, #24]	; (8002eb0 <HAL_InitTick+0x5c>)
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002e9a:	2300      	movs	r3, #0
 8002e9c:	e000      	b.n	8002ea0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002e9e:	2301      	movs	r3, #1
}
 8002ea0:	4618      	mov	r0, r3
 8002ea2:	3708      	adds	r7, #8
 8002ea4:	46bd      	mov	sp, r7
 8002ea6:	bd80      	pop	{r7, pc}
 8002ea8:	20000004 	.word	0x20000004
 8002eac:	2000000c 	.word	0x2000000c
 8002eb0:	20000008 	.word	0x20000008

08002eb4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002eb4:	b480      	push	{r7}
 8002eb6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002eb8:	4b05      	ldr	r3, [pc, #20]	; (8002ed0 <HAL_IncTick+0x1c>)
 8002eba:	781b      	ldrb	r3, [r3, #0]
 8002ebc:	461a      	mov	r2, r3
 8002ebe:	4b05      	ldr	r3, [pc, #20]	; (8002ed4 <HAL_IncTick+0x20>)
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	4413      	add	r3, r2
 8002ec4:	4a03      	ldr	r2, [pc, #12]	; (8002ed4 <HAL_IncTick+0x20>)
 8002ec6:	6013      	str	r3, [r2, #0]
}
 8002ec8:	bf00      	nop
 8002eca:	46bd      	mov	sp, r7
 8002ecc:	bc80      	pop	{r7}
 8002ece:	4770      	bx	lr
 8002ed0:	2000000c 	.word	0x2000000c
 8002ed4:	20000650 	.word	0x20000650

08002ed8 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002ed8:	b480      	push	{r7}
 8002eda:	af00      	add	r7, sp, #0
  return uwTick;
 8002edc:	4b02      	ldr	r3, [pc, #8]	; (8002ee8 <HAL_GetTick+0x10>)
 8002ede:	681b      	ldr	r3, [r3, #0]
}
 8002ee0:	4618      	mov	r0, r3
 8002ee2:	46bd      	mov	sp, r7
 8002ee4:	bc80      	pop	{r7}
 8002ee6:	4770      	bx	lr
 8002ee8:	20000650 	.word	0x20000650

08002eec <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002eec:	b580      	push	{r7, lr}
 8002eee:	b084      	sub	sp, #16
 8002ef0:	af00      	add	r7, sp, #0
 8002ef2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002ef4:	f7ff fff0 	bl	8002ed8 <HAL_GetTick>
 8002ef8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002efe:	68fb      	ldr	r3, [r7, #12]
 8002f00:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f04:	d005      	beq.n	8002f12 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002f06:	4b0a      	ldr	r3, [pc, #40]	; (8002f30 <HAL_Delay+0x44>)
 8002f08:	781b      	ldrb	r3, [r3, #0]
 8002f0a:	461a      	mov	r2, r3
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	4413      	add	r3, r2
 8002f10:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002f12:	bf00      	nop
 8002f14:	f7ff ffe0 	bl	8002ed8 <HAL_GetTick>
 8002f18:	4602      	mov	r2, r0
 8002f1a:	68bb      	ldr	r3, [r7, #8]
 8002f1c:	1ad3      	subs	r3, r2, r3
 8002f1e:	68fa      	ldr	r2, [r7, #12]
 8002f20:	429a      	cmp	r2, r3
 8002f22:	d8f7      	bhi.n	8002f14 <HAL_Delay+0x28>
  {
  }
}
 8002f24:	bf00      	nop
 8002f26:	bf00      	nop
 8002f28:	3710      	adds	r7, #16
 8002f2a:	46bd      	mov	sp, r7
 8002f2c:	bd80      	pop	{r7, pc}
 8002f2e:	bf00      	nop
 8002f30:	2000000c 	.word	0x2000000c

08002f34 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002f34:	b580      	push	{r7, lr}
 8002f36:	b086      	sub	sp, #24
 8002f38:	af00      	add	r7, sp, #0
 8002f3a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002f3c:	2300      	movs	r3, #0
 8002f3e:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8002f40:	2300      	movs	r3, #0
 8002f42:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8002f44:	2300      	movs	r3, #0
 8002f46:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8002f48:	2300      	movs	r3, #0
 8002f4a:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	d101      	bne.n	8002f56 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8002f52:	2301      	movs	r3, #1
 8002f54:	e0be      	b.n	80030d4 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	689b      	ldr	r3, [r3, #8]
 8002f5a:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f60:	2b00      	cmp	r3, #0
 8002f62:	d109      	bne.n	8002f78 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	2200      	movs	r2, #0
 8002f68:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	2200      	movs	r2, #0
 8002f6e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002f72:	6878      	ldr	r0, [r7, #4]
 8002f74:	f7ff fcc8 	bl	8002908 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8002f78:	6878      	ldr	r0, [r7, #4]
 8002f7a:	f000 fbcb 	bl	8003714 <ADC_ConversionStop_Disable>
 8002f7e:	4603      	mov	r3, r0
 8002f80:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f86:	f003 0310 	and.w	r3, r3, #16
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	f040 8099 	bne.w	80030c2 <HAL_ADC_Init+0x18e>
 8002f90:	7dfb      	ldrb	r3, [r7, #23]
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	f040 8095 	bne.w	80030c2 <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f9c:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002fa0:	f023 0302 	bic.w	r3, r3, #2
 8002fa4:	f043 0202 	orr.w	r2, r3, #2
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8002fb4:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	7b1b      	ldrb	r3, [r3, #12]
 8002fba:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8002fbc:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8002fbe:	68ba      	ldr	r2, [r7, #8]
 8002fc0:	4313      	orrs	r3, r2
 8002fc2:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	689b      	ldr	r3, [r3, #8]
 8002fc8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002fcc:	d003      	beq.n	8002fd6 <HAL_ADC_Init+0xa2>
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	689b      	ldr	r3, [r3, #8]
 8002fd2:	2b01      	cmp	r3, #1
 8002fd4:	d102      	bne.n	8002fdc <HAL_ADC_Init+0xa8>
 8002fd6:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002fda:	e000      	b.n	8002fde <HAL_ADC_Init+0xaa>
 8002fdc:	2300      	movs	r3, #0
 8002fde:	693a      	ldr	r2, [r7, #16]
 8002fe0:	4313      	orrs	r3, r2
 8002fe2:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	7d1b      	ldrb	r3, [r3, #20]
 8002fe8:	2b01      	cmp	r3, #1
 8002fea:	d119      	bne.n	8003020 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	7b1b      	ldrb	r3, [r3, #12]
 8002ff0:	2b00      	cmp	r3, #0
 8002ff2:	d109      	bne.n	8003008 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	699b      	ldr	r3, [r3, #24]
 8002ff8:	3b01      	subs	r3, #1
 8002ffa:	035a      	lsls	r2, r3, #13
 8002ffc:	693b      	ldr	r3, [r7, #16]
 8002ffe:	4313      	orrs	r3, r2
 8003000:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8003004:	613b      	str	r3, [r7, #16]
 8003006:	e00b      	b.n	8003020 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800300c:	f043 0220 	orr.w	r2, r3, #32
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003018:	f043 0201 	orr.w	r2, r3, #1
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	685b      	ldr	r3, [r3, #4]
 8003026:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	693a      	ldr	r2, [r7, #16]
 8003030:	430a      	orrs	r2, r1
 8003032:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	689a      	ldr	r2, [r3, #8]
 800303a:	4b28      	ldr	r3, [pc, #160]	; (80030dc <HAL_ADC_Init+0x1a8>)
 800303c:	4013      	ands	r3, r2
 800303e:	687a      	ldr	r2, [r7, #4]
 8003040:	6812      	ldr	r2, [r2, #0]
 8003042:	68b9      	ldr	r1, [r7, #8]
 8003044:	430b      	orrs	r3, r1
 8003046:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	689b      	ldr	r3, [r3, #8]
 800304c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003050:	d003      	beq.n	800305a <HAL_ADC_Init+0x126>
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	689b      	ldr	r3, [r3, #8]
 8003056:	2b01      	cmp	r3, #1
 8003058:	d104      	bne.n	8003064 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	691b      	ldr	r3, [r3, #16]
 800305e:	3b01      	subs	r3, #1
 8003060:	051b      	lsls	r3, r3, #20
 8003062:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800306a:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	68fa      	ldr	r2, [r7, #12]
 8003074:	430a      	orrs	r2, r1
 8003076:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	689a      	ldr	r2, [r3, #8]
 800307e:	4b18      	ldr	r3, [pc, #96]	; (80030e0 <HAL_ADC_Init+0x1ac>)
 8003080:	4013      	ands	r3, r2
 8003082:	68ba      	ldr	r2, [r7, #8]
 8003084:	429a      	cmp	r2, r3
 8003086:	d10b      	bne.n	80030a0 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	2200      	movs	r2, #0
 800308c:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003092:	f023 0303 	bic.w	r3, r3, #3
 8003096:	f043 0201 	orr.w	r2, r3, #1
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 800309e:	e018      	b.n	80030d2 <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030a4:	f023 0312 	bic.w	r3, r3, #18
 80030a8:	f043 0210 	orr.w	r2, r3, #16
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030b4:	f043 0201 	orr.w	r2, r3, #1
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 80030bc:	2301      	movs	r3, #1
 80030be:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80030c0:	e007      	b.n	80030d2 <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030c6:	f043 0210 	orr.w	r2, r3, #16
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 80030ce:	2301      	movs	r3, #1
 80030d0:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 80030d2:	7dfb      	ldrb	r3, [r7, #23]
}
 80030d4:	4618      	mov	r0, r3
 80030d6:	3718      	adds	r7, #24
 80030d8:	46bd      	mov	sp, r7
 80030da:	bd80      	pop	{r7, pc}
 80030dc:	ffe1f7fd 	.word	0xffe1f7fd
 80030e0:	ff1f0efe 	.word	0xff1f0efe

080030e4 <HAL_ADC_Start_DMA>:
  * @param  pData: The destination Buffer address.
  * @param  Length: The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 80030e4:	b580      	push	{r7, lr}
 80030e6:	b086      	sub	sp, #24
 80030e8:	af00      	add	r7, sp, #0
 80030ea:	60f8      	str	r0, [r7, #12]
 80030ec:	60b9      	str	r1, [r7, #8]
 80030ee:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80030f0:	2300      	movs	r3, #0
 80030f2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_ADC_DMA_CAPABILITY_INSTANCE(hadc->Instance));
    
  /* Verification if multimode is disabled (for devices with several ADC)     */
  /* If multimode is enabled, dedicated function multimode conversion         */
  /* start DMA must be used.                                                  */
  if(ADC_MULTIMODE_IS_ENABLE(hadc) == RESET)
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	4a64      	ldr	r2, [pc, #400]	; (800328c <HAL_ADC_Start_DMA+0x1a8>)
 80030fa:	4293      	cmp	r3, r2
 80030fc:	d004      	beq.n	8003108 <HAL_ADC_Start_DMA+0x24>
 80030fe:	68fb      	ldr	r3, [r7, #12]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	4a63      	ldr	r2, [pc, #396]	; (8003290 <HAL_ADC_Start_DMA+0x1ac>)
 8003104:	4293      	cmp	r3, r2
 8003106:	d106      	bne.n	8003116 <HAL_ADC_Start_DMA+0x32>
 8003108:	4b60      	ldr	r3, [pc, #384]	; (800328c <HAL_ADC_Start_DMA+0x1a8>)
 800310a:	685b      	ldr	r3, [r3, #4]
 800310c:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8003110:	2b00      	cmp	r3, #0
 8003112:	f040 80b3 	bne.w	800327c <HAL_ADC_Start_DMA+0x198>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8003116:	68fb      	ldr	r3, [r7, #12]
 8003118:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800311c:	2b01      	cmp	r3, #1
 800311e:	d101      	bne.n	8003124 <HAL_ADC_Start_DMA+0x40>
 8003120:	2302      	movs	r3, #2
 8003122:	e0ae      	b.n	8003282 <HAL_ADC_Start_DMA+0x19e>
 8003124:	68fb      	ldr	r3, [r7, #12]
 8003126:	2201      	movs	r2, #1
 8003128:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 800312c:	68f8      	ldr	r0, [r7, #12]
 800312e:	f000 fa97 	bl	8003660 <ADC_Enable>
 8003132:	4603      	mov	r3, r0
 8003134:	75fb      	strb	r3, [r7, #23]
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8003136:	7dfb      	ldrb	r3, [r7, #23]
 8003138:	2b00      	cmp	r3, #0
 800313a:	f040 809a 	bne.w	8003272 <HAL_ADC_Start_DMA+0x18e>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 800313e:	68fb      	ldr	r3, [r7, #12]
 8003140:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003142:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8003146:	f023 0301 	bic.w	r3, r3, #1
 800314a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800314e:	68fb      	ldr	r3, [r7, #12]
 8003150:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8003152:	68fb      	ldr	r3, [r7, #12]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	4a4e      	ldr	r2, [pc, #312]	; (8003290 <HAL_ADC_Start_DMA+0x1ac>)
 8003158:	4293      	cmp	r3, r2
 800315a:	d105      	bne.n	8003168 <HAL_ADC_Start_DMA+0x84>
 800315c:	4b4b      	ldr	r3, [pc, #300]	; (800328c <HAL_ADC_Start_DMA+0x1a8>)
 800315e:	685b      	ldr	r3, [r3, #4]
 8003160:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8003164:	2b00      	cmp	r3, #0
 8003166:	d115      	bne.n	8003194 <HAL_ADC_Start_DMA+0xb0>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800316c:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8003174:	68fb      	ldr	r3, [r7, #12]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	685b      	ldr	r3, [r3, #4]
 800317a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800317e:	2b00      	cmp	r3, #0
 8003180:	d026      	beq.n	80031d0 <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8003182:	68fb      	ldr	r3, [r7, #12]
 8003184:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003186:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800318a:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800318e:	68fb      	ldr	r3, [r7, #12]
 8003190:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8003192:	e01d      	b.n	80031d0 <HAL_ADC_Start_DMA+0xec>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8003194:	68fb      	ldr	r3, [r7, #12]
 8003196:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003198:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	4a39      	ldr	r2, [pc, #228]	; (800328c <HAL_ADC_Start_DMA+0x1a8>)
 80031a6:	4293      	cmp	r3, r2
 80031a8:	d004      	beq.n	80031b4 <HAL_ADC_Start_DMA+0xd0>
 80031aa:	68fb      	ldr	r3, [r7, #12]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	4a38      	ldr	r2, [pc, #224]	; (8003290 <HAL_ADC_Start_DMA+0x1ac>)
 80031b0:	4293      	cmp	r3, r2
 80031b2:	d10d      	bne.n	80031d0 <HAL_ADC_Start_DMA+0xec>
 80031b4:	4b35      	ldr	r3, [pc, #212]	; (800328c <HAL_ADC_Start_DMA+0x1a8>)
 80031b6:	685b      	ldr	r3, [r3, #4]
 80031b8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80031bc:	2b00      	cmp	r3, #0
 80031be:	d007      	beq.n	80031d0 <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031c4:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80031c8:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
      
      /* State machine update: Check if an injected conversion is ongoing */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80031d0:	68fb      	ldr	r3, [r7, #12]
 80031d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031d4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80031d8:	2b00      	cmp	r3, #0
 80031da:	d006      	beq.n	80031ea <HAL_ADC_Start_DMA+0x106>
      {
        /* Reset ADC error code fields related to conversions on group regular */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031e0:	f023 0206 	bic.w	r2, r3, #6
 80031e4:	68fb      	ldr	r3, [r7, #12]
 80031e6:	62da      	str	r2, [r3, #44]	; 0x2c
 80031e8:	e002      	b.n	80031f0 <HAL_ADC_Start_DMA+0x10c>
      }
      else
      {
        /* Reset ADC all error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 80031ea:	68fb      	ldr	r3, [r7, #12]
 80031ec:	2200      	movs	r2, #0
 80031ee:	62da      	str	r2, [r3, #44]	; 0x2c
      }
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	2200      	movs	r2, #0
 80031f4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
      
      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80031f8:	68fb      	ldr	r3, [r7, #12]
 80031fa:	6a1b      	ldr	r3, [r3, #32]
 80031fc:	4a25      	ldr	r2, [pc, #148]	; (8003294 <HAL_ADC_Start_DMA+0x1b0>)
 80031fe:	629a      	str	r2, [r3, #40]	; 0x28

      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	6a1b      	ldr	r3, [r3, #32]
 8003204:	4a24      	ldr	r2, [pc, #144]	; (8003298 <HAL_ADC_Start_DMA+0x1b4>)
 8003206:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	6a1b      	ldr	r3, [r3, #32]
 800320c:	4a23      	ldr	r2, [pc, #140]	; (800329c <HAL_ADC_Start_DMA+0x1b8>)
 800320e:	631a      	str	r2, [r3, #48]	; 0x30
      /* start (in case of SW start):                                         */
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	f06f 0202 	mvn.w	r2, #2
 8003218:	601a      	str	r2, [r3, #0]
      
      /* Enable ADC DMA mode */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 800321a:	68fb      	ldr	r3, [r7, #12]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	689a      	ldr	r2, [r3, #8]
 8003220:	68fb      	ldr	r3, [r7, #12]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003228:	609a      	str	r2, [r3, #8]
      
      /* Start the DMA channel */
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	6a18      	ldr	r0, [r3, #32]
 800322e:	68fb      	ldr	r3, [r7, #12]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	334c      	adds	r3, #76	; 0x4c
 8003234:	4619      	mov	r1, r3
 8003236:	68ba      	ldr	r2, [r7, #8]
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	f000 fc83 	bl	8003b44 <HAL_DMA_Start_IT>
      
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      if (ADC_IS_SOFTWARE_START_REGULAR(hadc))
 800323e:	68fb      	ldr	r3, [r7, #12]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	689b      	ldr	r3, [r3, #8]
 8003244:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8003248:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 800324c:	d108      	bne.n	8003260 <HAL_ADC_Start_DMA+0x17c>
      {
        /* Start ADC conversion on regular group with SW start */
        SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 800324e:	68fb      	ldr	r3, [r7, #12]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	689a      	ldr	r2, [r3, #8]
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 800325c:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 800325e:	e00f      	b.n	8003280 <HAL_ADC_Start_DMA+0x19c>
      }
      else
      {
        /* Start ADC conversion on regular group with external trigger */
        SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8003260:	68fb      	ldr	r3, [r7, #12]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	689a      	ldr	r2, [r3, #8]
 8003266:	68fb      	ldr	r3, [r7, #12]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 800326e:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 8003270:	e006      	b.n	8003280 <HAL_ADC_Start_DMA+0x19c>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8003272:	68fb      	ldr	r3, [r7, #12]
 8003274:	2200      	movs	r2, #0
 8003276:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    if (tmp_hal_status == HAL_OK)
 800327a:	e001      	b.n	8003280 <HAL_ADC_Start_DMA+0x19c>
    }
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 800327c:	2301      	movs	r3, #1
 800327e:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8003280:	7dfb      	ldrb	r3, [r7, #23]
}
 8003282:	4618      	mov	r0, r3
 8003284:	3718      	adds	r7, #24
 8003286:	46bd      	mov	sp, r7
 8003288:	bd80      	pop	{r7, pc}
 800328a:	bf00      	nop
 800328c:	40012400 	.word	0x40012400
 8003290:	40012800 	.word	0x40012800
 8003294:	08003797 	.word	0x08003797
 8003298:	08003813 	.word	0x08003813
 800329c:	0800382f 	.word	0x0800382f

080032a0 <HAL_ADC_IRQHandler>:
  * @brief  Handles ADC interrupt request  
  * @param  hadc: ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 80032a0:	b580      	push	{r7, lr}
 80032a2:	b082      	sub	sp, #8
 80032a4:	af00      	add	r7, sp, #0
 80032a6:	6078      	str	r0, [r7, #4]
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));
  
  
  /* ========== Check End of Conversion flag for regular group ========== */
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC))
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	685b      	ldr	r3, [r3, #4]
 80032ae:	f003 0320 	and.w	r3, r3, #32
 80032b2:	2b20      	cmp	r3, #32
 80032b4:	d140      	bne.n	8003338 <HAL_ADC_IRQHandler+0x98>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC) )
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	f003 0302 	and.w	r3, r3, #2
 80032c0:	2b02      	cmp	r3, #2
 80032c2:	d139      	bne.n	8003338 <HAL_ADC_IRQHandler+0x98>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032c8:	f003 0310 	and.w	r3, r3, #16
 80032cc:	2b00      	cmp	r3, #0
 80032ce:	d105      	bne.n	80032dc <HAL_ADC_IRQHandler+0x3c>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032d4:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	629a      	str	r2, [r3, #40]	; 0x28
      /* Determine whether any further conversion upcoming on group regular   */
      /* by external trigger, continuous mode or scan sequence on going.      */
      /* Note: On STM32F1 devices, in case of sequencer enabled               */
      /*       (several ranks selected), end of conversion flag is raised     */
      /*       at the end of the sequence.                                    */
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	689b      	ldr	r3, [r3, #8]
 80032e2:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 80032e6:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 80032ea:	d11d      	bne.n	8003328 <HAL_ADC_IRQHandler+0x88>
         (hadc->Init.ContinuousConvMode == DISABLE)   )
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	7b1b      	ldrb	r3, [r3, #12]
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80032f0:	2b00      	cmp	r3, #0
 80032f2:	d119      	bne.n	8003328 <HAL_ADC_IRQHandler+0x88>
      {
        /* Disable ADC end of conversion interrupt on group regular */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	685a      	ldr	r2, [r3, #4]
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	f022 0220 	bic.w	r2, r2, #32
 8003302:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003308:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	629a      	str	r2, [r3, #40]	; 0x28
        
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003314:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003318:	2b00      	cmp	r3, #0
 800331a:	d105      	bne.n	8003328 <HAL_ADC_IRQHandler+0x88>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003320:	f043 0201 	orr.w	r2, r3, #1
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	629a      	str	r2, [r3, #40]	; 0x28

      /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ConvCpltCallback(hadc);
#else
      HAL_ADC_ConvCpltCallback(hadc);
 8003328:	6878      	ldr	r0, [r7, #4]
 800332a:	f000 f87c 	bl	8003426 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear regular group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	f06f 0212 	mvn.w	r2, #18
 8003336:	601a      	str	r2, [r3, #0]
    }
  }
  
  /* ========== Check End of Conversion flag for injected group ========== */
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOC))
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	685b      	ldr	r3, [r3, #4]
 800333e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003342:	2b80      	cmp	r3, #128	; 0x80
 8003344:	d14f      	bne.n	80033e6 <HAL_ADC_IRQHandler+0x146>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOC))
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	f003 0304 	and.w	r3, r3, #4
 8003350:	2b04      	cmp	r3, #4
 8003352:	d148      	bne.n	80033e6 <HAL_ADC_IRQHandler+0x146>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003358:	f003 0310 	and.w	r3, r3, #16
 800335c:	2b00      	cmp	r3, #0
 800335e:	d105      	bne.n	800336c <HAL_ADC_IRQHandler+0xcc>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003364:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	629a      	str	r2, [r3, #40]	; 0x28
      /* conversion from group regular (same conditions as group regular      */
      /* interruption disabling above).                                       */
      /* Note: On STM32F1 devices, in case of sequencer enabled               */
      /*       (several ranks selected), end of conversion flag is raised     */
      /*       at the end of the sequence.                                    */
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	689b      	ldr	r3, [r3, #8]
 8003372:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 8003376:	f5b3 4fe0 	cmp.w	r3, #28672	; 0x7000
 800337a:	d012      	beq.n	80033a2 <HAL_ADC_IRQHandler+0x102>
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	685b      	ldr	r3, [r3, #4]
 8003382:	f403 6380 	and.w	r3, r3, #1024	; 0x400
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 8003386:	2b00      	cmp	r3, #0
 8003388:	d125      	bne.n	80033d6 <HAL_ADC_IRQHandler+0x136>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	689b      	ldr	r3, [r3, #8]
 8003390:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 8003394:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8003398:	d11d      	bne.n	80033d6 <HAL_ADC_IRQHandler+0x136>
          (hadc->Init.ContinuousConvMode == DISABLE)   )        )   )
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	7b1b      	ldrb	r3, [r3, #12]
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 800339e:	2b00      	cmp	r3, #0
 80033a0:	d119      	bne.n	80033d6 <HAL_ADC_IRQHandler+0x136>
      {
        /* Disable ADC end of conversion interrupt on group injected */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	685a      	ldr	r2, [r3, #4]
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80033b0:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033b6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	629a      	str	r2, [r3, #40]	; 0x28

        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	d105      	bne.n	80033d6 <HAL_ADC_IRQHandler+0x136>
        { 
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033ce:	f043 0201 	orr.w	r2, r3, #1
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	629a      	str	r2, [r3, #40]	; 0x28

      /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 80033d6:	6878      	ldr	r0, [r7, #4]
 80033d8:	f000 fa43 	bl	8003862 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear injected group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	f06f 020c 	mvn.w	r2, #12
 80033e4:	601a      	str	r2, [r3, #0]
    }
  }
   
  /* ========== Check Analog watchdog flags ========== */
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD))
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	685b      	ldr	r3, [r3, #4]
 80033ec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80033f0:	2b40      	cmp	r3, #64	; 0x40
 80033f2:	d114      	bne.n	800341e <HAL_ADC_IRQHandler+0x17e>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	f003 0301 	and.w	r3, r3, #1
 80033fe:	2b01      	cmp	r3, #1
 8003400:	d10d      	bne.n	800341e <HAL_ADC_IRQHandler+0x17e>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003406:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* Level out of window callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 800340e:	6878      	ldr	r0, [r7, #4]
 8003410:	f000 f81b 	bl	800344a <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	f06f 0201 	mvn.w	r2, #1
 800341c:	601a      	str	r2, [r3, #0]
    }
  }
  
}
 800341e:	bf00      	nop
 8003420:	3708      	adds	r7, #8
 8003422:	46bd      	mov	sp, r7
 8003424:	bd80      	pop	{r7, pc}

08003426 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8003426:	b480      	push	{r7}
 8003428:	b083      	sub	sp, #12
 800342a:	af00      	add	r7, sp, #0
 800342c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 800342e:	bf00      	nop
 8003430:	370c      	adds	r7, #12
 8003432:	46bd      	mov	sp, r7
 8003434:	bc80      	pop	{r7}
 8003436:	4770      	bx	lr

08003438 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8003438:	b480      	push	{r7}
 800343a:	b083      	sub	sp, #12
 800343c:	af00      	add	r7, sp, #0
 800343e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8003440:	bf00      	nop
 8003442:	370c      	adds	r7, #12
 8003444:	46bd      	mov	sp, r7
 8003446:	bc80      	pop	{r7}
 8003448:	4770      	bx	lr

0800344a <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog callback in non blocking mode. 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 800344a:	b480      	push	{r7}
 800344c:	b083      	sub	sp, #12
 800344e:	af00      	add	r7, sp, #0
 8003450:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8003452:	bf00      	nop
 8003454:	370c      	adds	r7, #12
 8003456:	46bd      	mov	sp, r7
 8003458:	bc80      	pop	{r7}
 800345a:	4770      	bx	lr

0800345c <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 800345c:	b480      	push	{r7}
 800345e:	b083      	sub	sp, #12
 8003460:	af00      	add	r7, sp, #0
 8003462:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8003464:	bf00      	nop
 8003466:	370c      	adds	r7, #12
 8003468:	46bd      	mov	sp, r7
 800346a:	bc80      	pop	{r7}
 800346c:	4770      	bx	lr
	...

08003470 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8003470:	b480      	push	{r7}
 8003472:	b085      	sub	sp, #20
 8003474:	af00      	add	r7, sp, #0
 8003476:	6078      	str	r0, [r7, #4]
 8003478:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800347a:	2300      	movs	r3, #0
 800347c:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 800347e:	2300      	movs	r3, #0
 8003480:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003488:	2b01      	cmp	r3, #1
 800348a:	d101      	bne.n	8003490 <HAL_ADC_ConfigChannel+0x20>
 800348c:	2302      	movs	r3, #2
 800348e:	e0dc      	b.n	800364a <HAL_ADC_ConfigChannel+0x1da>
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	2201      	movs	r2, #1
 8003494:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8003498:	683b      	ldr	r3, [r7, #0]
 800349a:	685b      	ldr	r3, [r3, #4]
 800349c:	2b06      	cmp	r3, #6
 800349e:	d81c      	bhi.n	80034da <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80034a6:	683b      	ldr	r3, [r7, #0]
 80034a8:	685a      	ldr	r2, [r3, #4]
 80034aa:	4613      	mov	r3, r2
 80034ac:	009b      	lsls	r3, r3, #2
 80034ae:	4413      	add	r3, r2
 80034b0:	3b05      	subs	r3, #5
 80034b2:	221f      	movs	r2, #31
 80034b4:	fa02 f303 	lsl.w	r3, r2, r3
 80034b8:	43db      	mvns	r3, r3
 80034ba:	4019      	ands	r1, r3
 80034bc:	683b      	ldr	r3, [r7, #0]
 80034be:	6818      	ldr	r0, [r3, #0]
 80034c0:	683b      	ldr	r3, [r7, #0]
 80034c2:	685a      	ldr	r2, [r3, #4]
 80034c4:	4613      	mov	r3, r2
 80034c6:	009b      	lsls	r3, r3, #2
 80034c8:	4413      	add	r3, r2
 80034ca:	3b05      	subs	r3, #5
 80034cc:	fa00 f203 	lsl.w	r2, r0, r3
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	430a      	orrs	r2, r1
 80034d6:	635a      	str	r2, [r3, #52]	; 0x34
 80034d8:	e03c      	b.n	8003554 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80034da:	683b      	ldr	r3, [r7, #0]
 80034dc:	685b      	ldr	r3, [r3, #4]
 80034de:	2b0c      	cmp	r3, #12
 80034e0:	d81c      	bhi.n	800351c <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80034e8:	683b      	ldr	r3, [r7, #0]
 80034ea:	685a      	ldr	r2, [r3, #4]
 80034ec:	4613      	mov	r3, r2
 80034ee:	009b      	lsls	r3, r3, #2
 80034f0:	4413      	add	r3, r2
 80034f2:	3b23      	subs	r3, #35	; 0x23
 80034f4:	221f      	movs	r2, #31
 80034f6:	fa02 f303 	lsl.w	r3, r2, r3
 80034fa:	43db      	mvns	r3, r3
 80034fc:	4019      	ands	r1, r3
 80034fe:	683b      	ldr	r3, [r7, #0]
 8003500:	6818      	ldr	r0, [r3, #0]
 8003502:	683b      	ldr	r3, [r7, #0]
 8003504:	685a      	ldr	r2, [r3, #4]
 8003506:	4613      	mov	r3, r2
 8003508:	009b      	lsls	r3, r3, #2
 800350a:	4413      	add	r3, r2
 800350c:	3b23      	subs	r3, #35	; 0x23
 800350e:	fa00 f203 	lsl.w	r2, r0, r3
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	430a      	orrs	r2, r1
 8003518:	631a      	str	r2, [r3, #48]	; 0x30
 800351a:	e01b      	b.n	8003554 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003522:	683b      	ldr	r3, [r7, #0]
 8003524:	685a      	ldr	r2, [r3, #4]
 8003526:	4613      	mov	r3, r2
 8003528:	009b      	lsls	r3, r3, #2
 800352a:	4413      	add	r3, r2
 800352c:	3b41      	subs	r3, #65	; 0x41
 800352e:	221f      	movs	r2, #31
 8003530:	fa02 f303 	lsl.w	r3, r2, r3
 8003534:	43db      	mvns	r3, r3
 8003536:	4019      	ands	r1, r3
 8003538:	683b      	ldr	r3, [r7, #0]
 800353a:	6818      	ldr	r0, [r3, #0]
 800353c:	683b      	ldr	r3, [r7, #0]
 800353e:	685a      	ldr	r2, [r3, #4]
 8003540:	4613      	mov	r3, r2
 8003542:	009b      	lsls	r3, r3, #2
 8003544:	4413      	add	r3, r2
 8003546:	3b41      	subs	r3, #65	; 0x41
 8003548:	fa00 f203 	lsl.w	r2, r0, r3
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	430a      	orrs	r2, r1
 8003552:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8003554:	683b      	ldr	r3, [r7, #0]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	2b09      	cmp	r3, #9
 800355a:	d91c      	bls.n	8003596 <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	68d9      	ldr	r1, [r3, #12]
 8003562:	683b      	ldr	r3, [r7, #0]
 8003564:	681a      	ldr	r2, [r3, #0]
 8003566:	4613      	mov	r3, r2
 8003568:	005b      	lsls	r3, r3, #1
 800356a:	4413      	add	r3, r2
 800356c:	3b1e      	subs	r3, #30
 800356e:	2207      	movs	r2, #7
 8003570:	fa02 f303 	lsl.w	r3, r2, r3
 8003574:	43db      	mvns	r3, r3
 8003576:	4019      	ands	r1, r3
 8003578:	683b      	ldr	r3, [r7, #0]
 800357a:	6898      	ldr	r0, [r3, #8]
 800357c:	683b      	ldr	r3, [r7, #0]
 800357e:	681a      	ldr	r2, [r3, #0]
 8003580:	4613      	mov	r3, r2
 8003582:	005b      	lsls	r3, r3, #1
 8003584:	4413      	add	r3, r2
 8003586:	3b1e      	subs	r3, #30
 8003588:	fa00 f203 	lsl.w	r2, r0, r3
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	430a      	orrs	r2, r1
 8003592:	60da      	str	r2, [r3, #12]
 8003594:	e019      	b.n	80035ca <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	6919      	ldr	r1, [r3, #16]
 800359c:	683b      	ldr	r3, [r7, #0]
 800359e:	681a      	ldr	r2, [r3, #0]
 80035a0:	4613      	mov	r3, r2
 80035a2:	005b      	lsls	r3, r3, #1
 80035a4:	4413      	add	r3, r2
 80035a6:	2207      	movs	r2, #7
 80035a8:	fa02 f303 	lsl.w	r3, r2, r3
 80035ac:	43db      	mvns	r3, r3
 80035ae:	4019      	ands	r1, r3
 80035b0:	683b      	ldr	r3, [r7, #0]
 80035b2:	6898      	ldr	r0, [r3, #8]
 80035b4:	683b      	ldr	r3, [r7, #0]
 80035b6:	681a      	ldr	r2, [r3, #0]
 80035b8:	4613      	mov	r3, r2
 80035ba:	005b      	lsls	r3, r3, #1
 80035bc:	4413      	add	r3, r2
 80035be:	fa00 f203 	lsl.w	r2, r0, r3
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	430a      	orrs	r2, r1
 80035c8:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80035ca:	683b      	ldr	r3, [r7, #0]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	2b10      	cmp	r3, #16
 80035d0:	d003      	beq.n	80035da <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 80035d2:	683b      	ldr	r3, [r7, #0]
 80035d4:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80035d6:	2b11      	cmp	r3, #17
 80035d8:	d132      	bne.n	8003640 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	4a1d      	ldr	r2, [pc, #116]	; (8003654 <HAL_ADC_ConfigChannel+0x1e4>)
 80035e0:	4293      	cmp	r3, r2
 80035e2:	d125      	bne.n	8003630 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	689b      	ldr	r3, [r3, #8]
 80035ea:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80035ee:	2b00      	cmp	r3, #0
 80035f0:	d126      	bne.n	8003640 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	689a      	ldr	r2, [r3, #8]
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8003600:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003602:	683b      	ldr	r3, [r7, #0]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	2b10      	cmp	r3, #16
 8003608:	d11a      	bne.n	8003640 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800360a:	4b13      	ldr	r3, [pc, #76]	; (8003658 <HAL_ADC_ConfigChannel+0x1e8>)
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	4a13      	ldr	r2, [pc, #76]	; (800365c <HAL_ADC_ConfigChannel+0x1ec>)
 8003610:	fba2 2303 	umull	r2, r3, r2, r3
 8003614:	0c9a      	lsrs	r2, r3, #18
 8003616:	4613      	mov	r3, r2
 8003618:	009b      	lsls	r3, r3, #2
 800361a:	4413      	add	r3, r2
 800361c:	005b      	lsls	r3, r3, #1
 800361e:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8003620:	e002      	b.n	8003628 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8003622:	68bb      	ldr	r3, [r7, #8]
 8003624:	3b01      	subs	r3, #1
 8003626:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8003628:	68bb      	ldr	r3, [r7, #8]
 800362a:	2b00      	cmp	r3, #0
 800362c:	d1f9      	bne.n	8003622 <HAL_ADC_ConfigChannel+0x1b2>
 800362e:	e007      	b.n	8003640 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003634:	f043 0220 	orr.w	r2, r3, #32
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 800363c:	2301      	movs	r3, #1
 800363e:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	2200      	movs	r2, #0
 8003644:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8003648:	7bfb      	ldrb	r3, [r7, #15]
}
 800364a:	4618      	mov	r0, r3
 800364c:	3714      	adds	r7, #20
 800364e:	46bd      	mov	sp, r7
 8003650:	bc80      	pop	{r7}
 8003652:	4770      	bx	lr
 8003654:	40012400 	.word	0x40012400
 8003658:	20000004 	.word	0x20000004
 800365c:	431bde83 	.word	0x431bde83

08003660 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8003660:	b580      	push	{r7, lr}
 8003662:	b084      	sub	sp, #16
 8003664:	af00      	add	r7, sp, #0
 8003666:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003668:	2300      	movs	r3, #0
 800366a:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 800366c:	2300      	movs	r3, #0
 800366e:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	689b      	ldr	r3, [r3, #8]
 8003676:	f003 0301 	and.w	r3, r3, #1
 800367a:	2b01      	cmp	r3, #1
 800367c:	d040      	beq.n	8003700 <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	689a      	ldr	r2, [r3, #8]
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	f042 0201 	orr.w	r2, r2, #1
 800368c:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800368e:	4b1f      	ldr	r3, [pc, #124]	; (800370c <ADC_Enable+0xac>)
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	4a1f      	ldr	r2, [pc, #124]	; (8003710 <ADC_Enable+0xb0>)
 8003694:	fba2 2303 	umull	r2, r3, r2, r3
 8003698:	0c9b      	lsrs	r3, r3, #18
 800369a:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 800369c:	e002      	b.n	80036a4 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 800369e:	68bb      	ldr	r3, [r7, #8]
 80036a0:	3b01      	subs	r3, #1
 80036a2:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 80036a4:	68bb      	ldr	r3, [r7, #8]
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	d1f9      	bne.n	800369e <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 80036aa:	f7ff fc15 	bl	8002ed8 <HAL_GetTick>
 80036ae:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 80036b0:	e01f      	b.n	80036f2 <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80036b2:	f7ff fc11 	bl	8002ed8 <HAL_GetTick>
 80036b6:	4602      	mov	r2, r0
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	1ad3      	subs	r3, r2, r3
 80036bc:	2b02      	cmp	r3, #2
 80036be:	d918      	bls.n	80036f2 <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	689b      	ldr	r3, [r3, #8]
 80036c6:	f003 0301 	and.w	r3, r3, #1
 80036ca:	2b01      	cmp	r3, #1
 80036cc:	d011      	beq.n	80036f2 <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036d2:	f043 0210 	orr.w	r2, r3, #16
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036de:	f043 0201 	orr.w	r2, r3, #1
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	62da      	str	r2, [r3, #44]	; 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	2200      	movs	r2, #0
 80036ea:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 80036ee:	2301      	movs	r3, #1
 80036f0:	e007      	b.n	8003702 <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	689b      	ldr	r3, [r3, #8]
 80036f8:	f003 0301 	and.w	r3, r3, #1
 80036fc:	2b01      	cmp	r3, #1
 80036fe:	d1d8      	bne.n	80036b2 <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8003700:	2300      	movs	r3, #0
}
 8003702:	4618      	mov	r0, r3
 8003704:	3710      	adds	r7, #16
 8003706:	46bd      	mov	sp, r7
 8003708:	bd80      	pop	{r7, pc}
 800370a:	bf00      	nop
 800370c:	20000004 	.word	0x20000004
 8003710:	431bde83 	.word	0x431bde83

08003714 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8003714:	b580      	push	{r7, lr}
 8003716:	b084      	sub	sp, #16
 8003718:	af00      	add	r7, sp, #0
 800371a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800371c:	2300      	movs	r3, #0
 800371e:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	689b      	ldr	r3, [r3, #8]
 8003726:	f003 0301 	and.w	r3, r3, #1
 800372a:	2b01      	cmp	r3, #1
 800372c:	d12e      	bne.n	800378c <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	689a      	ldr	r2, [r3, #8]
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	f022 0201 	bic.w	r2, r2, #1
 800373c:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 800373e:	f7ff fbcb 	bl	8002ed8 <HAL_GetTick>
 8003742:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8003744:	e01b      	b.n	800377e <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8003746:	f7ff fbc7 	bl	8002ed8 <HAL_GetTick>
 800374a:	4602      	mov	r2, r0
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	1ad3      	subs	r3, r2, r3
 8003750:	2b02      	cmp	r3, #2
 8003752:	d914      	bls.n	800377e <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	689b      	ldr	r3, [r3, #8]
 800375a:	f003 0301 	and.w	r3, r3, #1
 800375e:	2b01      	cmp	r3, #1
 8003760:	d10d      	bne.n	800377e <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003766:	f043 0210 	orr.w	r2, r3, #16
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003772:	f043 0201 	orr.w	r2, r3, #1
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 800377a:	2301      	movs	r3, #1
 800377c:	e007      	b.n	800378e <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	689b      	ldr	r3, [r3, #8]
 8003784:	f003 0301 	and.w	r3, r3, #1
 8003788:	2b01      	cmp	r3, #1
 800378a:	d0dc      	beq.n	8003746 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 800378c:	2300      	movs	r3, #0
}
 800378e:	4618      	mov	r0, r3
 8003790:	3710      	adds	r7, #16
 8003792:	46bd      	mov	sp, r7
 8003794:	bd80      	pop	{r7, pc}

08003796 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8003796:	b580      	push	{r7, lr}
 8003798:	b084      	sub	sp, #16
 800379a:	af00      	add	r7, sp, #0
 800379c:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037a2:	60fb      	str	r3, [r7, #12]
 
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80037a8:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80037ac:	2b00      	cmp	r3, #0
 80037ae:	d127      	bne.n	8003800 <ADC_DMAConvCplt+0x6a>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80037b4:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80037b8:	68fb      	ldr	r3, [r7, #12]
 80037ba:	629a      	str	r2, [r3, #40]	; 0x28
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    /* Note: On STM32F1 devices, in case of sequencer enabled                 */
    /*       (several ranks selected), end of conversion flag is raised       */
    /*       at the end of the sequence.                                      */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80037bc:	68fb      	ldr	r3, [r7, #12]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	689b      	ldr	r3, [r3, #8]
 80037c2:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 80037c6:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 80037ca:	d115      	bne.n	80037f8 <ADC_DMAConvCplt+0x62>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	7b1b      	ldrb	r3, [r3, #12]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80037d0:	2b00      	cmp	r3, #0
 80037d2:	d111      	bne.n	80037f8 <ADC_DMAConvCplt+0x62>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80037d8:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	629a      	str	r2, [r3, #40]	; 0x28
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80037e0:	68fb      	ldr	r3, [r7, #12]
 80037e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80037e4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80037e8:	2b00      	cmp	r3, #0
 80037ea:	d105      	bne.n	80037f8 <ADC_DMAConvCplt+0x62>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80037ec:	68fb      	ldr	r3, [r7, #12]
 80037ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80037f0:	f043 0201 	orr.w	r2, r3, #1
 80037f4:	68fb      	ldr	r3, [r7, #12]
 80037f6:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80037f8:	68f8      	ldr	r0, [r7, #12]
 80037fa:	f7ff fe14 	bl	8003426 <HAL_ADC_ConvCpltCallback>
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }
}
 80037fe:	e004      	b.n	800380a <ADC_DMAConvCplt+0x74>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	6a1b      	ldr	r3, [r3, #32]
 8003804:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003806:	6878      	ldr	r0, [r7, #4]
 8003808:	4798      	blx	r3
}
 800380a:	bf00      	nop
 800380c:	3710      	adds	r7, #16
 800380e:	46bd      	mov	sp, r7
 8003810:	bd80      	pop	{r7, pc}

08003812 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8003812:	b580      	push	{r7, lr}
 8003814:	b084      	sub	sp, #16
 8003816:	af00      	add	r7, sp, #0
 8003818:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800381e:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8003820:	68f8      	ldr	r0, [r7, #12]
 8003822:	f7ff fe09 	bl	8003438 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003826:	bf00      	nop
 8003828:	3710      	adds	r7, #16
 800382a:	46bd      	mov	sp, r7
 800382c:	bd80      	pop	{r7, pc}

0800382e <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 800382e:	b580      	push	{r7, lr}
 8003830:	b084      	sub	sp, #16
 8003832:	af00      	add	r7, sp, #0
 8003834:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800383a:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003840:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8003844:	68fb      	ldr	r3, [r7, #12]
 8003846:	629a      	str	r2, [r3, #40]	; 0x28
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800384c:	f043 0204 	orr.w	r2, r3, #4
 8003850:	68fb      	ldr	r3, [r7, #12]
 8003852:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8003854:	68f8      	ldr	r0, [r7, #12]
 8003856:	f7ff fe01 	bl	800345c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800385a:	bf00      	nop
 800385c:	3710      	adds	r7, #16
 800385e:	46bd      	mov	sp, r7
 8003860:	bd80      	pop	{r7, pc}

08003862 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8003862:	b480      	push	{r7}
 8003864:	b083      	sub	sp, #12
 8003866:	af00      	add	r7, sp, #0
 8003868:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADCEx_InjectedConvCpltCallback could be implemented in the user file
  */
}
 800386a:	bf00      	nop
 800386c:	370c      	adds	r7, #12
 800386e:	46bd      	mov	sp, r7
 8003870:	bc80      	pop	{r7}
 8003872:	4770      	bx	lr

08003874 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003874:	b480      	push	{r7}
 8003876:	b085      	sub	sp, #20
 8003878:	af00      	add	r7, sp, #0
 800387a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	f003 0307 	and.w	r3, r3, #7
 8003882:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003884:	4b0c      	ldr	r3, [pc, #48]	; (80038b8 <__NVIC_SetPriorityGrouping+0x44>)
 8003886:	68db      	ldr	r3, [r3, #12]
 8003888:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800388a:	68ba      	ldr	r2, [r7, #8]
 800388c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003890:	4013      	ands	r3, r2
 8003892:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003898:	68bb      	ldr	r3, [r7, #8]
 800389a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800389c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80038a0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80038a4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80038a6:	4a04      	ldr	r2, [pc, #16]	; (80038b8 <__NVIC_SetPriorityGrouping+0x44>)
 80038a8:	68bb      	ldr	r3, [r7, #8]
 80038aa:	60d3      	str	r3, [r2, #12]
}
 80038ac:	bf00      	nop
 80038ae:	3714      	adds	r7, #20
 80038b0:	46bd      	mov	sp, r7
 80038b2:	bc80      	pop	{r7}
 80038b4:	4770      	bx	lr
 80038b6:	bf00      	nop
 80038b8:	e000ed00 	.word	0xe000ed00

080038bc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80038bc:	b480      	push	{r7}
 80038be:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80038c0:	4b04      	ldr	r3, [pc, #16]	; (80038d4 <__NVIC_GetPriorityGrouping+0x18>)
 80038c2:	68db      	ldr	r3, [r3, #12]
 80038c4:	0a1b      	lsrs	r3, r3, #8
 80038c6:	f003 0307 	and.w	r3, r3, #7
}
 80038ca:	4618      	mov	r0, r3
 80038cc:	46bd      	mov	sp, r7
 80038ce:	bc80      	pop	{r7}
 80038d0:	4770      	bx	lr
 80038d2:	bf00      	nop
 80038d4:	e000ed00 	.word	0xe000ed00

080038d8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80038d8:	b480      	push	{r7}
 80038da:	b083      	sub	sp, #12
 80038dc:	af00      	add	r7, sp, #0
 80038de:	4603      	mov	r3, r0
 80038e0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80038e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	db0b      	blt.n	8003902 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80038ea:	79fb      	ldrb	r3, [r7, #7]
 80038ec:	f003 021f 	and.w	r2, r3, #31
 80038f0:	4906      	ldr	r1, [pc, #24]	; (800390c <__NVIC_EnableIRQ+0x34>)
 80038f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80038f6:	095b      	lsrs	r3, r3, #5
 80038f8:	2001      	movs	r0, #1
 80038fa:	fa00 f202 	lsl.w	r2, r0, r2
 80038fe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003902:	bf00      	nop
 8003904:	370c      	adds	r7, #12
 8003906:	46bd      	mov	sp, r7
 8003908:	bc80      	pop	{r7}
 800390a:	4770      	bx	lr
 800390c:	e000e100 	.word	0xe000e100

08003910 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003910:	b480      	push	{r7}
 8003912:	b083      	sub	sp, #12
 8003914:	af00      	add	r7, sp, #0
 8003916:	4603      	mov	r3, r0
 8003918:	6039      	str	r1, [r7, #0]
 800391a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800391c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003920:	2b00      	cmp	r3, #0
 8003922:	db0a      	blt.n	800393a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003924:	683b      	ldr	r3, [r7, #0]
 8003926:	b2da      	uxtb	r2, r3
 8003928:	490c      	ldr	r1, [pc, #48]	; (800395c <__NVIC_SetPriority+0x4c>)
 800392a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800392e:	0112      	lsls	r2, r2, #4
 8003930:	b2d2      	uxtb	r2, r2
 8003932:	440b      	add	r3, r1
 8003934:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003938:	e00a      	b.n	8003950 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800393a:	683b      	ldr	r3, [r7, #0]
 800393c:	b2da      	uxtb	r2, r3
 800393e:	4908      	ldr	r1, [pc, #32]	; (8003960 <__NVIC_SetPriority+0x50>)
 8003940:	79fb      	ldrb	r3, [r7, #7]
 8003942:	f003 030f 	and.w	r3, r3, #15
 8003946:	3b04      	subs	r3, #4
 8003948:	0112      	lsls	r2, r2, #4
 800394a:	b2d2      	uxtb	r2, r2
 800394c:	440b      	add	r3, r1
 800394e:	761a      	strb	r2, [r3, #24]
}
 8003950:	bf00      	nop
 8003952:	370c      	adds	r7, #12
 8003954:	46bd      	mov	sp, r7
 8003956:	bc80      	pop	{r7}
 8003958:	4770      	bx	lr
 800395a:	bf00      	nop
 800395c:	e000e100 	.word	0xe000e100
 8003960:	e000ed00 	.word	0xe000ed00

08003964 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003964:	b480      	push	{r7}
 8003966:	b089      	sub	sp, #36	; 0x24
 8003968:	af00      	add	r7, sp, #0
 800396a:	60f8      	str	r0, [r7, #12]
 800396c:	60b9      	str	r1, [r7, #8]
 800396e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003970:	68fb      	ldr	r3, [r7, #12]
 8003972:	f003 0307 	and.w	r3, r3, #7
 8003976:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003978:	69fb      	ldr	r3, [r7, #28]
 800397a:	f1c3 0307 	rsb	r3, r3, #7
 800397e:	2b04      	cmp	r3, #4
 8003980:	bf28      	it	cs
 8003982:	2304      	movcs	r3, #4
 8003984:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003986:	69fb      	ldr	r3, [r7, #28]
 8003988:	3304      	adds	r3, #4
 800398a:	2b06      	cmp	r3, #6
 800398c:	d902      	bls.n	8003994 <NVIC_EncodePriority+0x30>
 800398e:	69fb      	ldr	r3, [r7, #28]
 8003990:	3b03      	subs	r3, #3
 8003992:	e000      	b.n	8003996 <NVIC_EncodePriority+0x32>
 8003994:	2300      	movs	r3, #0
 8003996:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003998:	f04f 32ff 	mov.w	r2, #4294967295
 800399c:	69bb      	ldr	r3, [r7, #24]
 800399e:	fa02 f303 	lsl.w	r3, r2, r3
 80039a2:	43da      	mvns	r2, r3
 80039a4:	68bb      	ldr	r3, [r7, #8]
 80039a6:	401a      	ands	r2, r3
 80039a8:	697b      	ldr	r3, [r7, #20]
 80039aa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80039ac:	f04f 31ff 	mov.w	r1, #4294967295
 80039b0:	697b      	ldr	r3, [r7, #20]
 80039b2:	fa01 f303 	lsl.w	r3, r1, r3
 80039b6:	43d9      	mvns	r1, r3
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80039bc:	4313      	orrs	r3, r2
         );
}
 80039be:	4618      	mov	r0, r3
 80039c0:	3724      	adds	r7, #36	; 0x24
 80039c2:	46bd      	mov	sp, r7
 80039c4:	bc80      	pop	{r7}
 80039c6:	4770      	bx	lr

080039c8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80039c8:	b580      	push	{r7, lr}
 80039ca:	b082      	sub	sp, #8
 80039cc:	af00      	add	r7, sp, #0
 80039ce:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	3b01      	subs	r3, #1
 80039d4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80039d8:	d301      	bcc.n	80039de <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80039da:	2301      	movs	r3, #1
 80039dc:	e00f      	b.n	80039fe <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80039de:	4a0a      	ldr	r2, [pc, #40]	; (8003a08 <SysTick_Config+0x40>)
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	3b01      	subs	r3, #1
 80039e4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80039e6:	210f      	movs	r1, #15
 80039e8:	f04f 30ff 	mov.w	r0, #4294967295
 80039ec:	f7ff ff90 	bl	8003910 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80039f0:	4b05      	ldr	r3, [pc, #20]	; (8003a08 <SysTick_Config+0x40>)
 80039f2:	2200      	movs	r2, #0
 80039f4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80039f6:	4b04      	ldr	r3, [pc, #16]	; (8003a08 <SysTick_Config+0x40>)
 80039f8:	2207      	movs	r2, #7
 80039fa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80039fc:	2300      	movs	r3, #0
}
 80039fe:	4618      	mov	r0, r3
 8003a00:	3708      	adds	r7, #8
 8003a02:	46bd      	mov	sp, r7
 8003a04:	bd80      	pop	{r7, pc}
 8003a06:	bf00      	nop
 8003a08:	e000e010 	.word	0xe000e010

08003a0c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003a0c:	b580      	push	{r7, lr}
 8003a0e:	b082      	sub	sp, #8
 8003a10:	af00      	add	r7, sp, #0
 8003a12:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003a14:	6878      	ldr	r0, [r7, #4]
 8003a16:	f7ff ff2d 	bl	8003874 <__NVIC_SetPriorityGrouping>
}
 8003a1a:	bf00      	nop
 8003a1c:	3708      	adds	r7, #8
 8003a1e:	46bd      	mov	sp, r7
 8003a20:	bd80      	pop	{r7, pc}

08003a22 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003a22:	b580      	push	{r7, lr}
 8003a24:	b086      	sub	sp, #24
 8003a26:	af00      	add	r7, sp, #0
 8003a28:	4603      	mov	r3, r0
 8003a2a:	60b9      	str	r1, [r7, #8]
 8003a2c:	607a      	str	r2, [r7, #4]
 8003a2e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003a30:	2300      	movs	r3, #0
 8003a32:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003a34:	f7ff ff42 	bl	80038bc <__NVIC_GetPriorityGrouping>
 8003a38:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003a3a:	687a      	ldr	r2, [r7, #4]
 8003a3c:	68b9      	ldr	r1, [r7, #8]
 8003a3e:	6978      	ldr	r0, [r7, #20]
 8003a40:	f7ff ff90 	bl	8003964 <NVIC_EncodePriority>
 8003a44:	4602      	mov	r2, r0
 8003a46:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003a4a:	4611      	mov	r1, r2
 8003a4c:	4618      	mov	r0, r3
 8003a4e:	f7ff ff5f 	bl	8003910 <__NVIC_SetPriority>
}
 8003a52:	bf00      	nop
 8003a54:	3718      	adds	r7, #24
 8003a56:	46bd      	mov	sp, r7
 8003a58:	bd80      	pop	{r7, pc}

08003a5a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003a5a:	b580      	push	{r7, lr}
 8003a5c:	b082      	sub	sp, #8
 8003a5e:	af00      	add	r7, sp, #0
 8003a60:	4603      	mov	r3, r0
 8003a62:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003a64:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003a68:	4618      	mov	r0, r3
 8003a6a:	f7ff ff35 	bl	80038d8 <__NVIC_EnableIRQ>
}
 8003a6e:	bf00      	nop
 8003a70:	3708      	adds	r7, #8
 8003a72:	46bd      	mov	sp, r7
 8003a74:	bd80      	pop	{r7, pc}

08003a76 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003a76:	b580      	push	{r7, lr}
 8003a78:	b082      	sub	sp, #8
 8003a7a:	af00      	add	r7, sp, #0
 8003a7c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003a7e:	6878      	ldr	r0, [r7, #4]
 8003a80:	f7ff ffa2 	bl	80039c8 <SysTick_Config>
 8003a84:	4603      	mov	r3, r0
}
 8003a86:	4618      	mov	r0, r3
 8003a88:	3708      	adds	r7, #8
 8003a8a:	46bd      	mov	sp, r7
 8003a8c:	bd80      	pop	{r7, pc}
	...

08003a90 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003a90:	b480      	push	{r7}
 8003a92:	b085      	sub	sp, #20
 8003a94:	af00      	add	r7, sp, #0
 8003a96:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003a98:	2300      	movs	r3, #0
 8003a9a:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	d101      	bne.n	8003aa6 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8003aa2:	2301      	movs	r3, #1
 8003aa4:	e043      	b.n	8003b2e <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	461a      	mov	r2, r3
 8003aac:	4b22      	ldr	r3, [pc, #136]	; (8003b38 <HAL_DMA_Init+0xa8>)
 8003aae:	4413      	add	r3, r2
 8003ab0:	4a22      	ldr	r2, [pc, #136]	; (8003b3c <HAL_DMA_Init+0xac>)
 8003ab2:	fba2 2303 	umull	r2, r3, r2, r3
 8003ab6:	091b      	lsrs	r3, r3, #4
 8003ab8:	009a      	lsls	r2, r3, #2
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	4a1f      	ldr	r2, [pc, #124]	; (8003b40 <HAL_DMA_Init+0xb0>)
 8003ac2:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	2202      	movs	r2, #2
 8003ac8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8003ad4:	68fb      	ldr	r3, [r7, #12]
 8003ad6:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8003ada:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8003ade:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8003ae8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	68db      	ldr	r3, [r3, #12]
 8003aee:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003af4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	695b      	ldr	r3, [r3, #20]
 8003afa:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003b00:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	69db      	ldr	r3, [r3, #28]
 8003b06:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8003b08:	68fa      	ldr	r2, [r7, #12]
 8003b0a:	4313      	orrs	r3, r2
 8003b0c:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	68fa      	ldr	r2, [r7, #12]
 8003b14:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	2200      	movs	r2, #0
 8003b1a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	2201      	movs	r2, #1
 8003b20:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	2200      	movs	r2, #0
 8003b28:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8003b2c:	2300      	movs	r3, #0
}
 8003b2e:	4618      	mov	r0, r3
 8003b30:	3714      	adds	r7, #20
 8003b32:	46bd      	mov	sp, r7
 8003b34:	bc80      	pop	{r7}
 8003b36:	4770      	bx	lr
 8003b38:	bffdfff8 	.word	0xbffdfff8
 8003b3c:	cccccccd 	.word	0xcccccccd
 8003b40:	40020000 	.word	0x40020000

08003b44 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003b44:	b580      	push	{r7, lr}
 8003b46:	b086      	sub	sp, #24
 8003b48:	af00      	add	r7, sp, #0
 8003b4a:	60f8      	str	r0, [r7, #12]
 8003b4c:	60b9      	str	r1, [r7, #8]
 8003b4e:	607a      	str	r2, [r7, #4]
 8003b50:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003b52:	2300      	movs	r3, #0
 8003b54:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8003b56:	68fb      	ldr	r3, [r7, #12]
 8003b58:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003b5c:	2b01      	cmp	r3, #1
 8003b5e:	d101      	bne.n	8003b64 <HAL_DMA_Start_IT+0x20>
 8003b60:	2302      	movs	r3, #2
 8003b62:	e04a      	b.n	8003bfa <HAL_DMA_Start_IT+0xb6>
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	2201      	movs	r2, #1
 8003b68:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8003b72:	2b01      	cmp	r3, #1
 8003b74:	d13a      	bne.n	8003bec <HAL_DMA_Start_IT+0xa8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003b76:	68fb      	ldr	r3, [r7, #12]
 8003b78:	2202      	movs	r2, #2
 8003b7a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003b7e:	68fb      	ldr	r3, [r7, #12]
 8003b80:	2200      	movs	r2, #0
 8003b82:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	681a      	ldr	r2, [r3, #0]
 8003b8a:	68fb      	ldr	r3, [r7, #12]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	f022 0201 	bic.w	r2, r2, #1
 8003b92:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003b94:	683b      	ldr	r3, [r7, #0]
 8003b96:	687a      	ldr	r2, [r7, #4]
 8003b98:	68b9      	ldr	r1, [r7, #8]
 8003b9a:	68f8      	ldr	r0, [r7, #12]
 8003b9c:	f000 f938 	bl	8003e10 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ba4:	2b00      	cmp	r3, #0
 8003ba6:	d008      	beq.n	8003bba <HAL_DMA_Start_IT+0x76>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003ba8:	68fb      	ldr	r3, [r7, #12]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	681a      	ldr	r2, [r3, #0]
 8003bae:	68fb      	ldr	r3, [r7, #12]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	f042 020e 	orr.w	r2, r2, #14
 8003bb6:	601a      	str	r2, [r3, #0]
 8003bb8:	e00f      	b.n	8003bda <HAL_DMA_Start_IT+0x96>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003bba:	68fb      	ldr	r3, [r7, #12]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	681a      	ldr	r2, [r3, #0]
 8003bc0:	68fb      	ldr	r3, [r7, #12]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	f022 0204 	bic.w	r2, r2, #4
 8003bc8:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8003bca:	68fb      	ldr	r3, [r7, #12]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	681a      	ldr	r2, [r3, #0]
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	f042 020a 	orr.w	r2, r2, #10
 8003bd8:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003bda:	68fb      	ldr	r3, [r7, #12]
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	681a      	ldr	r2, [r3, #0]
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	f042 0201 	orr.w	r2, r2, #1
 8003be8:	601a      	str	r2, [r3, #0]
 8003bea:	e005      	b.n	8003bf8 <HAL_DMA_Start_IT+0xb4>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	2200      	movs	r2, #0
 8003bf0:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8003bf4:	2302      	movs	r3, #2
 8003bf6:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 8003bf8:	7dfb      	ldrb	r3, [r7, #23]
}
 8003bfa:	4618      	mov	r0, r3
 8003bfc:	3718      	adds	r7, #24
 8003bfe:	46bd      	mov	sp, r7
 8003c00:	bd80      	pop	{r7, pc}
	...

08003c04 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003c04:	b580      	push	{r7, lr}
 8003c06:	b084      	sub	sp, #16
 8003c08:	af00      	add	r7, sp, #0
 8003c0a:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c20:	2204      	movs	r2, #4
 8003c22:	409a      	lsls	r2, r3
 8003c24:	68fb      	ldr	r3, [r7, #12]
 8003c26:	4013      	ands	r3, r2
 8003c28:	2b00      	cmp	r3, #0
 8003c2a:	d04f      	beq.n	8003ccc <HAL_DMA_IRQHandler+0xc8>
 8003c2c:	68bb      	ldr	r3, [r7, #8]
 8003c2e:	f003 0304 	and.w	r3, r3, #4
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	d04a      	beq.n	8003ccc <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	f003 0320 	and.w	r3, r3, #32
 8003c40:	2b00      	cmp	r3, #0
 8003c42:	d107      	bne.n	8003c54 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	681a      	ldr	r2, [r3, #0]
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	f022 0204 	bic.w	r2, r2, #4
 8003c52:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	4a66      	ldr	r2, [pc, #408]	; (8003df4 <HAL_DMA_IRQHandler+0x1f0>)
 8003c5a:	4293      	cmp	r3, r2
 8003c5c:	d029      	beq.n	8003cb2 <HAL_DMA_IRQHandler+0xae>
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	4a65      	ldr	r2, [pc, #404]	; (8003df8 <HAL_DMA_IRQHandler+0x1f4>)
 8003c64:	4293      	cmp	r3, r2
 8003c66:	d022      	beq.n	8003cae <HAL_DMA_IRQHandler+0xaa>
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	4a63      	ldr	r2, [pc, #396]	; (8003dfc <HAL_DMA_IRQHandler+0x1f8>)
 8003c6e:	4293      	cmp	r3, r2
 8003c70:	d01a      	beq.n	8003ca8 <HAL_DMA_IRQHandler+0xa4>
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	4a62      	ldr	r2, [pc, #392]	; (8003e00 <HAL_DMA_IRQHandler+0x1fc>)
 8003c78:	4293      	cmp	r3, r2
 8003c7a:	d012      	beq.n	8003ca2 <HAL_DMA_IRQHandler+0x9e>
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	4a60      	ldr	r2, [pc, #384]	; (8003e04 <HAL_DMA_IRQHandler+0x200>)
 8003c82:	4293      	cmp	r3, r2
 8003c84:	d00a      	beq.n	8003c9c <HAL_DMA_IRQHandler+0x98>
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	4a5f      	ldr	r2, [pc, #380]	; (8003e08 <HAL_DMA_IRQHandler+0x204>)
 8003c8c:	4293      	cmp	r3, r2
 8003c8e:	d102      	bne.n	8003c96 <HAL_DMA_IRQHandler+0x92>
 8003c90:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8003c94:	e00e      	b.n	8003cb4 <HAL_DMA_IRQHandler+0xb0>
 8003c96:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8003c9a:	e00b      	b.n	8003cb4 <HAL_DMA_IRQHandler+0xb0>
 8003c9c:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8003ca0:	e008      	b.n	8003cb4 <HAL_DMA_IRQHandler+0xb0>
 8003ca2:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8003ca6:	e005      	b.n	8003cb4 <HAL_DMA_IRQHandler+0xb0>
 8003ca8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003cac:	e002      	b.n	8003cb4 <HAL_DMA_IRQHandler+0xb0>
 8003cae:	2340      	movs	r3, #64	; 0x40
 8003cb0:	e000      	b.n	8003cb4 <HAL_DMA_IRQHandler+0xb0>
 8003cb2:	2304      	movs	r3, #4
 8003cb4:	4a55      	ldr	r2, [pc, #340]	; (8003e0c <HAL_DMA_IRQHandler+0x208>)
 8003cb6:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003cbc:	2b00      	cmp	r3, #0
 8003cbe:	f000 8094 	beq.w	8003dea <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003cc6:	6878      	ldr	r0, [r7, #4]
 8003cc8:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8003cca:	e08e      	b.n	8003dea <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cd0:	2202      	movs	r2, #2
 8003cd2:	409a      	lsls	r2, r3
 8003cd4:	68fb      	ldr	r3, [r7, #12]
 8003cd6:	4013      	ands	r3, r2
 8003cd8:	2b00      	cmp	r3, #0
 8003cda:	d056      	beq.n	8003d8a <HAL_DMA_IRQHandler+0x186>
 8003cdc:	68bb      	ldr	r3, [r7, #8]
 8003cde:	f003 0302 	and.w	r3, r3, #2
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	d051      	beq.n	8003d8a <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	f003 0320 	and.w	r3, r3, #32
 8003cf0:	2b00      	cmp	r3, #0
 8003cf2:	d10b      	bne.n	8003d0c <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	681a      	ldr	r2, [r3, #0]
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	f022 020a 	bic.w	r2, r2, #10
 8003d02:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	2201      	movs	r2, #1
 8003d08:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	4a38      	ldr	r2, [pc, #224]	; (8003df4 <HAL_DMA_IRQHandler+0x1f0>)
 8003d12:	4293      	cmp	r3, r2
 8003d14:	d029      	beq.n	8003d6a <HAL_DMA_IRQHandler+0x166>
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	4a37      	ldr	r2, [pc, #220]	; (8003df8 <HAL_DMA_IRQHandler+0x1f4>)
 8003d1c:	4293      	cmp	r3, r2
 8003d1e:	d022      	beq.n	8003d66 <HAL_DMA_IRQHandler+0x162>
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	4a35      	ldr	r2, [pc, #212]	; (8003dfc <HAL_DMA_IRQHandler+0x1f8>)
 8003d26:	4293      	cmp	r3, r2
 8003d28:	d01a      	beq.n	8003d60 <HAL_DMA_IRQHandler+0x15c>
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	4a34      	ldr	r2, [pc, #208]	; (8003e00 <HAL_DMA_IRQHandler+0x1fc>)
 8003d30:	4293      	cmp	r3, r2
 8003d32:	d012      	beq.n	8003d5a <HAL_DMA_IRQHandler+0x156>
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	4a32      	ldr	r2, [pc, #200]	; (8003e04 <HAL_DMA_IRQHandler+0x200>)
 8003d3a:	4293      	cmp	r3, r2
 8003d3c:	d00a      	beq.n	8003d54 <HAL_DMA_IRQHandler+0x150>
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	4a31      	ldr	r2, [pc, #196]	; (8003e08 <HAL_DMA_IRQHandler+0x204>)
 8003d44:	4293      	cmp	r3, r2
 8003d46:	d102      	bne.n	8003d4e <HAL_DMA_IRQHandler+0x14a>
 8003d48:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8003d4c:	e00e      	b.n	8003d6c <HAL_DMA_IRQHandler+0x168>
 8003d4e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003d52:	e00b      	b.n	8003d6c <HAL_DMA_IRQHandler+0x168>
 8003d54:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003d58:	e008      	b.n	8003d6c <HAL_DMA_IRQHandler+0x168>
 8003d5a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003d5e:	e005      	b.n	8003d6c <HAL_DMA_IRQHandler+0x168>
 8003d60:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003d64:	e002      	b.n	8003d6c <HAL_DMA_IRQHandler+0x168>
 8003d66:	2320      	movs	r3, #32
 8003d68:	e000      	b.n	8003d6c <HAL_DMA_IRQHandler+0x168>
 8003d6a:	2302      	movs	r3, #2
 8003d6c:	4a27      	ldr	r2, [pc, #156]	; (8003e0c <HAL_DMA_IRQHandler+0x208>)
 8003d6e:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	2200      	movs	r2, #0
 8003d74:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d7c:	2b00      	cmp	r3, #0
 8003d7e:	d034      	beq.n	8003dea <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d84:	6878      	ldr	r0, [r7, #4]
 8003d86:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8003d88:	e02f      	b.n	8003dea <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d8e:	2208      	movs	r2, #8
 8003d90:	409a      	lsls	r2, r3
 8003d92:	68fb      	ldr	r3, [r7, #12]
 8003d94:	4013      	ands	r3, r2
 8003d96:	2b00      	cmp	r3, #0
 8003d98:	d028      	beq.n	8003dec <HAL_DMA_IRQHandler+0x1e8>
 8003d9a:	68bb      	ldr	r3, [r7, #8]
 8003d9c:	f003 0308 	and.w	r3, r3, #8
 8003da0:	2b00      	cmp	r3, #0
 8003da2:	d023      	beq.n	8003dec <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	681a      	ldr	r2, [r3, #0]
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	f022 020e 	bic.w	r2, r2, #14
 8003db2:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003dbc:	2101      	movs	r1, #1
 8003dbe:	fa01 f202 	lsl.w	r2, r1, r2
 8003dc2:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	2201      	movs	r2, #1
 8003dc8:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	2201      	movs	r2, #1
 8003dce:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	2200      	movs	r2, #0
 8003dd6:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003dde:	2b00      	cmp	r3, #0
 8003de0:	d004      	beq.n	8003dec <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003de6:	6878      	ldr	r0, [r7, #4]
 8003de8:	4798      	blx	r3
    }
  }
  return;
 8003dea:	bf00      	nop
 8003dec:	bf00      	nop
}
 8003dee:	3710      	adds	r7, #16
 8003df0:	46bd      	mov	sp, r7
 8003df2:	bd80      	pop	{r7, pc}
 8003df4:	40020008 	.word	0x40020008
 8003df8:	4002001c 	.word	0x4002001c
 8003dfc:	40020030 	.word	0x40020030
 8003e00:	40020044 	.word	0x40020044
 8003e04:	40020058 	.word	0x40020058
 8003e08:	4002006c 	.word	0x4002006c
 8003e0c:	40020000 	.word	0x40020000

08003e10 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003e10:	b480      	push	{r7}
 8003e12:	b085      	sub	sp, #20
 8003e14:	af00      	add	r7, sp, #0
 8003e16:	60f8      	str	r0, [r7, #12]
 8003e18:	60b9      	str	r1, [r7, #8]
 8003e1a:	607a      	str	r2, [r7, #4]
 8003e1c:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8003e1e:	68fb      	ldr	r3, [r7, #12]
 8003e20:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003e22:	68fb      	ldr	r3, [r7, #12]
 8003e24:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003e26:	2101      	movs	r1, #1
 8003e28:	fa01 f202 	lsl.w	r2, r1, r2
 8003e2c:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8003e2e:	68fb      	ldr	r3, [r7, #12]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	683a      	ldr	r2, [r7, #0]
 8003e34:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003e36:	68fb      	ldr	r3, [r7, #12]
 8003e38:	685b      	ldr	r3, [r3, #4]
 8003e3a:	2b10      	cmp	r3, #16
 8003e3c:	d108      	bne.n	8003e50 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8003e3e:	68fb      	ldr	r3, [r7, #12]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	687a      	ldr	r2, [r7, #4]
 8003e44:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8003e46:	68fb      	ldr	r3, [r7, #12]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	68ba      	ldr	r2, [r7, #8]
 8003e4c:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8003e4e:	e007      	b.n	8003e60 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8003e50:	68fb      	ldr	r3, [r7, #12]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	68ba      	ldr	r2, [r7, #8]
 8003e56:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	687a      	ldr	r2, [r7, #4]
 8003e5e:	60da      	str	r2, [r3, #12]
}
 8003e60:	bf00      	nop
 8003e62:	3714      	adds	r7, #20
 8003e64:	46bd      	mov	sp, r7
 8003e66:	bc80      	pop	{r7}
 8003e68:	4770      	bx	lr
	...

08003e6c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003e6c:	b480      	push	{r7}
 8003e6e:	b08b      	sub	sp, #44	; 0x2c
 8003e70:	af00      	add	r7, sp, #0
 8003e72:	6078      	str	r0, [r7, #4]
 8003e74:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003e76:	2300      	movs	r3, #0
 8003e78:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8003e7a:	2300      	movs	r3, #0
 8003e7c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003e7e:	e169      	b.n	8004154 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8003e80:	2201      	movs	r2, #1
 8003e82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e84:	fa02 f303 	lsl.w	r3, r2, r3
 8003e88:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003e8a:	683b      	ldr	r3, [r7, #0]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	69fa      	ldr	r2, [r7, #28]
 8003e90:	4013      	ands	r3, r2
 8003e92:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8003e94:	69ba      	ldr	r2, [r7, #24]
 8003e96:	69fb      	ldr	r3, [r7, #28]
 8003e98:	429a      	cmp	r2, r3
 8003e9a:	f040 8158 	bne.w	800414e <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8003e9e:	683b      	ldr	r3, [r7, #0]
 8003ea0:	685b      	ldr	r3, [r3, #4]
 8003ea2:	4a9a      	ldr	r2, [pc, #616]	; (800410c <HAL_GPIO_Init+0x2a0>)
 8003ea4:	4293      	cmp	r3, r2
 8003ea6:	d05e      	beq.n	8003f66 <HAL_GPIO_Init+0xfa>
 8003ea8:	4a98      	ldr	r2, [pc, #608]	; (800410c <HAL_GPIO_Init+0x2a0>)
 8003eaa:	4293      	cmp	r3, r2
 8003eac:	d875      	bhi.n	8003f9a <HAL_GPIO_Init+0x12e>
 8003eae:	4a98      	ldr	r2, [pc, #608]	; (8004110 <HAL_GPIO_Init+0x2a4>)
 8003eb0:	4293      	cmp	r3, r2
 8003eb2:	d058      	beq.n	8003f66 <HAL_GPIO_Init+0xfa>
 8003eb4:	4a96      	ldr	r2, [pc, #600]	; (8004110 <HAL_GPIO_Init+0x2a4>)
 8003eb6:	4293      	cmp	r3, r2
 8003eb8:	d86f      	bhi.n	8003f9a <HAL_GPIO_Init+0x12e>
 8003eba:	4a96      	ldr	r2, [pc, #600]	; (8004114 <HAL_GPIO_Init+0x2a8>)
 8003ebc:	4293      	cmp	r3, r2
 8003ebe:	d052      	beq.n	8003f66 <HAL_GPIO_Init+0xfa>
 8003ec0:	4a94      	ldr	r2, [pc, #592]	; (8004114 <HAL_GPIO_Init+0x2a8>)
 8003ec2:	4293      	cmp	r3, r2
 8003ec4:	d869      	bhi.n	8003f9a <HAL_GPIO_Init+0x12e>
 8003ec6:	4a94      	ldr	r2, [pc, #592]	; (8004118 <HAL_GPIO_Init+0x2ac>)
 8003ec8:	4293      	cmp	r3, r2
 8003eca:	d04c      	beq.n	8003f66 <HAL_GPIO_Init+0xfa>
 8003ecc:	4a92      	ldr	r2, [pc, #584]	; (8004118 <HAL_GPIO_Init+0x2ac>)
 8003ece:	4293      	cmp	r3, r2
 8003ed0:	d863      	bhi.n	8003f9a <HAL_GPIO_Init+0x12e>
 8003ed2:	4a92      	ldr	r2, [pc, #584]	; (800411c <HAL_GPIO_Init+0x2b0>)
 8003ed4:	4293      	cmp	r3, r2
 8003ed6:	d046      	beq.n	8003f66 <HAL_GPIO_Init+0xfa>
 8003ed8:	4a90      	ldr	r2, [pc, #576]	; (800411c <HAL_GPIO_Init+0x2b0>)
 8003eda:	4293      	cmp	r3, r2
 8003edc:	d85d      	bhi.n	8003f9a <HAL_GPIO_Init+0x12e>
 8003ede:	2b12      	cmp	r3, #18
 8003ee0:	d82a      	bhi.n	8003f38 <HAL_GPIO_Init+0xcc>
 8003ee2:	2b12      	cmp	r3, #18
 8003ee4:	d859      	bhi.n	8003f9a <HAL_GPIO_Init+0x12e>
 8003ee6:	a201      	add	r2, pc, #4	; (adr r2, 8003eec <HAL_GPIO_Init+0x80>)
 8003ee8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003eec:	08003f67 	.word	0x08003f67
 8003ef0:	08003f41 	.word	0x08003f41
 8003ef4:	08003f53 	.word	0x08003f53
 8003ef8:	08003f95 	.word	0x08003f95
 8003efc:	08003f9b 	.word	0x08003f9b
 8003f00:	08003f9b 	.word	0x08003f9b
 8003f04:	08003f9b 	.word	0x08003f9b
 8003f08:	08003f9b 	.word	0x08003f9b
 8003f0c:	08003f9b 	.word	0x08003f9b
 8003f10:	08003f9b 	.word	0x08003f9b
 8003f14:	08003f9b 	.word	0x08003f9b
 8003f18:	08003f9b 	.word	0x08003f9b
 8003f1c:	08003f9b 	.word	0x08003f9b
 8003f20:	08003f9b 	.word	0x08003f9b
 8003f24:	08003f9b 	.word	0x08003f9b
 8003f28:	08003f9b 	.word	0x08003f9b
 8003f2c:	08003f9b 	.word	0x08003f9b
 8003f30:	08003f49 	.word	0x08003f49
 8003f34:	08003f5d 	.word	0x08003f5d
 8003f38:	4a79      	ldr	r2, [pc, #484]	; (8004120 <HAL_GPIO_Init+0x2b4>)
 8003f3a:	4293      	cmp	r3, r2
 8003f3c:	d013      	beq.n	8003f66 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8003f3e:	e02c      	b.n	8003f9a <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8003f40:	683b      	ldr	r3, [r7, #0]
 8003f42:	68db      	ldr	r3, [r3, #12]
 8003f44:	623b      	str	r3, [r7, #32]
          break;
 8003f46:	e029      	b.n	8003f9c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8003f48:	683b      	ldr	r3, [r7, #0]
 8003f4a:	68db      	ldr	r3, [r3, #12]
 8003f4c:	3304      	adds	r3, #4
 8003f4e:	623b      	str	r3, [r7, #32]
          break;
 8003f50:	e024      	b.n	8003f9c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8003f52:	683b      	ldr	r3, [r7, #0]
 8003f54:	68db      	ldr	r3, [r3, #12]
 8003f56:	3308      	adds	r3, #8
 8003f58:	623b      	str	r3, [r7, #32]
          break;
 8003f5a:	e01f      	b.n	8003f9c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8003f5c:	683b      	ldr	r3, [r7, #0]
 8003f5e:	68db      	ldr	r3, [r3, #12]
 8003f60:	330c      	adds	r3, #12
 8003f62:	623b      	str	r3, [r7, #32]
          break;
 8003f64:	e01a      	b.n	8003f9c <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8003f66:	683b      	ldr	r3, [r7, #0]
 8003f68:	689b      	ldr	r3, [r3, #8]
 8003f6a:	2b00      	cmp	r3, #0
 8003f6c:	d102      	bne.n	8003f74 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8003f6e:	2304      	movs	r3, #4
 8003f70:	623b      	str	r3, [r7, #32]
          break;
 8003f72:	e013      	b.n	8003f9c <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8003f74:	683b      	ldr	r3, [r7, #0]
 8003f76:	689b      	ldr	r3, [r3, #8]
 8003f78:	2b01      	cmp	r3, #1
 8003f7a:	d105      	bne.n	8003f88 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003f7c:	2308      	movs	r3, #8
 8003f7e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	69fa      	ldr	r2, [r7, #28]
 8003f84:	611a      	str	r2, [r3, #16]
          break;
 8003f86:	e009      	b.n	8003f9c <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003f88:	2308      	movs	r3, #8
 8003f8a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	69fa      	ldr	r2, [r7, #28]
 8003f90:	615a      	str	r2, [r3, #20]
          break;
 8003f92:	e003      	b.n	8003f9c <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8003f94:	2300      	movs	r3, #0
 8003f96:	623b      	str	r3, [r7, #32]
          break;
 8003f98:	e000      	b.n	8003f9c <HAL_GPIO_Init+0x130>
          break;
 8003f9a:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8003f9c:	69bb      	ldr	r3, [r7, #24]
 8003f9e:	2bff      	cmp	r3, #255	; 0xff
 8003fa0:	d801      	bhi.n	8003fa6 <HAL_GPIO_Init+0x13a>
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	e001      	b.n	8003faa <HAL_GPIO_Init+0x13e>
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	3304      	adds	r3, #4
 8003faa:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8003fac:	69bb      	ldr	r3, [r7, #24]
 8003fae:	2bff      	cmp	r3, #255	; 0xff
 8003fb0:	d802      	bhi.n	8003fb8 <HAL_GPIO_Init+0x14c>
 8003fb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fb4:	009b      	lsls	r3, r3, #2
 8003fb6:	e002      	b.n	8003fbe <HAL_GPIO_Init+0x152>
 8003fb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fba:	3b08      	subs	r3, #8
 8003fbc:	009b      	lsls	r3, r3, #2
 8003fbe:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8003fc0:	697b      	ldr	r3, [r7, #20]
 8003fc2:	681a      	ldr	r2, [r3, #0]
 8003fc4:	210f      	movs	r1, #15
 8003fc6:	693b      	ldr	r3, [r7, #16]
 8003fc8:	fa01 f303 	lsl.w	r3, r1, r3
 8003fcc:	43db      	mvns	r3, r3
 8003fce:	401a      	ands	r2, r3
 8003fd0:	6a39      	ldr	r1, [r7, #32]
 8003fd2:	693b      	ldr	r3, [r7, #16]
 8003fd4:	fa01 f303 	lsl.w	r3, r1, r3
 8003fd8:	431a      	orrs	r2, r3
 8003fda:	697b      	ldr	r3, [r7, #20]
 8003fdc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003fde:	683b      	ldr	r3, [r7, #0]
 8003fe0:	685b      	ldr	r3, [r3, #4]
 8003fe2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003fe6:	2b00      	cmp	r3, #0
 8003fe8:	f000 80b1 	beq.w	800414e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8003fec:	4b4d      	ldr	r3, [pc, #308]	; (8004124 <HAL_GPIO_Init+0x2b8>)
 8003fee:	699b      	ldr	r3, [r3, #24]
 8003ff0:	4a4c      	ldr	r2, [pc, #304]	; (8004124 <HAL_GPIO_Init+0x2b8>)
 8003ff2:	f043 0301 	orr.w	r3, r3, #1
 8003ff6:	6193      	str	r3, [r2, #24]
 8003ff8:	4b4a      	ldr	r3, [pc, #296]	; (8004124 <HAL_GPIO_Init+0x2b8>)
 8003ffa:	699b      	ldr	r3, [r3, #24]
 8003ffc:	f003 0301 	and.w	r3, r3, #1
 8004000:	60bb      	str	r3, [r7, #8]
 8004002:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8004004:	4a48      	ldr	r2, [pc, #288]	; (8004128 <HAL_GPIO_Init+0x2bc>)
 8004006:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004008:	089b      	lsrs	r3, r3, #2
 800400a:	3302      	adds	r3, #2
 800400c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004010:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8004012:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004014:	f003 0303 	and.w	r3, r3, #3
 8004018:	009b      	lsls	r3, r3, #2
 800401a:	220f      	movs	r2, #15
 800401c:	fa02 f303 	lsl.w	r3, r2, r3
 8004020:	43db      	mvns	r3, r3
 8004022:	68fa      	ldr	r2, [r7, #12]
 8004024:	4013      	ands	r3, r2
 8004026:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	4a40      	ldr	r2, [pc, #256]	; (800412c <HAL_GPIO_Init+0x2c0>)
 800402c:	4293      	cmp	r3, r2
 800402e:	d013      	beq.n	8004058 <HAL_GPIO_Init+0x1ec>
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	4a3f      	ldr	r2, [pc, #252]	; (8004130 <HAL_GPIO_Init+0x2c4>)
 8004034:	4293      	cmp	r3, r2
 8004036:	d00d      	beq.n	8004054 <HAL_GPIO_Init+0x1e8>
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	4a3e      	ldr	r2, [pc, #248]	; (8004134 <HAL_GPIO_Init+0x2c8>)
 800403c:	4293      	cmp	r3, r2
 800403e:	d007      	beq.n	8004050 <HAL_GPIO_Init+0x1e4>
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	4a3d      	ldr	r2, [pc, #244]	; (8004138 <HAL_GPIO_Init+0x2cc>)
 8004044:	4293      	cmp	r3, r2
 8004046:	d101      	bne.n	800404c <HAL_GPIO_Init+0x1e0>
 8004048:	2303      	movs	r3, #3
 800404a:	e006      	b.n	800405a <HAL_GPIO_Init+0x1ee>
 800404c:	2304      	movs	r3, #4
 800404e:	e004      	b.n	800405a <HAL_GPIO_Init+0x1ee>
 8004050:	2302      	movs	r3, #2
 8004052:	e002      	b.n	800405a <HAL_GPIO_Init+0x1ee>
 8004054:	2301      	movs	r3, #1
 8004056:	e000      	b.n	800405a <HAL_GPIO_Init+0x1ee>
 8004058:	2300      	movs	r3, #0
 800405a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800405c:	f002 0203 	and.w	r2, r2, #3
 8004060:	0092      	lsls	r2, r2, #2
 8004062:	4093      	lsls	r3, r2
 8004064:	68fa      	ldr	r2, [r7, #12]
 8004066:	4313      	orrs	r3, r2
 8004068:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800406a:	492f      	ldr	r1, [pc, #188]	; (8004128 <HAL_GPIO_Init+0x2bc>)
 800406c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800406e:	089b      	lsrs	r3, r3, #2
 8004070:	3302      	adds	r3, #2
 8004072:	68fa      	ldr	r2, [r7, #12]
 8004074:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8004078:	683b      	ldr	r3, [r7, #0]
 800407a:	685b      	ldr	r3, [r3, #4]
 800407c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004080:	2b00      	cmp	r3, #0
 8004082:	d006      	beq.n	8004092 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8004084:	4b2d      	ldr	r3, [pc, #180]	; (800413c <HAL_GPIO_Init+0x2d0>)
 8004086:	681a      	ldr	r2, [r3, #0]
 8004088:	492c      	ldr	r1, [pc, #176]	; (800413c <HAL_GPIO_Init+0x2d0>)
 800408a:	69bb      	ldr	r3, [r7, #24]
 800408c:	4313      	orrs	r3, r2
 800408e:	600b      	str	r3, [r1, #0]
 8004090:	e006      	b.n	80040a0 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8004092:	4b2a      	ldr	r3, [pc, #168]	; (800413c <HAL_GPIO_Init+0x2d0>)
 8004094:	681a      	ldr	r2, [r3, #0]
 8004096:	69bb      	ldr	r3, [r7, #24]
 8004098:	43db      	mvns	r3, r3
 800409a:	4928      	ldr	r1, [pc, #160]	; (800413c <HAL_GPIO_Init+0x2d0>)
 800409c:	4013      	ands	r3, r2
 800409e:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80040a0:	683b      	ldr	r3, [r7, #0]
 80040a2:	685b      	ldr	r3, [r3, #4]
 80040a4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80040a8:	2b00      	cmp	r3, #0
 80040aa:	d006      	beq.n	80040ba <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80040ac:	4b23      	ldr	r3, [pc, #140]	; (800413c <HAL_GPIO_Init+0x2d0>)
 80040ae:	685a      	ldr	r2, [r3, #4]
 80040b0:	4922      	ldr	r1, [pc, #136]	; (800413c <HAL_GPIO_Init+0x2d0>)
 80040b2:	69bb      	ldr	r3, [r7, #24]
 80040b4:	4313      	orrs	r3, r2
 80040b6:	604b      	str	r3, [r1, #4]
 80040b8:	e006      	b.n	80040c8 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80040ba:	4b20      	ldr	r3, [pc, #128]	; (800413c <HAL_GPIO_Init+0x2d0>)
 80040bc:	685a      	ldr	r2, [r3, #4]
 80040be:	69bb      	ldr	r3, [r7, #24]
 80040c0:	43db      	mvns	r3, r3
 80040c2:	491e      	ldr	r1, [pc, #120]	; (800413c <HAL_GPIO_Init+0x2d0>)
 80040c4:	4013      	ands	r3, r2
 80040c6:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80040c8:	683b      	ldr	r3, [r7, #0]
 80040ca:	685b      	ldr	r3, [r3, #4]
 80040cc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80040d0:	2b00      	cmp	r3, #0
 80040d2:	d006      	beq.n	80040e2 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80040d4:	4b19      	ldr	r3, [pc, #100]	; (800413c <HAL_GPIO_Init+0x2d0>)
 80040d6:	689a      	ldr	r2, [r3, #8]
 80040d8:	4918      	ldr	r1, [pc, #96]	; (800413c <HAL_GPIO_Init+0x2d0>)
 80040da:	69bb      	ldr	r3, [r7, #24]
 80040dc:	4313      	orrs	r3, r2
 80040de:	608b      	str	r3, [r1, #8]
 80040e0:	e006      	b.n	80040f0 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80040e2:	4b16      	ldr	r3, [pc, #88]	; (800413c <HAL_GPIO_Init+0x2d0>)
 80040e4:	689a      	ldr	r2, [r3, #8]
 80040e6:	69bb      	ldr	r3, [r7, #24]
 80040e8:	43db      	mvns	r3, r3
 80040ea:	4914      	ldr	r1, [pc, #80]	; (800413c <HAL_GPIO_Init+0x2d0>)
 80040ec:	4013      	ands	r3, r2
 80040ee:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80040f0:	683b      	ldr	r3, [r7, #0]
 80040f2:	685b      	ldr	r3, [r3, #4]
 80040f4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80040f8:	2b00      	cmp	r3, #0
 80040fa:	d021      	beq.n	8004140 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80040fc:	4b0f      	ldr	r3, [pc, #60]	; (800413c <HAL_GPIO_Init+0x2d0>)
 80040fe:	68da      	ldr	r2, [r3, #12]
 8004100:	490e      	ldr	r1, [pc, #56]	; (800413c <HAL_GPIO_Init+0x2d0>)
 8004102:	69bb      	ldr	r3, [r7, #24]
 8004104:	4313      	orrs	r3, r2
 8004106:	60cb      	str	r3, [r1, #12]
 8004108:	e021      	b.n	800414e <HAL_GPIO_Init+0x2e2>
 800410a:	bf00      	nop
 800410c:	10320000 	.word	0x10320000
 8004110:	10310000 	.word	0x10310000
 8004114:	10220000 	.word	0x10220000
 8004118:	10210000 	.word	0x10210000
 800411c:	10120000 	.word	0x10120000
 8004120:	10110000 	.word	0x10110000
 8004124:	40021000 	.word	0x40021000
 8004128:	40010000 	.word	0x40010000
 800412c:	40010800 	.word	0x40010800
 8004130:	40010c00 	.word	0x40010c00
 8004134:	40011000 	.word	0x40011000
 8004138:	40011400 	.word	0x40011400
 800413c:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8004140:	4b0b      	ldr	r3, [pc, #44]	; (8004170 <HAL_GPIO_Init+0x304>)
 8004142:	68da      	ldr	r2, [r3, #12]
 8004144:	69bb      	ldr	r3, [r7, #24]
 8004146:	43db      	mvns	r3, r3
 8004148:	4909      	ldr	r1, [pc, #36]	; (8004170 <HAL_GPIO_Init+0x304>)
 800414a:	4013      	ands	r3, r2
 800414c:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 800414e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004150:	3301      	adds	r3, #1
 8004152:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004154:	683b      	ldr	r3, [r7, #0]
 8004156:	681a      	ldr	r2, [r3, #0]
 8004158:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800415a:	fa22 f303 	lsr.w	r3, r2, r3
 800415e:	2b00      	cmp	r3, #0
 8004160:	f47f ae8e 	bne.w	8003e80 <HAL_GPIO_Init+0x14>
  }
}
 8004164:	bf00      	nop
 8004166:	bf00      	nop
 8004168:	372c      	adds	r7, #44	; 0x2c
 800416a:	46bd      	mov	sp, r7
 800416c:	bc80      	pop	{r7}
 800416e:	4770      	bx	lr
 8004170:	40010400 	.word	0x40010400

08004174 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004174:	b480      	push	{r7}
 8004176:	b083      	sub	sp, #12
 8004178:	af00      	add	r7, sp, #0
 800417a:	6078      	str	r0, [r7, #4]
 800417c:	460b      	mov	r3, r1
 800417e:	807b      	strh	r3, [r7, #2]
 8004180:	4613      	mov	r3, r2
 8004182:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004184:	787b      	ldrb	r3, [r7, #1]
 8004186:	2b00      	cmp	r3, #0
 8004188:	d003      	beq.n	8004192 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800418a:	887a      	ldrh	r2, [r7, #2]
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8004190:	e003      	b.n	800419a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8004192:	887b      	ldrh	r3, [r7, #2]
 8004194:	041a      	lsls	r2, r3, #16
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	611a      	str	r2, [r3, #16]
}
 800419a:	bf00      	nop
 800419c:	370c      	adds	r7, #12
 800419e:	46bd      	mov	sp, r7
 80041a0:	bc80      	pop	{r7}
 80041a2:	4770      	bx	lr

080041a4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80041a4:	b580      	push	{r7, lr}
 80041a6:	b082      	sub	sp, #8
 80041a8:	af00      	add	r7, sp, #0
 80041aa:	4603      	mov	r3, r0
 80041ac:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80041ae:	4b08      	ldr	r3, [pc, #32]	; (80041d0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80041b0:	695a      	ldr	r2, [r3, #20]
 80041b2:	88fb      	ldrh	r3, [r7, #6]
 80041b4:	4013      	ands	r3, r2
 80041b6:	2b00      	cmp	r3, #0
 80041b8:	d006      	beq.n	80041c8 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80041ba:	4a05      	ldr	r2, [pc, #20]	; (80041d0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80041bc:	88fb      	ldrh	r3, [r7, #6]
 80041be:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80041c0:	88fb      	ldrh	r3, [r7, #6]
 80041c2:	4618      	mov	r0, r3
 80041c4:	f7fe fa10 	bl	80025e8 <HAL_GPIO_EXTI_Callback>
  }
}
 80041c8:	bf00      	nop
 80041ca:	3708      	adds	r7, #8
 80041cc:	46bd      	mov	sp, r7
 80041ce:	bd80      	pop	{r7, pc}
 80041d0:	40010400 	.word	0x40010400

080041d4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80041d4:	b580      	push	{r7, lr}
 80041d6:	b084      	sub	sp, #16
 80041d8:	af00      	add	r7, sp, #0
 80041da:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	2b00      	cmp	r3, #0
 80041e0:	d101      	bne.n	80041e6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80041e2:	2301      	movs	r3, #1
 80041e4:	e12b      	b.n	800443e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80041ec:	b2db      	uxtb	r3, r3
 80041ee:	2b00      	cmp	r3, #0
 80041f0:	d106      	bne.n	8004200 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	2200      	movs	r2, #0
 80041f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80041fa:	6878      	ldr	r0, [r7, #4]
 80041fc:	f7fe fbf4 	bl	80029e8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	2224      	movs	r2, #36	; 0x24
 8004204:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	681a      	ldr	r2, [r3, #0]
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	f022 0201 	bic.w	r2, r2, #1
 8004216:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	681a      	ldr	r2, [r3, #0]
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004226:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	681a      	ldr	r2, [r3, #0]
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004236:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8004238:	f001 fd20 	bl	8005c7c <HAL_RCC_GetPCLK1Freq>
 800423c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	685b      	ldr	r3, [r3, #4]
 8004242:	4a81      	ldr	r2, [pc, #516]	; (8004448 <HAL_I2C_Init+0x274>)
 8004244:	4293      	cmp	r3, r2
 8004246:	d807      	bhi.n	8004258 <HAL_I2C_Init+0x84>
 8004248:	68fb      	ldr	r3, [r7, #12]
 800424a:	4a80      	ldr	r2, [pc, #512]	; (800444c <HAL_I2C_Init+0x278>)
 800424c:	4293      	cmp	r3, r2
 800424e:	bf94      	ite	ls
 8004250:	2301      	movls	r3, #1
 8004252:	2300      	movhi	r3, #0
 8004254:	b2db      	uxtb	r3, r3
 8004256:	e006      	b.n	8004266 <HAL_I2C_Init+0x92>
 8004258:	68fb      	ldr	r3, [r7, #12]
 800425a:	4a7d      	ldr	r2, [pc, #500]	; (8004450 <HAL_I2C_Init+0x27c>)
 800425c:	4293      	cmp	r3, r2
 800425e:	bf94      	ite	ls
 8004260:	2301      	movls	r3, #1
 8004262:	2300      	movhi	r3, #0
 8004264:	b2db      	uxtb	r3, r3
 8004266:	2b00      	cmp	r3, #0
 8004268:	d001      	beq.n	800426e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800426a:	2301      	movs	r3, #1
 800426c:	e0e7      	b.n	800443e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800426e:	68fb      	ldr	r3, [r7, #12]
 8004270:	4a78      	ldr	r2, [pc, #480]	; (8004454 <HAL_I2C_Init+0x280>)
 8004272:	fba2 2303 	umull	r2, r3, r2, r3
 8004276:	0c9b      	lsrs	r3, r3, #18
 8004278:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	685b      	ldr	r3, [r3, #4]
 8004280:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	68ba      	ldr	r2, [r7, #8]
 800428a:	430a      	orrs	r2, r1
 800428c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	6a1b      	ldr	r3, [r3, #32]
 8004294:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	685b      	ldr	r3, [r3, #4]
 800429c:	4a6a      	ldr	r2, [pc, #424]	; (8004448 <HAL_I2C_Init+0x274>)
 800429e:	4293      	cmp	r3, r2
 80042a0:	d802      	bhi.n	80042a8 <HAL_I2C_Init+0xd4>
 80042a2:	68bb      	ldr	r3, [r7, #8]
 80042a4:	3301      	adds	r3, #1
 80042a6:	e009      	b.n	80042bc <HAL_I2C_Init+0xe8>
 80042a8:	68bb      	ldr	r3, [r7, #8]
 80042aa:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80042ae:	fb02 f303 	mul.w	r3, r2, r3
 80042b2:	4a69      	ldr	r2, [pc, #420]	; (8004458 <HAL_I2C_Init+0x284>)
 80042b4:	fba2 2303 	umull	r2, r3, r2, r3
 80042b8:	099b      	lsrs	r3, r3, #6
 80042ba:	3301      	adds	r3, #1
 80042bc:	687a      	ldr	r2, [r7, #4]
 80042be:	6812      	ldr	r2, [r2, #0]
 80042c0:	430b      	orrs	r3, r1
 80042c2:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	69db      	ldr	r3, [r3, #28]
 80042ca:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80042ce:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	685b      	ldr	r3, [r3, #4]
 80042d6:	495c      	ldr	r1, [pc, #368]	; (8004448 <HAL_I2C_Init+0x274>)
 80042d8:	428b      	cmp	r3, r1
 80042da:	d819      	bhi.n	8004310 <HAL_I2C_Init+0x13c>
 80042dc:	68fb      	ldr	r3, [r7, #12]
 80042de:	1e59      	subs	r1, r3, #1
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	685b      	ldr	r3, [r3, #4]
 80042e4:	005b      	lsls	r3, r3, #1
 80042e6:	fbb1 f3f3 	udiv	r3, r1, r3
 80042ea:	1c59      	adds	r1, r3, #1
 80042ec:	f640 73fc 	movw	r3, #4092	; 0xffc
 80042f0:	400b      	ands	r3, r1
 80042f2:	2b00      	cmp	r3, #0
 80042f4:	d00a      	beq.n	800430c <HAL_I2C_Init+0x138>
 80042f6:	68fb      	ldr	r3, [r7, #12]
 80042f8:	1e59      	subs	r1, r3, #1
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	685b      	ldr	r3, [r3, #4]
 80042fe:	005b      	lsls	r3, r3, #1
 8004300:	fbb1 f3f3 	udiv	r3, r1, r3
 8004304:	3301      	adds	r3, #1
 8004306:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800430a:	e051      	b.n	80043b0 <HAL_I2C_Init+0x1dc>
 800430c:	2304      	movs	r3, #4
 800430e:	e04f      	b.n	80043b0 <HAL_I2C_Init+0x1dc>
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	689b      	ldr	r3, [r3, #8]
 8004314:	2b00      	cmp	r3, #0
 8004316:	d111      	bne.n	800433c <HAL_I2C_Init+0x168>
 8004318:	68fb      	ldr	r3, [r7, #12]
 800431a:	1e58      	subs	r0, r3, #1
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	6859      	ldr	r1, [r3, #4]
 8004320:	460b      	mov	r3, r1
 8004322:	005b      	lsls	r3, r3, #1
 8004324:	440b      	add	r3, r1
 8004326:	fbb0 f3f3 	udiv	r3, r0, r3
 800432a:	3301      	adds	r3, #1
 800432c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004330:	2b00      	cmp	r3, #0
 8004332:	bf0c      	ite	eq
 8004334:	2301      	moveq	r3, #1
 8004336:	2300      	movne	r3, #0
 8004338:	b2db      	uxtb	r3, r3
 800433a:	e012      	b.n	8004362 <HAL_I2C_Init+0x18e>
 800433c:	68fb      	ldr	r3, [r7, #12]
 800433e:	1e58      	subs	r0, r3, #1
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	6859      	ldr	r1, [r3, #4]
 8004344:	460b      	mov	r3, r1
 8004346:	009b      	lsls	r3, r3, #2
 8004348:	440b      	add	r3, r1
 800434a:	0099      	lsls	r1, r3, #2
 800434c:	440b      	add	r3, r1
 800434e:	fbb0 f3f3 	udiv	r3, r0, r3
 8004352:	3301      	adds	r3, #1
 8004354:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004358:	2b00      	cmp	r3, #0
 800435a:	bf0c      	ite	eq
 800435c:	2301      	moveq	r3, #1
 800435e:	2300      	movne	r3, #0
 8004360:	b2db      	uxtb	r3, r3
 8004362:	2b00      	cmp	r3, #0
 8004364:	d001      	beq.n	800436a <HAL_I2C_Init+0x196>
 8004366:	2301      	movs	r3, #1
 8004368:	e022      	b.n	80043b0 <HAL_I2C_Init+0x1dc>
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	689b      	ldr	r3, [r3, #8]
 800436e:	2b00      	cmp	r3, #0
 8004370:	d10e      	bne.n	8004390 <HAL_I2C_Init+0x1bc>
 8004372:	68fb      	ldr	r3, [r7, #12]
 8004374:	1e58      	subs	r0, r3, #1
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	6859      	ldr	r1, [r3, #4]
 800437a:	460b      	mov	r3, r1
 800437c:	005b      	lsls	r3, r3, #1
 800437e:	440b      	add	r3, r1
 8004380:	fbb0 f3f3 	udiv	r3, r0, r3
 8004384:	3301      	adds	r3, #1
 8004386:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800438a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800438e:	e00f      	b.n	80043b0 <HAL_I2C_Init+0x1dc>
 8004390:	68fb      	ldr	r3, [r7, #12]
 8004392:	1e58      	subs	r0, r3, #1
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	6859      	ldr	r1, [r3, #4]
 8004398:	460b      	mov	r3, r1
 800439a:	009b      	lsls	r3, r3, #2
 800439c:	440b      	add	r3, r1
 800439e:	0099      	lsls	r1, r3, #2
 80043a0:	440b      	add	r3, r1
 80043a2:	fbb0 f3f3 	udiv	r3, r0, r3
 80043a6:	3301      	adds	r3, #1
 80043a8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80043ac:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80043b0:	6879      	ldr	r1, [r7, #4]
 80043b2:	6809      	ldr	r1, [r1, #0]
 80043b4:	4313      	orrs	r3, r2
 80043b6:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	69da      	ldr	r2, [r3, #28]
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	6a1b      	ldr	r3, [r3, #32]
 80043ca:	431a      	orrs	r2, r3
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	430a      	orrs	r2, r1
 80043d2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	689b      	ldr	r3, [r3, #8]
 80043da:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80043de:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80043e2:	687a      	ldr	r2, [r7, #4]
 80043e4:	6911      	ldr	r1, [r2, #16]
 80043e6:	687a      	ldr	r2, [r7, #4]
 80043e8:	68d2      	ldr	r2, [r2, #12]
 80043ea:	4311      	orrs	r1, r2
 80043ec:	687a      	ldr	r2, [r7, #4]
 80043ee:	6812      	ldr	r2, [r2, #0]
 80043f0:	430b      	orrs	r3, r1
 80043f2:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	68db      	ldr	r3, [r3, #12]
 80043fa:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	695a      	ldr	r2, [r3, #20]
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	699b      	ldr	r3, [r3, #24]
 8004406:	431a      	orrs	r2, r3
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	430a      	orrs	r2, r1
 800440e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	681a      	ldr	r2, [r3, #0]
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	f042 0201 	orr.w	r2, r2, #1
 800441e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	2200      	movs	r2, #0
 8004424:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	2220      	movs	r2, #32
 800442a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	2200      	movs	r2, #0
 8004432:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	2200      	movs	r2, #0
 8004438:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800443c:	2300      	movs	r3, #0
}
 800443e:	4618      	mov	r0, r3
 8004440:	3710      	adds	r7, #16
 8004442:	46bd      	mov	sp, r7
 8004444:	bd80      	pop	{r7, pc}
 8004446:	bf00      	nop
 8004448:	000186a0 	.word	0x000186a0
 800444c:	001e847f 	.word	0x001e847f
 8004450:	003d08ff 	.word	0x003d08ff
 8004454:	431bde83 	.word	0x431bde83
 8004458:	10624dd3 	.word	0x10624dd3

0800445c <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800445c:	b580      	push	{r7, lr}
 800445e:	b088      	sub	sp, #32
 8004460:	af02      	add	r7, sp, #8
 8004462:	60f8      	str	r0, [r7, #12]
 8004464:	607a      	str	r2, [r7, #4]
 8004466:	461a      	mov	r2, r3
 8004468:	460b      	mov	r3, r1
 800446a:	817b      	strh	r3, [r7, #10]
 800446c:	4613      	mov	r3, r2
 800446e:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004470:	f7fe fd32 	bl	8002ed8 <HAL_GetTick>
 8004474:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004476:	68fb      	ldr	r3, [r7, #12]
 8004478:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800447c:	b2db      	uxtb	r3, r3
 800447e:	2b20      	cmp	r3, #32
 8004480:	f040 80e0 	bne.w	8004644 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004484:	697b      	ldr	r3, [r7, #20]
 8004486:	9300      	str	r3, [sp, #0]
 8004488:	2319      	movs	r3, #25
 800448a:	2201      	movs	r2, #1
 800448c:	4970      	ldr	r1, [pc, #448]	; (8004650 <HAL_I2C_Master_Transmit+0x1f4>)
 800448e:	68f8      	ldr	r0, [r7, #12]
 8004490:	f000 fe44 	bl	800511c <I2C_WaitOnFlagUntilTimeout>
 8004494:	4603      	mov	r3, r0
 8004496:	2b00      	cmp	r3, #0
 8004498:	d001      	beq.n	800449e <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 800449a:	2302      	movs	r3, #2
 800449c:	e0d3      	b.n	8004646 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800449e:	68fb      	ldr	r3, [r7, #12]
 80044a0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80044a4:	2b01      	cmp	r3, #1
 80044a6:	d101      	bne.n	80044ac <HAL_I2C_Master_Transmit+0x50>
 80044a8:	2302      	movs	r3, #2
 80044aa:	e0cc      	b.n	8004646 <HAL_I2C_Master_Transmit+0x1ea>
 80044ac:	68fb      	ldr	r3, [r7, #12]
 80044ae:	2201      	movs	r2, #1
 80044b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80044b4:	68fb      	ldr	r3, [r7, #12]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	f003 0301 	and.w	r3, r3, #1
 80044be:	2b01      	cmp	r3, #1
 80044c0:	d007      	beq.n	80044d2 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80044c2:	68fb      	ldr	r3, [r7, #12]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	681a      	ldr	r2, [r3, #0]
 80044c8:	68fb      	ldr	r3, [r7, #12]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	f042 0201 	orr.w	r2, r2, #1
 80044d0:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80044d2:	68fb      	ldr	r3, [r7, #12]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	681a      	ldr	r2, [r3, #0]
 80044d8:	68fb      	ldr	r3, [r7, #12]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80044e0:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80044e2:	68fb      	ldr	r3, [r7, #12]
 80044e4:	2221      	movs	r2, #33	; 0x21
 80044e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80044ea:	68fb      	ldr	r3, [r7, #12]
 80044ec:	2210      	movs	r2, #16
 80044ee:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80044f2:	68fb      	ldr	r3, [r7, #12]
 80044f4:	2200      	movs	r2, #0
 80044f6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80044f8:	68fb      	ldr	r3, [r7, #12]
 80044fa:	687a      	ldr	r2, [r7, #4]
 80044fc:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80044fe:	68fb      	ldr	r3, [r7, #12]
 8004500:	893a      	ldrh	r2, [r7, #8]
 8004502:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004504:	68fb      	ldr	r3, [r7, #12]
 8004506:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004508:	b29a      	uxth	r2, r3
 800450a:	68fb      	ldr	r3, [r7, #12]
 800450c:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800450e:	68fb      	ldr	r3, [r7, #12]
 8004510:	4a50      	ldr	r2, [pc, #320]	; (8004654 <HAL_I2C_Master_Transmit+0x1f8>)
 8004512:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8004514:	8979      	ldrh	r1, [r7, #10]
 8004516:	697b      	ldr	r3, [r7, #20]
 8004518:	6a3a      	ldr	r2, [r7, #32]
 800451a:	68f8      	ldr	r0, [r7, #12]
 800451c:	f000 fbfe 	bl	8004d1c <I2C_MasterRequestWrite>
 8004520:	4603      	mov	r3, r0
 8004522:	2b00      	cmp	r3, #0
 8004524:	d001      	beq.n	800452a <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8004526:	2301      	movs	r3, #1
 8004528:	e08d      	b.n	8004646 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800452a:	2300      	movs	r3, #0
 800452c:	613b      	str	r3, [r7, #16]
 800452e:	68fb      	ldr	r3, [r7, #12]
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	695b      	ldr	r3, [r3, #20]
 8004534:	613b      	str	r3, [r7, #16]
 8004536:	68fb      	ldr	r3, [r7, #12]
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	699b      	ldr	r3, [r3, #24]
 800453c:	613b      	str	r3, [r7, #16]
 800453e:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8004540:	e066      	b.n	8004610 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004542:	697a      	ldr	r2, [r7, #20]
 8004544:	6a39      	ldr	r1, [r7, #32]
 8004546:	68f8      	ldr	r0, [r7, #12]
 8004548:	f000 febe 	bl	80052c8 <I2C_WaitOnTXEFlagUntilTimeout>
 800454c:	4603      	mov	r3, r0
 800454e:	2b00      	cmp	r3, #0
 8004550:	d00d      	beq.n	800456e <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004552:	68fb      	ldr	r3, [r7, #12]
 8004554:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004556:	2b04      	cmp	r3, #4
 8004558:	d107      	bne.n	800456a <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800455a:	68fb      	ldr	r3, [r7, #12]
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	681a      	ldr	r2, [r3, #0]
 8004560:	68fb      	ldr	r3, [r7, #12]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004568:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800456a:	2301      	movs	r3, #1
 800456c:	e06b      	b.n	8004646 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800456e:	68fb      	ldr	r3, [r7, #12]
 8004570:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004572:	781a      	ldrb	r2, [r3, #0]
 8004574:	68fb      	ldr	r3, [r7, #12]
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800457a:	68fb      	ldr	r3, [r7, #12]
 800457c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800457e:	1c5a      	adds	r2, r3, #1
 8004580:	68fb      	ldr	r3, [r7, #12]
 8004582:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004584:	68fb      	ldr	r3, [r7, #12]
 8004586:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004588:	b29b      	uxth	r3, r3
 800458a:	3b01      	subs	r3, #1
 800458c:	b29a      	uxth	r2, r3
 800458e:	68fb      	ldr	r3, [r7, #12]
 8004590:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8004592:	68fb      	ldr	r3, [r7, #12]
 8004594:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004596:	3b01      	subs	r3, #1
 8004598:	b29a      	uxth	r2, r3
 800459a:	68fb      	ldr	r3, [r7, #12]
 800459c:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800459e:	68fb      	ldr	r3, [r7, #12]
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	695b      	ldr	r3, [r3, #20]
 80045a4:	f003 0304 	and.w	r3, r3, #4
 80045a8:	2b04      	cmp	r3, #4
 80045aa:	d11b      	bne.n	80045e4 <HAL_I2C_Master_Transmit+0x188>
 80045ac:	68fb      	ldr	r3, [r7, #12]
 80045ae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80045b0:	2b00      	cmp	r3, #0
 80045b2:	d017      	beq.n	80045e4 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80045b4:	68fb      	ldr	r3, [r7, #12]
 80045b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045b8:	781a      	ldrb	r2, [r3, #0]
 80045ba:	68fb      	ldr	r3, [r7, #12]
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80045c0:	68fb      	ldr	r3, [r7, #12]
 80045c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045c4:	1c5a      	adds	r2, r3, #1
 80045c6:	68fb      	ldr	r3, [r7, #12]
 80045c8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 80045ca:	68fb      	ldr	r3, [r7, #12]
 80045cc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80045ce:	b29b      	uxth	r3, r3
 80045d0:	3b01      	subs	r3, #1
 80045d2:	b29a      	uxth	r2, r3
 80045d4:	68fb      	ldr	r3, [r7, #12]
 80045d6:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 80045d8:	68fb      	ldr	r3, [r7, #12]
 80045da:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80045dc:	3b01      	subs	r3, #1
 80045de:	b29a      	uxth	r2, r3
 80045e0:	68fb      	ldr	r3, [r7, #12]
 80045e2:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80045e4:	697a      	ldr	r2, [r7, #20]
 80045e6:	6a39      	ldr	r1, [r7, #32]
 80045e8:	68f8      	ldr	r0, [r7, #12]
 80045ea:	f000 feae 	bl	800534a <I2C_WaitOnBTFFlagUntilTimeout>
 80045ee:	4603      	mov	r3, r0
 80045f0:	2b00      	cmp	r3, #0
 80045f2:	d00d      	beq.n	8004610 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80045f4:	68fb      	ldr	r3, [r7, #12]
 80045f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045f8:	2b04      	cmp	r3, #4
 80045fa:	d107      	bne.n	800460c <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80045fc:	68fb      	ldr	r3, [r7, #12]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	681a      	ldr	r2, [r3, #0]
 8004602:	68fb      	ldr	r3, [r7, #12]
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800460a:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800460c:	2301      	movs	r3, #1
 800460e:	e01a      	b.n	8004646 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8004610:	68fb      	ldr	r3, [r7, #12]
 8004612:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004614:	2b00      	cmp	r3, #0
 8004616:	d194      	bne.n	8004542 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004618:	68fb      	ldr	r3, [r7, #12]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	681a      	ldr	r2, [r3, #0]
 800461e:	68fb      	ldr	r3, [r7, #12]
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004626:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004628:	68fb      	ldr	r3, [r7, #12]
 800462a:	2220      	movs	r2, #32
 800462c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004630:	68fb      	ldr	r3, [r7, #12]
 8004632:	2200      	movs	r2, #0
 8004634:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004638:	68fb      	ldr	r3, [r7, #12]
 800463a:	2200      	movs	r2, #0
 800463c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8004640:	2300      	movs	r3, #0
 8004642:	e000      	b.n	8004646 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8004644:	2302      	movs	r3, #2
  }
}
 8004646:	4618      	mov	r0, r3
 8004648:	3718      	adds	r7, #24
 800464a:	46bd      	mov	sp, r7
 800464c:	bd80      	pop	{r7, pc}
 800464e:	bf00      	nop
 8004650:	00100002 	.word	0x00100002
 8004654:	ffff0000 	.word	0xffff0000

08004658 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004658:	b580      	push	{r7, lr}
 800465a:	b088      	sub	sp, #32
 800465c:	af02      	add	r7, sp, #8
 800465e:	60f8      	str	r0, [r7, #12]
 8004660:	4608      	mov	r0, r1
 8004662:	4611      	mov	r1, r2
 8004664:	461a      	mov	r2, r3
 8004666:	4603      	mov	r3, r0
 8004668:	817b      	strh	r3, [r7, #10]
 800466a:	460b      	mov	r3, r1
 800466c:	813b      	strh	r3, [r7, #8]
 800466e:	4613      	mov	r3, r2
 8004670:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004672:	f7fe fc31 	bl	8002ed8 <HAL_GetTick>
 8004676:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004678:	68fb      	ldr	r3, [r7, #12]
 800467a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800467e:	b2db      	uxtb	r3, r3
 8004680:	2b20      	cmp	r3, #32
 8004682:	f040 80d9 	bne.w	8004838 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004686:	697b      	ldr	r3, [r7, #20]
 8004688:	9300      	str	r3, [sp, #0]
 800468a:	2319      	movs	r3, #25
 800468c:	2201      	movs	r2, #1
 800468e:	496d      	ldr	r1, [pc, #436]	; (8004844 <HAL_I2C_Mem_Write+0x1ec>)
 8004690:	68f8      	ldr	r0, [r7, #12]
 8004692:	f000 fd43 	bl	800511c <I2C_WaitOnFlagUntilTimeout>
 8004696:	4603      	mov	r3, r0
 8004698:	2b00      	cmp	r3, #0
 800469a:	d001      	beq.n	80046a0 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 800469c:	2302      	movs	r3, #2
 800469e:	e0cc      	b.n	800483a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80046a0:	68fb      	ldr	r3, [r7, #12]
 80046a2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80046a6:	2b01      	cmp	r3, #1
 80046a8:	d101      	bne.n	80046ae <HAL_I2C_Mem_Write+0x56>
 80046aa:	2302      	movs	r3, #2
 80046ac:	e0c5      	b.n	800483a <HAL_I2C_Mem_Write+0x1e2>
 80046ae:	68fb      	ldr	r3, [r7, #12]
 80046b0:	2201      	movs	r2, #1
 80046b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80046b6:	68fb      	ldr	r3, [r7, #12]
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	f003 0301 	and.w	r3, r3, #1
 80046c0:	2b01      	cmp	r3, #1
 80046c2:	d007      	beq.n	80046d4 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80046c4:	68fb      	ldr	r3, [r7, #12]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	681a      	ldr	r2, [r3, #0]
 80046ca:	68fb      	ldr	r3, [r7, #12]
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	f042 0201 	orr.w	r2, r2, #1
 80046d2:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80046d4:	68fb      	ldr	r3, [r7, #12]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	681a      	ldr	r2, [r3, #0]
 80046da:	68fb      	ldr	r3, [r7, #12]
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80046e2:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80046e4:	68fb      	ldr	r3, [r7, #12]
 80046e6:	2221      	movs	r2, #33	; 0x21
 80046e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80046ec:	68fb      	ldr	r3, [r7, #12]
 80046ee:	2240      	movs	r2, #64	; 0x40
 80046f0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80046f4:	68fb      	ldr	r3, [r7, #12]
 80046f6:	2200      	movs	r2, #0
 80046f8:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80046fa:	68fb      	ldr	r3, [r7, #12]
 80046fc:	6a3a      	ldr	r2, [r7, #32]
 80046fe:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004700:	68fb      	ldr	r3, [r7, #12]
 8004702:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8004704:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004706:	68fb      	ldr	r3, [r7, #12]
 8004708:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800470a:	b29a      	uxth	r2, r3
 800470c:	68fb      	ldr	r3, [r7, #12]
 800470e:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004710:	68fb      	ldr	r3, [r7, #12]
 8004712:	4a4d      	ldr	r2, [pc, #308]	; (8004848 <HAL_I2C_Mem_Write+0x1f0>)
 8004714:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004716:	88f8      	ldrh	r0, [r7, #6]
 8004718:	893a      	ldrh	r2, [r7, #8]
 800471a:	8979      	ldrh	r1, [r7, #10]
 800471c:	697b      	ldr	r3, [r7, #20]
 800471e:	9301      	str	r3, [sp, #4]
 8004720:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004722:	9300      	str	r3, [sp, #0]
 8004724:	4603      	mov	r3, r0
 8004726:	68f8      	ldr	r0, [r7, #12]
 8004728:	f000 fb7a 	bl	8004e20 <I2C_RequestMemoryWrite>
 800472c:	4603      	mov	r3, r0
 800472e:	2b00      	cmp	r3, #0
 8004730:	d052      	beq.n	80047d8 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8004732:	2301      	movs	r3, #1
 8004734:	e081      	b.n	800483a <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004736:	697a      	ldr	r2, [r7, #20]
 8004738:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800473a:	68f8      	ldr	r0, [r7, #12]
 800473c:	f000 fdc4 	bl	80052c8 <I2C_WaitOnTXEFlagUntilTimeout>
 8004740:	4603      	mov	r3, r0
 8004742:	2b00      	cmp	r3, #0
 8004744:	d00d      	beq.n	8004762 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004746:	68fb      	ldr	r3, [r7, #12]
 8004748:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800474a:	2b04      	cmp	r3, #4
 800474c:	d107      	bne.n	800475e <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800474e:	68fb      	ldr	r3, [r7, #12]
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	681a      	ldr	r2, [r3, #0]
 8004754:	68fb      	ldr	r3, [r7, #12]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800475c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800475e:	2301      	movs	r3, #1
 8004760:	e06b      	b.n	800483a <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004762:	68fb      	ldr	r3, [r7, #12]
 8004764:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004766:	781a      	ldrb	r2, [r3, #0]
 8004768:	68fb      	ldr	r3, [r7, #12]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800476e:	68fb      	ldr	r3, [r7, #12]
 8004770:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004772:	1c5a      	adds	r2, r3, #1
 8004774:	68fb      	ldr	r3, [r7, #12]
 8004776:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8004778:	68fb      	ldr	r3, [r7, #12]
 800477a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800477c:	3b01      	subs	r3, #1
 800477e:	b29a      	uxth	r2, r3
 8004780:	68fb      	ldr	r3, [r7, #12]
 8004782:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8004784:	68fb      	ldr	r3, [r7, #12]
 8004786:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004788:	b29b      	uxth	r3, r3
 800478a:	3b01      	subs	r3, #1
 800478c:	b29a      	uxth	r2, r3
 800478e:	68fb      	ldr	r3, [r7, #12]
 8004790:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8004792:	68fb      	ldr	r3, [r7, #12]
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	695b      	ldr	r3, [r3, #20]
 8004798:	f003 0304 	and.w	r3, r3, #4
 800479c:	2b04      	cmp	r3, #4
 800479e:	d11b      	bne.n	80047d8 <HAL_I2C_Mem_Write+0x180>
 80047a0:	68fb      	ldr	r3, [r7, #12]
 80047a2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80047a4:	2b00      	cmp	r3, #0
 80047a6:	d017      	beq.n	80047d8 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80047a8:	68fb      	ldr	r3, [r7, #12]
 80047aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047ac:	781a      	ldrb	r2, [r3, #0]
 80047ae:	68fb      	ldr	r3, [r7, #12]
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80047b4:	68fb      	ldr	r3, [r7, #12]
 80047b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047b8:	1c5a      	adds	r2, r3, #1
 80047ba:	68fb      	ldr	r3, [r7, #12]
 80047bc:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80047be:	68fb      	ldr	r3, [r7, #12]
 80047c0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80047c2:	3b01      	subs	r3, #1
 80047c4:	b29a      	uxth	r2, r3
 80047c6:	68fb      	ldr	r3, [r7, #12]
 80047c8:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80047ca:	68fb      	ldr	r3, [r7, #12]
 80047cc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80047ce:	b29b      	uxth	r3, r3
 80047d0:	3b01      	subs	r3, #1
 80047d2:	b29a      	uxth	r2, r3
 80047d4:	68fb      	ldr	r3, [r7, #12]
 80047d6:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80047d8:	68fb      	ldr	r3, [r7, #12]
 80047da:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80047dc:	2b00      	cmp	r3, #0
 80047de:	d1aa      	bne.n	8004736 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80047e0:	697a      	ldr	r2, [r7, #20]
 80047e2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80047e4:	68f8      	ldr	r0, [r7, #12]
 80047e6:	f000 fdb0 	bl	800534a <I2C_WaitOnBTFFlagUntilTimeout>
 80047ea:	4603      	mov	r3, r0
 80047ec:	2b00      	cmp	r3, #0
 80047ee:	d00d      	beq.n	800480c <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80047f0:	68fb      	ldr	r3, [r7, #12]
 80047f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047f4:	2b04      	cmp	r3, #4
 80047f6:	d107      	bne.n	8004808 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80047f8:	68fb      	ldr	r3, [r7, #12]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	681a      	ldr	r2, [r3, #0]
 80047fe:	68fb      	ldr	r3, [r7, #12]
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004806:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004808:	2301      	movs	r3, #1
 800480a:	e016      	b.n	800483a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800480c:	68fb      	ldr	r3, [r7, #12]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	681a      	ldr	r2, [r3, #0]
 8004812:	68fb      	ldr	r3, [r7, #12]
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800481a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800481c:	68fb      	ldr	r3, [r7, #12]
 800481e:	2220      	movs	r2, #32
 8004820:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004824:	68fb      	ldr	r3, [r7, #12]
 8004826:	2200      	movs	r2, #0
 8004828:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800482c:	68fb      	ldr	r3, [r7, #12]
 800482e:	2200      	movs	r2, #0
 8004830:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8004834:	2300      	movs	r3, #0
 8004836:	e000      	b.n	800483a <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8004838:	2302      	movs	r3, #2
  }
}
 800483a:	4618      	mov	r0, r3
 800483c:	3718      	adds	r7, #24
 800483e:	46bd      	mov	sp, r7
 8004840:	bd80      	pop	{r7, pc}
 8004842:	bf00      	nop
 8004844:	00100002 	.word	0x00100002
 8004848:	ffff0000 	.word	0xffff0000

0800484c <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800484c:	b580      	push	{r7, lr}
 800484e:	b08c      	sub	sp, #48	; 0x30
 8004850:	af02      	add	r7, sp, #8
 8004852:	60f8      	str	r0, [r7, #12]
 8004854:	4608      	mov	r0, r1
 8004856:	4611      	mov	r1, r2
 8004858:	461a      	mov	r2, r3
 800485a:	4603      	mov	r3, r0
 800485c:	817b      	strh	r3, [r7, #10]
 800485e:	460b      	mov	r3, r1
 8004860:	813b      	strh	r3, [r7, #8]
 8004862:	4613      	mov	r3, r2
 8004864:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 8004866:	2300      	movs	r3, #0
 8004868:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800486a:	f7fe fb35 	bl	8002ed8 <HAL_GetTick>
 800486e:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004870:	68fb      	ldr	r3, [r7, #12]
 8004872:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004876:	b2db      	uxtb	r3, r3
 8004878:	2b20      	cmp	r3, #32
 800487a:	f040 8244 	bne.w	8004d06 <HAL_I2C_Mem_Read+0x4ba>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800487e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004880:	9300      	str	r3, [sp, #0]
 8004882:	2319      	movs	r3, #25
 8004884:	2201      	movs	r2, #1
 8004886:	4982      	ldr	r1, [pc, #520]	; (8004a90 <HAL_I2C_Mem_Read+0x244>)
 8004888:	68f8      	ldr	r0, [r7, #12]
 800488a:	f000 fc47 	bl	800511c <I2C_WaitOnFlagUntilTimeout>
 800488e:	4603      	mov	r3, r0
 8004890:	2b00      	cmp	r3, #0
 8004892:	d001      	beq.n	8004898 <HAL_I2C_Mem_Read+0x4c>
    {
      return HAL_BUSY;
 8004894:	2302      	movs	r3, #2
 8004896:	e237      	b.n	8004d08 <HAL_I2C_Mem_Read+0x4bc>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004898:	68fb      	ldr	r3, [r7, #12]
 800489a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800489e:	2b01      	cmp	r3, #1
 80048a0:	d101      	bne.n	80048a6 <HAL_I2C_Mem_Read+0x5a>
 80048a2:	2302      	movs	r3, #2
 80048a4:	e230      	b.n	8004d08 <HAL_I2C_Mem_Read+0x4bc>
 80048a6:	68fb      	ldr	r3, [r7, #12]
 80048a8:	2201      	movs	r2, #1
 80048aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80048ae:	68fb      	ldr	r3, [r7, #12]
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	f003 0301 	and.w	r3, r3, #1
 80048b8:	2b01      	cmp	r3, #1
 80048ba:	d007      	beq.n	80048cc <HAL_I2C_Mem_Read+0x80>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80048bc:	68fb      	ldr	r3, [r7, #12]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	681a      	ldr	r2, [r3, #0]
 80048c2:	68fb      	ldr	r3, [r7, #12]
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	f042 0201 	orr.w	r2, r2, #1
 80048ca:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80048cc:	68fb      	ldr	r3, [r7, #12]
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	681a      	ldr	r2, [r3, #0]
 80048d2:	68fb      	ldr	r3, [r7, #12]
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80048da:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80048dc:	68fb      	ldr	r3, [r7, #12]
 80048de:	2222      	movs	r2, #34	; 0x22
 80048e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80048e4:	68fb      	ldr	r3, [r7, #12]
 80048e6:	2240      	movs	r2, #64	; 0x40
 80048e8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80048ec:	68fb      	ldr	r3, [r7, #12]
 80048ee:	2200      	movs	r2, #0
 80048f0:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80048f2:	68fb      	ldr	r3, [r7, #12]
 80048f4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80048f6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80048f8:	68fb      	ldr	r3, [r7, #12]
 80048fa:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 80048fc:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80048fe:	68fb      	ldr	r3, [r7, #12]
 8004900:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004902:	b29a      	uxth	r2, r3
 8004904:	68fb      	ldr	r3, [r7, #12]
 8004906:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004908:	68fb      	ldr	r3, [r7, #12]
 800490a:	4a62      	ldr	r2, [pc, #392]	; (8004a94 <HAL_I2C_Mem_Read+0x248>)
 800490c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800490e:	88f8      	ldrh	r0, [r7, #6]
 8004910:	893a      	ldrh	r2, [r7, #8]
 8004912:	8979      	ldrh	r1, [r7, #10]
 8004914:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004916:	9301      	str	r3, [sp, #4]
 8004918:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800491a:	9300      	str	r3, [sp, #0]
 800491c:	4603      	mov	r3, r0
 800491e:	68f8      	ldr	r0, [r7, #12]
 8004920:	f000 fb14 	bl	8004f4c <I2C_RequestMemoryRead>
 8004924:	4603      	mov	r3, r0
 8004926:	2b00      	cmp	r3, #0
 8004928:	d001      	beq.n	800492e <HAL_I2C_Mem_Read+0xe2>
    {
      return HAL_ERROR;
 800492a:	2301      	movs	r3, #1
 800492c:	e1ec      	b.n	8004d08 <HAL_I2C_Mem_Read+0x4bc>
    }

    if (hi2c->XferSize == 0U)
 800492e:	68fb      	ldr	r3, [r7, #12]
 8004930:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004932:	2b00      	cmp	r3, #0
 8004934:	d113      	bne.n	800495e <HAL_I2C_Mem_Read+0x112>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004936:	2300      	movs	r3, #0
 8004938:	61fb      	str	r3, [r7, #28]
 800493a:	68fb      	ldr	r3, [r7, #12]
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	695b      	ldr	r3, [r3, #20]
 8004940:	61fb      	str	r3, [r7, #28]
 8004942:	68fb      	ldr	r3, [r7, #12]
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	699b      	ldr	r3, [r3, #24]
 8004948:	61fb      	str	r3, [r7, #28]
 800494a:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800494c:	68fb      	ldr	r3, [r7, #12]
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	681a      	ldr	r2, [r3, #0]
 8004952:	68fb      	ldr	r3, [r7, #12]
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800495a:	601a      	str	r2, [r3, #0]
 800495c:	e1c0      	b.n	8004ce0 <HAL_I2C_Mem_Read+0x494>
    }
    else if (hi2c->XferSize == 1U)
 800495e:	68fb      	ldr	r3, [r7, #12]
 8004960:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004962:	2b01      	cmp	r3, #1
 8004964:	d11e      	bne.n	80049a4 <HAL_I2C_Mem_Read+0x158>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004966:	68fb      	ldr	r3, [r7, #12]
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	681a      	ldr	r2, [r3, #0]
 800496c:	68fb      	ldr	r3, [r7, #12]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004974:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8004976:	b672      	cpsid	i
}
 8004978:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800497a:	2300      	movs	r3, #0
 800497c:	61bb      	str	r3, [r7, #24]
 800497e:	68fb      	ldr	r3, [r7, #12]
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	695b      	ldr	r3, [r3, #20]
 8004984:	61bb      	str	r3, [r7, #24]
 8004986:	68fb      	ldr	r3, [r7, #12]
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	699b      	ldr	r3, [r3, #24]
 800498c:	61bb      	str	r3, [r7, #24]
 800498e:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004990:	68fb      	ldr	r3, [r7, #12]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	681a      	ldr	r2, [r3, #0]
 8004996:	68fb      	ldr	r3, [r7, #12]
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800499e:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 80049a0:	b662      	cpsie	i
}
 80049a2:	e035      	b.n	8004a10 <HAL_I2C_Mem_Read+0x1c4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 80049a4:	68fb      	ldr	r3, [r7, #12]
 80049a6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80049a8:	2b02      	cmp	r3, #2
 80049aa:	d11e      	bne.n	80049ea <HAL_I2C_Mem_Read+0x19e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80049ac:	68fb      	ldr	r3, [r7, #12]
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	681a      	ldr	r2, [r3, #0]
 80049b2:	68fb      	ldr	r3, [r7, #12]
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80049ba:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80049bc:	b672      	cpsid	i
}
 80049be:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80049c0:	2300      	movs	r3, #0
 80049c2:	617b      	str	r3, [r7, #20]
 80049c4:	68fb      	ldr	r3, [r7, #12]
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	695b      	ldr	r3, [r3, #20]
 80049ca:	617b      	str	r3, [r7, #20]
 80049cc:	68fb      	ldr	r3, [r7, #12]
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	699b      	ldr	r3, [r3, #24]
 80049d2:	617b      	str	r3, [r7, #20]
 80049d4:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80049d6:	68fb      	ldr	r3, [r7, #12]
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	681a      	ldr	r2, [r3, #0]
 80049dc:	68fb      	ldr	r3, [r7, #12]
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80049e4:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 80049e6:	b662      	cpsie	i
}
 80049e8:	e012      	b.n	8004a10 <HAL_I2C_Mem_Read+0x1c4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80049ea:	68fb      	ldr	r3, [r7, #12]
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	681a      	ldr	r2, [r3, #0]
 80049f0:	68fb      	ldr	r3, [r7, #12]
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80049f8:	601a      	str	r2, [r3, #0]
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80049fa:	2300      	movs	r3, #0
 80049fc:	613b      	str	r3, [r7, #16]
 80049fe:	68fb      	ldr	r3, [r7, #12]
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	695b      	ldr	r3, [r3, #20]
 8004a04:	613b      	str	r3, [r7, #16]
 8004a06:	68fb      	ldr	r3, [r7, #12]
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	699b      	ldr	r3, [r3, #24]
 8004a0c:	613b      	str	r3, [r7, #16]
 8004a0e:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 8004a10:	e166      	b.n	8004ce0 <HAL_I2C_Mem_Read+0x494>
    {
      if (hi2c->XferSize <= 3U)
 8004a12:	68fb      	ldr	r3, [r7, #12]
 8004a14:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004a16:	2b03      	cmp	r3, #3
 8004a18:	f200 811f 	bhi.w	8004c5a <HAL_I2C_Mem_Read+0x40e>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8004a1c:	68fb      	ldr	r3, [r7, #12]
 8004a1e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004a20:	2b01      	cmp	r3, #1
 8004a22:	d123      	bne.n	8004a6c <HAL_I2C_Mem_Read+0x220>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004a24:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004a26:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8004a28:	68f8      	ldr	r0, [r7, #12]
 8004a2a:	f000 fccf 	bl	80053cc <I2C_WaitOnRXNEFlagUntilTimeout>
 8004a2e:	4603      	mov	r3, r0
 8004a30:	2b00      	cmp	r3, #0
 8004a32:	d001      	beq.n	8004a38 <HAL_I2C_Mem_Read+0x1ec>
          {
            return HAL_ERROR;
 8004a34:	2301      	movs	r3, #1
 8004a36:	e167      	b.n	8004d08 <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004a38:	68fb      	ldr	r3, [r7, #12]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	691a      	ldr	r2, [r3, #16]
 8004a3e:	68fb      	ldr	r3, [r7, #12]
 8004a40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a42:	b2d2      	uxtb	r2, r2
 8004a44:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004a46:	68fb      	ldr	r3, [r7, #12]
 8004a48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a4a:	1c5a      	adds	r2, r3, #1
 8004a4c:	68fb      	ldr	r3, [r7, #12]
 8004a4e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004a50:	68fb      	ldr	r3, [r7, #12]
 8004a52:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004a54:	3b01      	subs	r3, #1
 8004a56:	b29a      	uxth	r2, r3
 8004a58:	68fb      	ldr	r3, [r7, #12]
 8004a5a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004a5c:	68fb      	ldr	r3, [r7, #12]
 8004a5e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004a60:	b29b      	uxth	r3, r3
 8004a62:	3b01      	subs	r3, #1
 8004a64:	b29a      	uxth	r2, r3
 8004a66:	68fb      	ldr	r3, [r7, #12]
 8004a68:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004a6a:	e139      	b.n	8004ce0 <HAL_I2C_Mem_Read+0x494>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8004a6c:	68fb      	ldr	r3, [r7, #12]
 8004a6e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004a70:	2b02      	cmp	r3, #2
 8004a72:	d152      	bne.n	8004b1a <HAL_I2C_Mem_Read+0x2ce>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004a74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a76:	9300      	str	r3, [sp, #0]
 8004a78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a7a:	2200      	movs	r2, #0
 8004a7c:	4906      	ldr	r1, [pc, #24]	; (8004a98 <HAL_I2C_Mem_Read+0x24c>)
 8004a7e:	68f8      	ldr	r0, [r7, #12]
 8004a80:	f000 fb4c 	bl	800511c <I2C_WaitOnFlagUntilTimeout>
 8004a84:	4603      	mov	r3, r0
 8004a86:	2b00      	cmp	r3, #0
 8004a88:	d008      	beq.n	8004a9c <HAL_I2C_Mem_Read+0x250>
          {
            return HAL_ERROR;
 8004a8a:	2301      	movs	r3, #1
 8004a8c:	e13c      	b.n	8004d08 <HAL_I2C_Mem_Read+0x4bc>
 8004a8e:	bf00      	nop
 8004a90:	00100002 	.word	0x00100002
 8004a94:	ffff0000 	.word	0xffff0000
 8004a98:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 8004a9c:	b672      	cpsid	i
}
 8004a9e:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004aa0:	68fb      	ldr	r3, [r7, #12]
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	681a      	ldr	r2, [r3, #0]
 8004aa6:	68fb      	ldr	r3, [r7, #12]
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004aae:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004ab0:	68fb      	ldr	r3, [r7, #12]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	691a      	ldr	r2, [r3, #16]
 8004ab6:	68fb      	ldr	r3, [r7, #12]
 8004ab8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004aba:	b2d2      	uxtb	r2, r2
 8004abc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004abe:	68fb      	ldr	r3, [r7, #12]
 8004ac0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ac2:	1c5a      	adds	r2, r3, #1
 8004ac4:	68fb      	ldr	r3, [r7, #12]
 8004ac6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004ac8:	68fb      	ldr	r3, [r7, #12]
 8004aca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004acc:	3b01      	subs	r3, #1
 8004ace:	b29a      	uxth	r2, r3
 8004ad0:	68fb      	ldr	r3, [r7, #12]
 8004ad2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004ad4:	68fb      	ldr	r3, [r7, #12]
 8004ad6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004ad8:	b29b      	uxth	r3, r3
 8004ada:	3b01      	subs	r3, #1
 8004adc:	b29a      	uxth	r2, r3
 8004ade:	68fb      	ldr	r3, [r7, #12]
 8004ae0:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8004ae2:	b662      	cpsie	i
}
 8004ae4:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004ae6:	68fb      	ldr	r3, [r7, #12]
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	691a      	ldr	r2, [r3, #16]
 8004aec:	68fb      	ldr	r3, [r7, #12]
 8004aee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004af0:	b2d2      	uxtb	r2, r2
 8004af2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004af4:	68fb      	ldr	r3, [r7, #12]
 8004af6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004af8:	1c5a      	adds	r2, r3, #1
 8004afa:	68fb      	ldr	r3, [r7, #12]
 8004afc:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004afe:	68fb      	ldr	r3, [r7, #12]
 8004b00:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004b02:	3b01      	subs	r3, #1
 8004b04:	b29a      	uxth	r2, r3
 8004b06:	68fb      	ldr	r3, [r7, #12]
 8004b08:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004b0a:	68fb      	ldr	r3, [r7, #12]
 8004b0c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004b0e:	b29b      	uxth	r3, r3
 8004b10:	3b01      	subs	r3, #1
 8004b12:	b29a      	uxth	r2, r3
 8004b14:	68fb      	ldr	r3, [r7, #12]
 8004b16:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004b18:	e0e2      	b.n	8004ce0 <HAL_I2C_Mem_Read+0x494>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004b1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b1c:	9300      	str	r3, [sp, #0]
 8004b1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b20:	2200      	movs	r2, #0
 8004b22:	497b      	ldr	r1, [pc, #492]	; (8004d10 <HAL_I2C_Mem_Read+0x4c4>)
 8004b24:	68f8      	ldr	r0, [r7, #12]
 8004b26:	f000 faf9 	bl	800511c <I2C_WaitOnFlagUntilTimeout>
 8004b2a:	4603      	mov	r3, r0
 8004b2c:	2b00      	cmp	r3, #0
 8004b2e:	d001      	beq.n	8004b34 <HAL_I2C_Mem_Read+0x2e8>
          {
            return HAL_ERROR;
 8004b30:	2301      	movs	r3, #1
 8004b32:	e0e9      	b.n	8004d08 <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004b34:	68fb      	ldr	r3, [r7, #12]
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	681a      	ldr	r2, [r3, #0]
 8004b3a:	68fb      	ldr	r3, [r7, #12]
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004b42:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8004b44:	b672      	cpsid	i
}
 8004b46:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004b48:	68fb      	ldr	r3, [r7, #12]
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	691a      	ldr	r2, [r3, #16]
 8004b4e:	68fb      	ldr	r3, [r7, #12]
 8004b50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b52:	b2d2      	uxtb	r2, r2
 8004b54:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004b56:	68fb      	ldr	r3, [r7, #12]
 8004b58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b5a:	1c5a      	adds	r2, r3, #1
 8004b5c:	68fb      	ldr	r3, [r7, #12]
 8004b5e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004b60:	68fb      	ldr	r3, [r7, #12]
 8004b62:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004b64:	3b01      	subs	r3, #1
 8004b66:	b29a      	uxth	r2, r3
 8004b68:	68fb      	ldr	r3, [r7, #12]
 8004b6a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004b6c:	68fb      	ldr	r3, [r7, #12]
 8004b6e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004b70:	b29b      	uxth	r3, r3
 8004b72:	3b01      	subs	r3, #1
 8004b74:	b29a      	uxth	r2, r3
 8004b76:	68fb      	ldr	r3, [r7, #12]
 8004b78:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8004b7a:	4b66      	ldr	r3, [pc, #408]	; (8004d14 <HAL_I2C_Mem_Read+0x4c8>)
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	08db      	lsrs	r3, r3, #3
 8004b80:	4a65      	ldr	r2, [pc, #404]	; (8004d18 <HAL_I2C_Mem_Read+0x4cc>)
 8004b82:	fba2 2303 	umull	r2, r3, r2, r3
 8004b86:	0a1a      	lsrs	r2, r3, #8
 8004b88:	4613      	mov	r3, r2
 8004b8a:	009b      	lsls	r3, r3, #2
 8004b8c:	4413      	add	r3, r2
 8004b8e:	00da      	lsls	r2, r3, #3
 8004b90:	1ad3      	subs	r3, r2, r3
 8004b92:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 8004b94:	6a3b      	ldr	r3, [r7, #32]
 8004b96:	3b01      	subs	r3, #1
 8004b98:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 8004b9a:	6a3b      	ldr	r3, [r7, #32]
 8004b9c:	2b00      	cmp	r3, #0
 8004b9e:	d118      	bne.n	8004bd2 <HAL_I2C_Mem_Read+0x386>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 8004ba0:	68fb      	ldr	r3, [r7, #12]
 8004ba2:	2200      	movs	r2, #0
 8004ba4:	631a      	str	r2, [r3, #48]	; 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 8004ba6:	68fb      	ldr	r3, [r7, #12]
 8004ba8:	2220      	movs	r2, #32
 8004baa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004bae:	68fb      	ldr	r3, [r7, #12]
 8004bb0:	2200      	movs	r2, #0
 8004bb2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004bb6:	68fb      	ldr	r3, [r7, #12]
 8004bb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bba:	f043 0220 	orr.w	r2, r3, #32
 8004bbe:	68fb      	ldr	r3, [r7, #12]
 8004bc0:	641a      	str	r2, [r3, #64]	; 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 8004bc2:	b662      	cpsie	i
}
 8004bc4:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8004bc6:	68fb      	ldr	r3, [r7, #12]
 8004bc8:	2200      	movs	r2, #0
 8004bca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

              return HAL_ERROR;
 8004bce:	2301      	movs	r3, #1
 8004bd0:	e09a      	b.n	8004d08 <HAL_I2C_Mem_Read+0x4bc>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 8004bd2:	68fb      	ldr	r3, [r7, #12]
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	695b      	ldr	r3, [r3, #20]
 8004bd8:	f003 0304 	and.w	r3, r3, #4
 8004bdc:	2b04      	cmp	r3, #4
 8004bde:	d1d9      	bne.n	8004b94 <HAL_I2C_Mem_Read+0x348>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004be0:	68fb      	ldr	r3, [r7, #12]
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	681a      	ldr	r2, [r3, #0]
 8004be6:	68fb      	ldr	r3, [r7, #12]
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004bee:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004bf0:	68fb      	ldr	r3, [r7, #12]
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	691a      	ldr	r2, [r3, #16]
 8004bf6:	68fb      	ldr	r3, [r7, #12]
 8004bf8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bfa:	b2d2      	uxtb	r2, r2
 8004bfc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004bfe:	68fb      	ldr	r3, [r7, #12]
 8004c00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c02:	1c5a      	adds	r2, r3, #1
 8004c04:	68fb      	ldr	r3, [r7, #12]
 8004c06:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004c08:	68fb      	ldr	r3, [r7, #12]
 8004c0a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004c0c:	3b01      	subs	r3, #1
 8004c0e:	b29a      	uxth	r2, r3
 8004c10:	68fb      	ldr	r3, [r7, #12]
 8004c12:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004c14:	68fb      	ldr	r3, [r7, #12]
 8004c16:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004c18:	b29b      	uxth	r3, r3
 8004c1a:	3b01      	subs	r3, #1
 8004c1c:	b29a      	uxth	r2, r3
 8004c1e:	68fb      	ldr	r3, [r7, #12]
 8004c20:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8004c22:	b662      	cpsie	i
}
 8004c24:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004c26:	68fb      	ldr	r3, [r7, #12]
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	691a      	ldr	r2, [r3, #16]
 8004c2c:	68fb      	ldr	r3, [r7, #12]
 8004c2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c30:	b2d2      	uxtb	r2, r2
 8004c32:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004c34:	68fb      	ldr	r3, [r7, #12]
 8004c36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c38:	1c5a      	adds	r2, r3, #1
 8004c3a:	68fb      	ldr	r3, [r7, #12]
 8004c3c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004c3e:	68fb      	ldr	r3, [r7, #12]
 8004c40:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004c42:	3b01      	subs	r3, #1
 8004c44:	b29a      	uxth	r2, r3
 8004c46:	68fb      	ldr	r3, [r7, #12]
 8004c48:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004c4a:	68fb      	ldr	r3, [r7, #12]
 8004c4c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004c4e:	b29b      	uxth	r3, r3
 8004c50:	3b01      	subs	r3, #1
 8004c52:	b29a      	uxth	r2, r3
 8004c54:	68fb      	ldr	r3, [r7, #12]
 8004c56:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004c58:	e042      	b.n	8004ce0 <HAL_I2C_Mem_Read+0x494>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004c5a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004c5c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8004c5e:	68f8      	ldr	r0, [r7, #12]
 8004c60:	f000 fbb4 	bl	80053cc <I2C_WaitOnRXNEFlagUntilTimeout>
 8004c64:	4603      	mov	r3, r0
 8004c66:	2b00      	cmp	r3, #0
 8004c68:	d001      	beq.n	8004c6e <HAL_I2C_Mem_Read+0x422>
        {
          return HAL_ERROR;
 8004c6a:	2301      	movs	r3, #1
 8004c6c:	e04c      	b.n	8004d08 <HAL_I2C_Mem_Read+0x4bc>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004c6e:	68fb      	ldr	r3, [r7, #12]
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	691a      	ldr	r2, [r3, #16]
 8004c74:	68fb      	ldr	r3, [r7, #12]
 8004c76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c78:	b2d2      	uxtb	r2, r2
 8004c7a:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004c7c:	68fb      	ldr	r3, [r7, #12]
 8004c7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c80:	1c5a      	adds	r2, r3, #1
 8004c82:	68fb      	ldr	r3, [r7, #12]
 8004c84:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8004c86:	68fb      	ldr	r3, [r7, #12]
 8004c88:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004c8a:	3b01      	subs	r3, #1
 8004c8c:	b29a      	uxth	r2, r3
 8004c8e:	68fb      	ldr	r3, [r7, #12]
 8004c90:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8004c92:	68fb      	ldr	r3, [r7, #12]
 8004c94:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004c96:	b29b      	uxth	r3, r3
 8004c98:	3b01      	subs	r3, #1
 8004c9a:	b29a      	uxth	r2, r3
 8004c9c:	68fb      	ldr	r3, [r7, #12]
 8004c9e:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8004ca0:	68fb      	ldr	r3, [r7, #12]
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	695b      	ldr	r3, [r3, #20]
 8004ca6:	f003 0304 	and.w	r3, r3, #4
 8004caa:	2b04      	cmp	r3, #4
 8004cac:	d118      	bne.n	8004ce0 <HAL_I2C_Mem_Read+0x494>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004cae:	68fb      	ldr	r3, [r7, #12]
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	691a      	ldr	r2, [r3, #16]
 8004cb4:	68fb      	ldr	r3, [r7, #12]
 8004cb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cb8:	b2d2      	uxtb	r2, r2
 8004cba:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004cbc:	68fb      	ldr	r3, [r7, #12]
 8004cbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cc0:	1c5a      	adds	r2, r3, #1
 8004cc2:	68fb      	ldr	r3, [r7, #12]
 8004cc4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004cc6:	68fb      	ldr	r3, [r7, #12]
 8004cc8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004cca:	3b01      	subs	r3, #1
 8004ccc:	b29a      	uxth	r2, r3
 8004cce:	68fb      	ldr	r3, [r7, #12]
 8004cd0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004cd2:	68fb      	ldr	r3, [r7, #12]
 8004cd4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004cd6:	b29b      	uxth	r3, r3
 8004cd8:	3b01      	subs	r3, #1
 8004cda:	b29a      	uxth	r2, r3
 8004cdc:	68fb      	ldr	r3, [r7, #12]
 8004cde:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8004ce0:	68fb      	ldr	r3, [r7, #12]
 8004ce2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004ce4:	2b00      	cmp	r3, #0
 8004ce6:	f47f ae94 	bne.w	8004a12 <HAL_I2C_Mem_Read+0x1c6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8004cea:	68fb      	ldr	r3, [r7, #12]
 8004cec:	2220      	movs	r2, #32
 8004cee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004cf2:	68fb      	ldr	r3, [r7, #12]
 8004cf4:	2200      	movs	r2, #0
 8004cf6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004cfa:	68fb      	ldr	r3, [r7, #12]
 8004cfc:	2200      	movs	r2, #0
 8004cfe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8004d02:	2300      	movs	r3, #0
 8004d04:	e000      	b.n	8004d08 <HAL_I2C_Mem_Read+0x4bc>
  }
  else
  {
    return HAL_BUSY;
 8004d06:	2302      	movs	r3, #2
  }
}
 8004d08:	4618      	mov	r0, r3
 8004d0a:	3728      	adds	r7, #40	; 0x28
 8004d0c:	46bd      	mov	sp, r7
 8004d0e:	bd80      	pop	{r7, pc}
 8004d10:	00010004 	.word	0x00010004
 8004d14:	20000004 	.word	0x20000004
 8004d18:	14f8b589 	.word	0x14f8b589

08004d1c <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8004d1c:	b580      	push	{r7, lr}
 8004d1e:	b088      	sub	sp, #32
 8004d20:	af02      	add	r7, sp, #8
 8004d22:	60f8      	str	r0, [r7, #12]
 8004d24:	607a      	str	r2, [r7, #4]
 8004d26:	603b      	str	r3, [r7, #0]
 8004d28:	460b      	mov	r3, r1
 8004d2a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004d2c:	68fb      	ldr	r3, [r7, #12]
 8004d2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d30:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8004d32:	697b      	ldr	r3, [r7, #20]
 8004d34:	2b08      	cmp	r3, #8
 8004d36:	d006      	beq.n	8004d46 <I2C_MasterRequestWrite+0x2a>
 8004d38:	697b      	ldr	r3, [r7, #20]
 8004d3a:	2b01      	cmp	r3, #1
 8004d3c:	d003      	beq.n	8004d46 <I2C_MasterRequestWrite+0x2a>
 8004d3e:	697b      	ldr	r3, [r7, #20]
 8004d40:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004d44:	d108      	bne.n	8004d58 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004d46:	68fb      	ldr	r3, [r7, #12]
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	681a      	ldr	r2, [r3, #0]
 8004d4c:	68fb      	ldr	r3, [r7, #12]
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004d54:	601a      	str	r2, [r3, #0]
 8004d56:	e00b      	b.n	8004d70 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8004d58:	68fb      	ldr	r3, [r7, #12]
 8004d5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d5c:	2b12      	cmp	r3, #18
 8004d5e:	d107      	bne.n	8004d70 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004d60:	68fb      	ldr	r3, [r7, #12]
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	681a      	ldr	r2, [r3, #0]
 8004d66:	68fb      	ldr	r3, [r7, #12]
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004d6e:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004d70:	683b      	ldr	r3, [r7, #0]
 8004d72:	9300      	str	r3, [sp, #0]
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	2200      	movs	r2, #0
 8004d78:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004d7c:	68f8      	ldr	r0, [r7, #12]
 8004d7e:	f000 f9cd 	bl	800511c <I2C_WaitOnFlagUntilTimeout>
 8004d82:	4603      	mov	r3, r0
 8004d84:	2b00      	cmp	r3, #0
 8004d86:	d00d      	beq.n	8004da4 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004d88:	68fb      	ldr	r3, [r7, #12]
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004d92:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004d96:	d103      	bne.n	8004da0 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004d98:	68fb      	ldr	r3, [r7, #12]
 8004d9a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004d9e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004da0:	2303      	movs	r3, #3
 8004da2:	e035      	b.n	8004e10 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004da4:	68fb      	ldr	r3, [r7, #12]
 8004da6:	691b      	ldr	r3, [r3, #16]
 8004da8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004dac:	d108      	bne.n	8004dc0 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004dae:	897b      	ldrh	r3, [r7, #10]
 8004db0:	b2db      	uxtb	r3, r3
 8004db2:	461a      	mov	r2, r3
 8004db4:	68fb      	ldr	r3, [r7, #12]
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004dbc:	611a      	str	r2, [r3, #16]
 8004dbe:	e01b      	b.n	8004df8 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8004dc0:	897b      	ldrh	r3, [r7, #10]
 8004dc2:	11db      	asrs	r3, r3, #7
 8004dc4:	b2db      	uxtb	r3, r3
 8004dc6:	f003 0306 	and.w	r3, r3, #6
 8004dca:	b2db      	uxtb	r3, r3
 8004dcc:	f063 030f 	orn	r3, r3, #15
 8004dd0:	b2da      	uxtb	r2, r3
 8004dd2:	68fb      	ldr	r3, [r7, #12]
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8004dd8:	683b      	ldr	r3, [r7, #0]
 8004dda:	687a      	ldr	r2, [r7, #4]
 8004ddc:	490e      	ldr	r1, [pc, #56]	; (8004e18 <I2C_MasterRequestWrite+0xfc>)
 8004dde:	68f8      	ldr	r0, [r7, #12]
 8004de0:	f000 f9f3 	bl	80051ca <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004de4:	4603      	mov	r3, r0
 8004de6:	2b00      	cmp	r3, #0
 8004de8:	d001      	beq.n	8004dee <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8004dea:	2301      	movs	r3, #1
 8004dec:	e010      	b.n	8004e10 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8004dee:	897b      	ldrh	r3, [r7, #10]
 8004df0:	b2da      	uxtb	r2, r3
 8004df2:	68fb      	ldr	r3, [r7, #12]
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004df8:	683b      	ldr	r3, [r7, #0]
 8004dfa:	687a      	ldr	r2, [r7, #4]
 8004dfc:	4907      	ldr	r1, [pc, #28]	; (8004e1c <I2C_MasterRequestWrite+0x100>)
 8004dfe:	68f8      	ldr	r0, [r7, #12]
 8004e00:	f000 f9e3 	bl	80051ca <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004e04:	4603      	mov	r3, r0
 8004e06:	2b00      	cmp	r3, #0
 8004e08:	d001      	beq.n	8004e0e <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8004e0a:	2301      	movs	r3, #1
 8004e0c:	e000      	b.n	8004e10 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8004e0e:	2300      	movs	r3, #0
}
 8004e10:	4618      	mov	r0, r3
 8004e12:	3718      	adds	r7, #24
 8004e14:	46bd      	mov	sp, r7
 8004e16:	bd80      	pop	{r7, pc}
 8004e18:	00010008 	.word	0x00010008
 8004e1c:	00010002 	.word	0x00010002

08004e20 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8004e20:	b580      	push	{r7, lr}
 8004e22:	b088      	sub	sp, #32
 8004e24:	af02      	add	r7, sp, #8
 8004e26:	60f8      	str	r0, [r7, #12]
 8004e28:	4608      	mov	r0, r1
 8004e2a:	4611      	mov	r1, r2
 8004e2c:	461a      	mov	r2, r3
 8004e2e:	4603      	mov	r3, r0
 8004e30:	817b      	strh	r3, [r7, #10]
 8004e32:	460b      	mov	r3, r1
 8004e34:	813b      	strh	r3, [r7, #8]
 8004e36:	4613      	mov	r3, r2
 8004e38:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004e3a:	68fb      	ldr	r3, [r7, #12]
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	681a      	ldr	r2, [r3, #0]
 8004e40:	68fb      	ldr	r3, [r7, #12]
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004e48:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004e4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e4c:	9300      	str	r3, [sp, #0]
 8004e4e:	6a3b      	ldr	r3, [r7, #32]
 8004e50:	2200      	movs	r2, #0
 8004e52:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004e56:	68f8      	ldr	r0, [r7, #12]
 8004e58:	f000 f960 	bl	800511c <I2C_WaitOnFlagUntilTimeout>
 8004e5c:	4603      	mov	r3, r0
 8004e5e:	2b00      	cmp	r3, #0
 8004e60:	d00d      	beq.n	8004e7e <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004e62:	68fb      	ldr	r3, [r7, #12]
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004e6c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004e70:	d103      	bne.n	8004e7a <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004e72:	68fb      	ldr	r3, [r7, #12]
 8004e74:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004e78:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004e7a:	2303      	movs	r3, #3
 8004e7c:	e05f      	b.n	8004f3e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004e7e:	897b      	ldrh	r3, [r7, #10]
 8004e80:	b2db      	uxtb	r3, r3
 8004e82:	461a      	mov	r2, r3
 8004e84:	68fb      	ldr	r3, [r7, #12]
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004e8c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004e8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e90:	6a3a      	ldr	r2, [r7, #32]
 8004e92:	492d      	ldr	r1, [pc, #180]	; (8004f48 <I2C_RequestMemoryWrite+0x128>)
 8004e94:	68f8      	ldr	r0, [r7, #12]
 8004e96:	f000 f998 	bl	80051ca <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004e9a:	4603      	mov	r3, r0
 8004e9c:	2b00      	cmp	r3, #0
 8004e9e:	d001      	beq.n	8004ea4 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8004ea0:	2301      	movs	r3, #1
 8004ea2:	e04c      	b.n	8004f3e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004ea4:	2300      	movs	r3, #0
 8004ea6:	617b      	str	r3, [r7, #20]
 8004ea8:	68fb      	ldr	r3, [r7, #12]
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	695b      	ldr	r3, [r3, #20]
 8004eae:	617b      	str	r3, [r7, #20]
 8004eb0:	68fb      	ldr	r3, [r7, #12]
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	699b      	ldr	r3, [r3, #24]
 8004eb6:	617b      	str	r3, [r7, #20]
 8004eb8:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004eba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004ebc:	6a39      	ldr	r1, [r7, #32]
 8004ebe:	68f8      	ldr	r0, [r7, #12]
 8004ec0:	f000 fa02 	bl	80052c8 <I2C_WaitOnTXEFlagUntilTimeout>
 8004ec4:	4603      	mov	r3, r0
 8004ec6:	2b00      	cmp	r3, #0
 8004ec8:	d00d      	beq.n	8004ee6 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004eca:	68fb      	ldr	r3, [r7, #12]
 8004ecc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ece:	2b04      	cmp	r3, #4
 8004ed0:	d107      	bne.n	8004ee2 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004ed2:	68fb      	ldr	r3, [r7, #12]
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	681a      	ldr	r2, [r3, #0]
 8004ed8:	68fb      	ldr	r3, [r7, #12]
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004ee0:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004ee2:	2301      	movs	r3, #1
 8004ee4:	e02b      	b.n	8004f3e <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004ee6:	88fb      	ldrh	r3, [r7, #6]
 8004ee8:	2b01      	cmp	r3, #1
 8004eea:	d105      	bne.n	8004ef8 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004eec:	893b      	ldrh	r3, [r7, #8]
 8004eee:	b2da      	uxtb	r2, r3
 8004ef0:	68fb      	ldr	r3, [r7, #12]
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	611a      	str	r2, [r3, #16]
 8004ef6:	e021      	b.n	8004f3c <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8004ef8:	893b      	ldrh	r3, [r7, #8]
 8004efa:	0a1b      	lsrs	r3, r3, #8
 8004efc:	b29b      	uxth	r3, r3
 8004efe:	b2da      	uxtb	r2, r3
 8004f00:	68fb      	ldr	r3, [r7, #12]
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004f06:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004f08:	6a39      	ldr	r1, [r7, #32]
 8004f0a:	68f8      	ldr	r0, [r7, #12]
 8004f0c:	f000 f9dc 	bl	80052c8 <I2C_WaitOnTXEFlagUntilTimeout>
 8004f10:	4603      	mov	r3, r0
 8004f12:	2b00      	cmp	r3, #0
 8004f14:	d00d      	beq.n	8004f32 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004f16:	68fb      	ldr	r3, [r7, #12]
 8004f18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f1a:	2b04      	cmp	r3, #4
 8004f1c:	d107      	bne.n	8004f2e <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004f1e:	68fb      	ldr	r3, [r7, #12]
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	681a      	ldr	r2, [r3, #0]
 8004f24:	68fb      	ldr	r3, [r7, #12]
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004f2c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004f2e:	2301      	movs	r3, #1
 8004f30:	e005      	b.n	8004f3e <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004f32:	893b      	ldrh	r3, [r7, #8]
 8004f34:	b2da      	uxtb	r2, r3
 8004f36:	68fb      	ldr	r3, [r7, #12]
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8004f3c:	2300      	movs	r3, #0
}
 8004f3e:	4618      	mov	r0, r3
 8004f40:	3718      	adds	r7, #24
 8004f42:	46bd      	mov	sp, r7
 8004f44:	bd80      	pop	{r7, pc}
 8004f46:	bf00      	nop
 8004f48:	00010002 	.word	0x00010002

08004f4c <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8004f4c:	b580      	push	{r7, lr}
 8004f4e:	b088      	sub	sp, #32
 8004f50:	af02      	add	r7, sp, #8
 8004f52:	60f8      	str	r0, [r7, #12]
 8004f54:	4608      	mov	r0, r1
 8004f56:	4611      	mov	r1, r2
 8004f58:	461a      	mov	r2, r3
 8004f5a:	4603      	mov	r3, r0
 8004f5c:	817b      	strh	r3, [r7, #10]
 8004f5e:	460b      	mov	r3, r1
 8004f60:	813b      	strh	r3, [r7, #8]
 8004f62:	4613      	mov	r3, r2
 8004f64:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004f66:	68fb      	ldr	r3, [r7, #12]
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	681a      	ldr	r2, [r3, #0]
 8004f6c:	68fb      	ldr	r3, [r7, #12]
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004f74:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004f76:	68fb      	ldr	r3, [r7, #12]
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	681a      	ldr	r2, [r3, #0]
 8004f7c:	68fb      	ldr	r3, [r7, #12]
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004f84:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004f86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f88:	9300      	str	r3, [sp, #0]
 8004f8a:	6a3b      	ldr	r3, [r7, #32]
 8004f8c:	2200      	movs	r2, #0
 8004f8e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004f92:	68f8      	ldr	r0, [r7, #12]
 8004f94:	f000 f8c2 	bl	800511c <I2C_WaitOnFlagUntilTimeout>
 8004f98:	4603      	mov	r3, r0
 8004f9a:	2b00      	cmp	r3, #0
 8004f9c:	d00d      	beq.n	8004fba <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004f9e:	68fb      	ldr	r3, [r7, #12]
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004fa8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004fac:	d103      	bne.n	8004fb6 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004fae:	68fb      	ldr	r3, [r7, #12]
 8004fb0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004fb4:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004fb6:	2303      	movs	r3, #3
 8004fb8:	e0aa      	b.n	8005110 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004fba:	897b      	ldrh	r3, [r7, #10]
 8004fbc:	b2db      	uxtb	r3, r3
 8004fbe:	461a      	mov	r2, r3
 8004fc0:	68fb      	ldr	r3, [r7, #12]
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004fc8:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004fca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fcc:	6a3a      	ldr	r2, [r7, #32]
 8004fce:	4952      	ldr	r1, [pc, #328]	; (8005118 <I2C_RequestMemoryRead+0x1cc>)
 8004fd0:	68f8      	ldr	r0, [r7, #12]
 8004fd2:	f000 f8fa 	bl	80051ca <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004fd6:	4603      	mov	r3, r0
 8004fd8:	2b00      	cmp	r3, #0
 8004fda:	d001      	beq.n	8004fe0 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8004fdc:	2301      	movs	r3, #1
 8004fde:	e097      	b.n	8005110 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004fe0:	2300      	movs	r3, #0
 8004fe2:	617b      	str	r3, [r7, #20]
 8004fe4:	68fb      	ldr	r3, [r7, #12]
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	695b      	ldr	r3, [r3, #20]
 8004fea:	617b      	str	r3, [r7, #20]
 8004fec:	68fb      	ldr	r3, [r7, #12]
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	699b      	ldr	r3, [r3, #24]
 8004ff2:	617b      	str	r3, [r7, #20]
 8004ff4:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004ff6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004ff8:	6a39      	ldr	r1, [r7, #32]
 8004ffa:	68f8      	ldr	r0, [r7, #12]
 8004ffc:	f000 f964 	bl	80052c8 <I2C_WaitOnTXEFlagUntilTimeout>
 8005000:	4603      	mov	r3, r0
 8005002:	2b00      	cmp	r3, #0
 8005004:	d00d      	beq.n	8005022 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005006:	68fb      	ldr	r3, [r7, #12]
 8005008:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800500a:	2b04      	cmp	r3, #4
 800500c:	d107      	bne.n	800501e <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800500e:	68fb      	ldr	r3, [r7, #12]
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	681a      	ldr	r2, [r3, #0]
 8005014:	68fb      	ldr	r3, [r7, #12]
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800501c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800501e:	2301      	movs	r3, #1
 8005020:	e076      	b.n	8005110 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005022:	88fb      	ldrh	r3, [r7, #6]
 8005024:	2b01      	cmp	r3, #1
 8005026:	d105      	bne.n	8005034 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005028:	893b      	ldrh	r3, [r7, #8]
 800502a:	b2da      	uxtb	r2, r3
 800502c:	68fb      	ldr	r3, [r7, #12]
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	611a      	str	r2, [r3, #16]
 8005032:	e021      	b.n	8005078 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8005034:	893b      	ldrh	r3, [r7, #8]
 8005036:	0a1b      	lsrs	r3, r3, #8
 8005038:	b29b      	uxth	r3, r3
 800503a:	b2da      	uxtb	r2, r3
 800503c:	68fb      	ldr	r3, [r7, #12]
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005042:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005044:	6a39      	ldr	r1, [r7, #32]
 8005046:	68f8      	ldr	r0, [r7, #12]
 8005048:	f000 f93e 	bl	80052c8 <I2C_WaitOnTXEFlagUntilTimeout>
 800504c:	4603      	mov	r3, r0
 800504e:	2b00      	cmp	r3, #0
 8005050:	d00d      	beq.n	800506e <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005052:	68fb      	ldr	r3, [r7, #12]
 8005054:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005056:	2b04      	cmp	r3, #4
 8005058:	d107      	bne.n	800506a <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800505a:	68fb      	ldr	r3, [r7, #12]
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	681a      	ldr	r2, [r3, #0]
 8005060:	68fb      	ldr	r3, [r7, #12]
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005068:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800506a:	2301      	movs	r3, #1
 800506c:	e050      	b.n	8005110 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800506e:	893b      	ldrh	r3, [r7, #8]
 8005070:	b2da      	uxtb	r2, r3
 8005072:	68fb      	ldr	r3, [r7, #12]
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005078:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800507a:	6a39      	ldr	r1, [r7, #32]
 800507c:	68f8      	ldr	r0, [r7, #12]
 800507e:	f000 f923 	bl	80052c8 <I2C_WaitOnTXEFlagUntilTimeout>
 8005082:	4603      	mov	r3, r0
 8005084:	2b00      	cmp	r3, #0
 8005086:	d00d      	beq.n	80050a4 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005088:	68fb      	ldr	r3, [r7, #12]
 800508a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800508c:	2b04      	cmp	r3, #4
 800508e:	d107      	bne.n	80050a0 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005090:	68fb      	ldr	r3, [r7, #12]
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	681a      	ldr	r2, [r3, #0]
 8005096:	68fb      	ldr	r3, [r7, #12]
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800509e:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80050a0:	2301      	movs	r3, #1
 80050a2:	e035      	b.n	8005110 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80050a4:	68fb      	ldr	r3, [r7, #12]
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	681a      	ldr	r2, [r3, #0]
 80050aa:	68fb      	ldr	r3, [r7, #12]
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80050b2:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80050b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050b6:	9300      	str	r3, [sp, #0]
 80050b8:	6a3b      	ldr	r3, [r7, #32]
 80050ba:	2200      	movs	r2, #0
 80050bc:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80050c0:	68f8      	ldr	r0, [r7, #12]
 80050c2:	f000 f82b 	bl	800511c <I2C_WaitOnFlagUntilTimeout>
 80050c6:	4603      	mov	r3, r0
 80050c8:	2b00      	cmp	r3, #0
 80050ca:	d00d      	beq.n	80050e8 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80050cc:	68fb      	ldr	r3, [r7, #12]
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80050d6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80050da:	d103      	bne.n	80050e4 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80050dc:	68fb      	ldr	r3, [r7, #12]
 80050de:	f44f 7200 	mov.w	r2, #512	; 0x200
 80050e2:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80050e4:	2303      	movs	r3, #3
 80050e6:	e013      	b.n	8005110 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80050e8:	897b      	ldrh	r3, [r7, #10]
 80050ea:	b2db      	uxtb	r3, r3
 80050ec:	f043 0301 	orr.w	r3, r3, #1
 80050f0:	b2da      	uxtb	r2, r3
 80050f2:	68fb      	ldr	r3, [r7, #12]
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80050f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050fa:	6a3a      	ldr	r2, [r7, #32]
 80050fc:	4906      	ldr	r1, [pc, #24]	; (8005118 <I2C_RequestMemoryRead+0x1cc>)
 80050fe:	68f8      	ldr	r0, [r7, #12]
 8005100:	f000 f863 	bl	80051ca <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005104:	4603      	mov	r3, r0
 8005106:	2b00      	cmp	r3, #0
 8005108:	d001      	beq.n	800510e <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 800510a:	2301      	movs	r3, #1
 800510c:	e000      	b.n	8005110 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 800510e:	2300      	movs	r3, #0
}
 8005110:	4618      	mov	r0, r3
 8005112:	3718      	adds	r7, #24
 8005114:	46bd      	mov	sp, r7
 8005116:	bd80      	pop	{r7, pc}
 8005118:	00010002 	.word	0x00010002

0800511c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800511c:	b580      	push	{r7, lr}
 800511e:	b084      	sub	sp, #16
 8005120:	af00      	add	r7, sp, #0
 8005122:	60f8      	str	r0, [r7, #12]
 8005124:	60b9      	str	r1, [r7, #8]
 8005126:	603b      	str	r3, [r7, #0]
 8005128:	4613      	mov	r3, r2
 800512a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800512c:	e025      	b.n	800517a <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800512e:	683b      	ldr	r3, [r7, #0]
 8005130:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005134:	d021      	beq.n	800517a <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005136:	f7fd fecf 	bl	8002ed8 <HAL_GetTick>
 800513a:	4602      	mov	r2, r0
 800513c:	69bb      	ldr	r3, [r7, #24]
 800513e:	1ad3      	subs	r3, r2, r3
 8005140:	683a      	ldr	r2, [r7, #0]
 8005142:	429a      	cmp	r2, r3
 8005144:	d302      	bcc.n	800514c <I2C_WaitOnFlagUntilTimeout+0x30>
 8005146:	683b      	ldr	r3, [r7, #0]
 8005148:	2b00      	cmp	r3, #0
 800514a:	d116      	bne.n	800517a <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 800514c:	68fb      	ldr	r3, [r7, #12]
 800514e:	2200      	movs	r2, #0
 8005150:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8005152:	68fb      	ldr	r3, [r7, #12]
 8005154:	2220      	movs	r2, #32
 8005156:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800515a:	68fb      	ldr	r3, [r7, #12]
 800515c:	2200      	movs	r2, #0
 800515e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8005162:	68fb      	ldr	r3, [r7, #12]
 8005164:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005166:	f043 0220 	orr.w	r2, r3, #32
 800516a:	68fb      	ldr	r3, [r7, #12]
 800516c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800516e:	68fb      	ldr	r3, [r7, #12]
 8005170:	2200      	movs	r2, #0
 8005172:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005176:	2301      	movs	r3, #1
 8005178:	e023      	b.n	80051c2 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800517a:	68bb      	ldr	r3, [r7, #8]
 800517c:	0c1b      	lsrs	r3, r3, #16
 800517e:	b2db      	uxtb	r3, r3
 8005180:	2b01      	cmp	r3, #1
 8005182:	d10d      	bne.n	80051a0 <I2C_WaitOnFlagUntilTimeout+0x84>
 8005184:	68fb      	ldr	r3, [r7, #12]
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	695b      	ldr	r3, [r3, #20]
 800518a:	43da      	mvns	r2, r3
 800518c:	68bb      	ldr	r3, [r7, #8]
 800518e:	4013      	ands	r3, r2
 8005190:	b29b      	uxth	r3, r3
 8005192:	2b00      	cmp	r3, #0
 8005194:	bf0c      	ite	eq
 8005196:	2301      	moveq	r3, #1
 8005198:	2300      	movne	r3, #0
 800519a:	b2db      	uxtb	r3, r3
 800519c:	461a      	mov	r2, r3
 800519e:	e00c      	b.n	80051ba <I2C_WaitOnFlagUntilTimeout+0x9e>
 80051a0:	68fb      	ldr	r3, [r7, #12]
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	699b      	ldr	r3, [r3, #24]
 80051a6:	43da      	mvns	r2, r3
 80051a8:	68bb      	ldr	r3, [r7, #8]
 80051aa:	4013      	ands	r3, r2
 80051ac:	b29b      	uxth	r3, r3
 80051ae:	2b00      	cmp	r3, #0
 80051b0:	bf0c      	ite	eq
 80051b2:	2301      	moveq	r3, #1
 80051b4:	2300      	movne	r3, #0
 80051b6:	b2db      	uxtb	r3, r3
 80051b8:	461a      	mov	r2, r3
 80051ba:	79fb      	ldrb	r3, [r7, #7]
 80051bc:	429a      	cmp	r2, r3
 80051be:	d0b6      	beq.n	800512e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80051c0:	2300      	movs	r3, #0
}
 80051c2:	4618      	mov	r0, r3
 80051c4:	3710      	adds	r7, #16
 80051c6:	46bd      	mov	sp, r7
 80051c8:	bd80      	pop	{r7, pc}

080051ca <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80051ca:	b580      	push	{r7, lr}
 80051cc:	b084      	sub	sp, #16
 80051ce:	af00      	add	r7, sp, #0
 80051d0:	60f8      	str	r0, [r7, #12]
 80051d2:	60b9      	str	r1, [r7, #8]
 80051d4:	607a      	str	r2, [r7, #4]
 80051d6:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80051d8:	e051      	b.n	800527e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80051da:	68fb      	ldr	r3, [r7, #12]
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	695b      	ldr	r3, [r3, #20]
 80051e0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80051e4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80051e8:	d123      	bne.n	8005232 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80051ea:	68fb      	ldr	r3, [r7, #12]
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	681a      	ldr	r2, [r3, #0]
 80051f0:	68fb      	ldr	r3, [r7, #12]
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80051f8:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80051fa:	68fb      	ldr	r3, [r7, #12]
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005202:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8005204:	68fb      	ldr	r3, [r7, #12]
 8005206:	2200      	movs	r2, #0
 8005208:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800520a:	68fb      	ldr	r3, [r7, #12]
 800520c:	2220      	movs	r2, #32
 800520e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005212:	68fb      	ldr	r3, [r7, #12]
 8005214:	2200      	movs	r2, #0
 8005216:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800521a:	68fb      	ldr	r3, [r7, #12]
 800521c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800521e:	f043 0204 	orr.w	r2, r3, #4
 8005222:	68fb      	ldr	r3, [r7, #12]
 8005224:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005226:	68fb      	ldr	r3, [r7, #12]
 8005228:	2200      	movs	r2, #0
 800522a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800522e:	2301      	movs	r3, #1
 8005230:	e046      	b.n	80052c0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005238:	d021      	beq.n	800527e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800523a:	f7fd fe4d 	bl	8002ed8 <HAL_GetTick>
 800523e:	4602      	mov	r2, r0
 8005240:	683b      	ldr	r3, [r7, #0]
 8005242:	1ad3      	subs	r3, r2, r3
 8005244:	687a      	ldr	r2, [r7, #4]
 8005246:	429a      	cmp	r2, r3
 8005248:	d302      	bcc.n	8005250 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	2b00      	cmp	r3, #0
 800524e:	d116      	bne.n	800527e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005250:	68fb      	ldr	r3, [r7, #12]
 8005252:	2200      	movs	r2, #0
 8005254:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005256:	68fb      	ldr	r3, [r7, #12]
 8005258:	2220      	movs	r2, #32
 800525a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800525e:	68fb      	ldr	r3, [r7, #12]
 8005260:	2200      	movs	r2, #0
 8005262:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005266:	68fb      	ldr	r3, [r7, #12]
 8005268:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800526a:	f043 0220 	orr.w	r2, r3, #32
 800526e:	68fb      	ldr	r3, [r7, #12]
 8005270:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005272:	68fb      	ldr	r3, [r7, #12]
 8005274:	2200      	movs	r2, #0
 8005276:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800527a:	2301      	movs	r3, #1
 800527c:	e020      	b.n	80052c0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800527e:	68bb      	ldr	r3, [r7, #8]
 8005280:	0c1b      	lsrs	r3, r3, #16
 8005282:	b2db      	uxtb	r3, r3
 8005284:	2b01      	cmp	r3, #1
 8005286:	d10c      	bne.n	80052a2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8005288:	68fb      	ldr	r3, [r7, #12]
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	695b      	ldr	r3, [r3, #20]
 800528e:	43da      	mvns	r2, r3
 8005290:	68bb      	ldr	r3, [r7, #8]
 8005292:	4013      	ands	r3, r2
 8005294:	b29b      	uxth	r3, r3
 8005296:	2b00      	cmp	r3, #0
 8005298:	bf14      	ite	ne
 800529a:	2301      	movne	r3, #1
 800529c:	2300      	moveq	r3, #0
 800529e:	b2db      	uxtb	r3, r3
 80052a0:	e00b      	b.n	80052ba <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 80052a2:	68fb      	ldr	r3, [r7, #12]
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	699b      	ldr	r3, [r3, #24]
 80052a8:	43da      	mvns	r2, r3
 80052aa:	68bb      	ldr	r3, [r7, #8]
 80052ac:	4013      	ands	r3, r2
 80052ae:	b29b      	uxth	r3, r3
 80052b0:	2b00      	cmp	r3, #0
 80052b2:	bf14      	ite	ne
 80052b4:	2301      	movne	r3, #1
 80052b6:	2300      	moveq	r3, #0
 80052b8:	b2db      	uxtb	r3, r3
 80052ba:	2b00      	cmp	r3, #0
 80052bc:	d18d      	bne.n	80051da <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 80052be:	2300      	movs	r3, #0
}
 80052c0:	4618      	mov	r0, r3
 80052c2:	3710      	adds	r7, #16
 80052c4:	46bd      	mov	sp, r7
 80052c6:	bd80      	pop	{r7, pc}

080052c8 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80052c8:	b580      	push	{r7, lr}
 80052ca:	b084      	sub	sp, #16
 80052cc:	af00      	add	r7, sp, #0
 80052ce:	60f8      	str	r0, [r7, #12]
 80052d0:	60b9      	str	r1, [r7, #8]
 80052d2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80052d4:	e02d      	b.n	8005332 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80052d6:	68f8      	ldr	r0, [r7, #12]
 80052d8:	f000 f8ce 	bl	8005478 <I2C_IsAcknowledgeFailed>
 80052dc:	4603      	mov	r3, r0
 80052de:	2b00      	cmp	r3, #0
 80052e0:	d001      	beq.n	80052e6 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80052e2:	2301      	movs	r3, #1
 80052e4:	e02d      	b.n	8005342 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80052e6:	68bb      	ldr	r3, [r7, #8]
 80052e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80052ec:	d021      	beq.n	8005332 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80052ee:	f7fd fdf3 	bl	8002ed8 <HAL_GetTick>
 80052f2:	4602      	mov	r2, r0
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	1ad3      	subs	r3, r2, r3
 80052f8:	68ba      	ldr	r2, [r7, #8]
 80052fa:	429a      	cmp	r2, r3
 80052fc:	d302      	bcc.n	8005304 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80052fe:	68bb      	ldr	r3, [r7, #8]
 8005300:	2b00      	cmp	r3, #0
 8005302:	d116      	bne.n	8005332 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005304:	68fb      	ldr	r3, [r7, #12]
 8005306:	2200      	movs	r2, #0
 8005308:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800530a:	68fb      	ldr	r3, [r7, #12]
 800530c:	2220      	movs	r2, #32
 800530e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005312:	68fb      	ldr	r3, [r7, #12]
 8005314:	2200      	movs	r2, #0
 8005316:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800531a:	68fb      	ldr	r3, [r7, #12]
 800531c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800531e:	f043 0220 	orr.w	r2, r3, #32
 8005322:	68fb      	ldr	r3, [r7, #12]
 8005324:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005326:	68fb      	ldr	r3, [r7, #12]
 8005328:	2200      	movs	r2, #0
 800532a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800532e:	2301      	movs	r3, #1
 8005330:	e007      	b.n	8005342 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005332:	68fb      	ldr	r3, [r7, #12]
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	695b      	ldr	r3, [r3, #20]
 8005338:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800533c:	2b80      	cmp	r3, #128	; 0x80
 800533e:	d1ca      	bne.n	80052d6 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005340:	2300      	movs	r3, #0
}
 8005342:	4618      	mov	r0, r3
 8005344:	3710      	adds	r7, #16
 8005346:	46bd      	mov	sp, r7
 8005348:	bd80      	pop	{r7, pc}

0800534a <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800534a:	b580      	push	{r7, lr}
 800534c:	b084      	sub	sp, #16
 800534e:	af00      	add	r7, sp, #0
 8005350:	60f8      	str	r0, [r7, #12]
 8005352:	60b9      	str	r1, [r7, #8]
 8005354:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005356:	e02d      	b.n	80053b4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8005358:	68f8      	ldr	r0, [r7, #12]
 800535a:	f000 f88d 	bl	8005478 <I2C_IsAcknowledgeFailed>
 800535e:	4603      	mov	r3, r0
 8005360:	2b00      	cmp	r3, #0
 8005362:	d001      	beq.n	8005368 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005364:	2301      	movs	r3, #1
 8005366:	e02d      	b.n	80053c4 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005368:	68bb      	ldr	r3, [r7, #8]
 800536a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800536e:	d021      	beq.n	80053b4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005370:	f7fd fdb2 	bl	8002ed8 <HAL_GetTick>
 8005374:	4602      	mov	r2, r0
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	1ad3      	subs	r3, r2, r3
 800537a:	68ba      	ldr	r2, [r7, #8]
 800537c:	429a      	cmp	r2, r3
 800537e:	d302      	bcc.n	8005386 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8005380:	68bb      	ldr	r3, [r7, #8]
 8005382:	2b00      	cmp	r3, #0
 8005384:	d116      	bne.n	80053b4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005386:	68fb      	ldr	r3, [r7, #12]
 8005388:	2200      	movs	r2, #0
 800538a:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800538c:	68fb      	ldr	r3, [r7, #12]
 800538e:	2220      	movs	r2, #32
 8005390:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005394:	68fb      	ldr	r3, [r7, #12]
 8005396:	2200      	movs	r2, #0
 8005398:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800539c:	68fb      	ldr	r3, [r7, #12]
 800539e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053a0:	f043 0220 	orr.w	r2, r3, #32
 80053a4:	68fb      	ldr	r3, [r7, #12]
 80053a6:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80053a8:	68fb      	ldr	r3, [r7, #12]
 80053aa:	2200      	movs	r2, #0
 80053ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80053b0:	2301      	movs	r3, #1
 80053b2:	e007      	b.n	80053c4 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80053b4:	68fb      	ldr	r3, [r7, #12]
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	695b      	ldr	r3, [r3, #20]
 80053ba:	f003 0304 	and.w	r3, r3, #4
 80053be:	2b04      	cmp	r3, #4
 80053c0:	d1ca      	bne.n	8005358 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80053c2:	2300      	movs	r3, #0
}
 80053c4:	4618      	mov	r0, r3
 80053c6:	3710      	adds	r7, #16
 80053c8:	46bd      	mov	sp, r7
 80053ca:	bd80      	pop	{r7, pc}

080053cc <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80053cc:	b580      	push	{r7, lr}
 80053ce:	b084      	sub	sp, #16
 80053d0:	af00      	add	r7, sp, #0
 80053d2:	60f8      	str	r0, [r7, #12]
 80053d4:	60b9      	str	r1, [r7, #8]
 80053d6:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80053d8:	e042      	b.n	8005460 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80053da:	68fb      	ldr	r3, [r7, #12]
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	695b      	ldr	r3, [r3, #20]
 80053e0:	f003 0310 	and.w	r3, r3, #16
 80053e4:	2b10      	cmp	r3, #16
 80053e6:	d119      	bne.n	800541c <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80053e8:	68fb      	ldr	r3, [r7, #12]
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	f06f 0210 	mvn.w	r2, #16
 80053f0:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80053f2:	68fb      	ldr	r3, [r7, #12]
 80053f4:	2200      	movs	r2, #0
 80053f6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80053f8:	68fb      	ldr	r3, [r7, #12]
 80053fa:	2220      	movs	r2, #32
 80053fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005400:	68fb      	ldr	r3, [r7, #12]
 8005402:	2200      	movs	r2, #0
 8005404:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8005408:	68fb      	ldr	r3, [r7, #12]
 800540a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800540c:	68fb      	ldr	r3, [r7, #12]
 800540e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005410:	68fb      	ldr	r3, [r7, #12]
 8005412:	2200      	movs	r2, #0
 8005414:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8005418:	2301      	movs	r3, #1
 800541a:	e029      	b.n	8005470 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800541c:	f7fd fd5c 	bl	8002ed8 <HAL_GetTick>
 8005420:	4602      	mov	r2, r0
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	1ad3      	subs	r3, r2, r3
 8005426:	68ba      	ldr	r2, [r7, #8]
 8005428:	429a      	cmp	r2, r3
 800542a:	d302      	bcc.n	8005432 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 800542c:	68bb      	ldr	r3, [r7, #8]
 800542e:	2b00      	cmp	r3, #0
 8005430:	d116      	bne.n	8005460 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8005432:	68fb      	ldr	r3, [r7, #12]
 8005434:	2200      	movs	r2, #0
 8005436:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005438:	68fb      	ldr	r3, [r7, #12]
 800543a:	2220      	movs	r2, #32
 800543c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005440:	68fb      	ldr	r3, [r7, #12]
 8005442:	2200      	movs	r2, #0
 8005444:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005448:	68fb      	ldr	r3, [r7, #12]
 800544a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800544c:	f043 0220 	orr.w	r2, r3, #32
 8005450:	68fb      	ldr	r3, [r7, #12]
 8005452:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005454:	68fb      	ldr	r3, [r7, #12]
 8005456:	2200      	movs	r2, #0
 8005458:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800545c:	2301      	movs	r3, #1
 800545e:	e007      	b.n	8005470 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005460:	68fb      	ldr	r3, [r7, #12]
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	695b      	ldr	r3, [r3, #20]
 8005466:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800546a:	2b40      	cmp	r3, #64	; 0x40
 800546c:	d1b5      	bne.n	80053da <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800546e:	2300      	movs	r3, #0
}
 8005470:	4618      	mov	r0, r3
 8005472:	3710      	adds	r7, #16
 8005474:	46bd      	mov	sp, r7
 8005476:	bd80      	pop	{r7, pc}

08005478 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8005478:	b480      	push	{r7}
 800547a:	b083      	sub	sp, #12
 800547c:	af00      	add	r7, sp, #0
 800547e:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	695b      	ldr	r3, [r3, #20]
 8005486:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800548a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800548e:	d11b      	bne.n	80054c8 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005498:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	2200      	movs	r2, #0
 800549e:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	2220      	movs	r2, #32
 80054a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	2200      	movs	r2, #0
 80054ac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054b4:	f043 0204 	orr.w	r2, r3, #4
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	2200      	movs	r2, #0
 80054c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80054c4:	2301      	movs	r3, #1
 80054c6:	e000      	b.n	80054ca <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80054c8:	2300      	movs	r3, #0
}
 80054ca:	4618      	mov	r0, r3
 80054cc:	370c      	adds	r7, #12
 80054ce:	46bd      	mov	sp, r7
 80054d0:	bc80      	pop	{r7}
 80054d2:	4770      	bx	lr

080054d4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80054d4:	b580      	push	{r7, lr}
 80054d6:	b086      	sub	sp, #24
 80054d8:	af00      	add	r7, sp, #0
 80054da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	2b00      	cmp	r3, #0
 80054e0:	d101      	bne.n	80054e6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80054e2:	2301      	movs	r3, #1
 80054e4:	e272      	b.n	80059cc <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	f003 0301 	and.w	r3, r3, #1
 80054ee:	2b00      	cmp	r3, #0
 80054f0:	f000 8087 	beq.w	8005602 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80054f4:	4b92      	ldr	r3, [pc, #584]	; (8005740 <HAL_RCC_OscConfig+0x26c>)
 80054f6:	685b      	ldr	r3, [r3, #4]
 80054f8:	f003 030c 	and.w	r3, r3, #12
 80054fc:	2b04      	cmp	r3, #4
 80054fe:	d00c      	beq.n	800551a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8005500:	4b8f      	ldr	r3, [pc, #572]	; (8005740 <HAL_RCC_OscConfig+0x26c>)
 8005502:	685b      	ldr	r3, [r3, #4]
 8005504:	f003 030c 	and.w	r3, r3, #12
 8005508:	2b08      	cmp	r3, #8
 800550a:	d112      	bne.n	8005532 <HAL_RCC_OscConfig+0x5e>
 800550c:	4b8c      	ldr	r3, [pc, #560]	; (8005740 <HAL_RCC_OscConfig+0x26c>)
 800550e:	685b      	ldr	r3, [r3, #4]
 8005510:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005514:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005518:	d10b      	bne.n	8005532 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800551a:	4b89      	ldr	r3, [pc, #548]	; (8005740 <HAL_RCC_OscConfig+0x26c>)
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005522:	2b00      	cmp	r3, #0
 8005524:	d06c      	beq.n	8005600 <HAL_RCC_OscConfig+0x12c>
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	685b      	ldr	r3, [r3, #4]
 800552a:	2b00      	cmp	r3, #0
 800552c:	d168      	bne.n	8005600 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800552e:	2301      	movs	r3, #1
 8005530:	e24c      	b.n	80059cc <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	685b      	ldr	r3, [r3, #4]
 8005536:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800553a:	d106      	bne.n	800554a <HAL_RCC_OscConfig+0x76>
 800553c:	4b80      	ldr	r3, [pc, #512]	; (8005740 <HAL_RCC_OscConfig+0x26c>)
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	4a7f      	ldr	r2, [pc, #508]	; (8005740 <HAL_RCC_OscConfig+0x26c>)
 8005542:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005546:	6013      	str	r3, [r2, #0]
 8005548:	e02e      	b.n	80055a8 <HAL_RCC_OscConfig+0xd4>
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	685b      	ldr	r3, [r3, #4]
 800554e:	2b00      	cmp	r3, #0
 8005550:	d10c      	bne.n	800556c <HAL_RCC_OscConfig+0x98>
 8005552:	4b7b      	ldr	r3, [pc, #492]	; (8005740 <HAL_RCC_OscConfig+0x26c>)
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	4a7a      	ldr	r2, [pc, #488]	; (8005740 <HAL_RCC_OscConfig+0x26c>)
 8005558:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800555c:	6013      	str	r3, [r2, #0]
 800555e:	4b78      	ldr	r3, [pc, #480]	; (8005740 <HAL_RCC_OscConfig+0x26c>)
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	4a77      	ldr	r2, [pc, #476]	; (8005740 <HAL_RCC_OscConfig+0x26c>)
 8005564:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005568:	6013      	str	r3, [r2, #0]
 800556a:	e01d      	b.n	80055a8 <HAL_RCC_OscConfig+0xd4>
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	685b      	ldr	r3, [r3, #4]
 8005570:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005574:	d10c      	bne.n	8005590 <HAL_RCC_OscConfig+0xbc>
 8005576:	4b72      	ldr	r3, [pc, #456]	; (8005740 <HAL_RCC_OscConfig+0x26c>)
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	4a71      	ldr	r2, [pc, #452]	; (8005740 <HAL_RCC_OscConfig+0x26c>)
 800557c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005580:	6013      	str	r3, [r2, #0]
 8005582:	4b6f      	ldr	r3, [pc, #444]	; (8005740 <HAL_RCC_OscConfig+0x26c>)
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	4a6e      	ldr	r2, [pc, #440]	; (8005740 <HAL_RCC_OscConfig+0x26c>)
 8005588:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800558c:	6013      	str	r3, [r2, #0]
 800558e:	e00b      	b.n	80055a8 <HAL_RCC_OscConfig+0xd4>
 8005590:	4b6b      	ldr	r3, [pc, #428]	; (8005740 <HAL_RCC_OscConfig+0x26c>)
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	4a6a      	ldr	r2, [pc, #424]	; (8005740 <HAL_RCC_OscConfig+0x26c>)
 8005596:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800559a:	6013      	str	r3, [r2, #0]
 800559c:	4b68      	ldr	r3, [pc, #416]	; (8005740 <HAL_RCC_OscConfig+0x26c>)
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	4a67      	ldr	r2, [pc, #412]	; (8005740 <HAL_RCC_OscConfig+0x26c>)
 80055a2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80055a6:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	685b      	ldr	r3, [r3, #4]
 80055ac:	2b00      	cmp	r3, #0
 80055ae:	d013      	beq.n	80055d8 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80055b0:	f7fd fc92 	bl	8002ed8 <HAL_GetTick>
 80055b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80055b6:	e008      	b.n	80055ca <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80055b8:	f7fd fc8e 	bl	8002ed8 <HAL_GetTick>
 80055bc:	4602      	mov	r2, r0
 80055be:	693b      	ldr	r3, [r7, #16]
 80055c0:	1ad3      	subs	r3, r2, r3
 80055c2:	2b64      	cmp	r3, #100	; 0x64
 80055c4:	d901      	bls.n	80055ca <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80055c6:	2303      	movs	r3, #3
 80055c8:	e200      	b.n	80059cc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80055ca:	4b5d      	ldr	r3, [pc, #372]	; (8005740 <HAL_RCC_OscConfig+0x26c>)
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80055d2:	2b00      	cmp	r3, #0
 80055d4:	d0f0      	beq.n	80055b8 <HAL_RCC_OscConfig+0xe4>
 80055d6:	e014      	b.n	8005602 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80055d8:	f7fd fc7e 	bl	8002ed8 <HAL_GetTick>
 80055dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80055de:	e008      	b.n	80055f2 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80055e0:	f7fd fc7a 	bl	8002ed8 <HAL_GetTick>
 80055e4:	4602      	mov	r2, r0
 80055e6:	693b      	ldr	r3, [r7, #16]
 80055e8:	1ad3      	subs	r3, r2, r3
 80055ea:	2b64      	cmp	r3, #100	; 0x64
 80055ec:	d901      	bls.n	80055f2 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80055ee:	2303      	movs	r3, #3
 80055f0:	e1ec      	b.n	80059cc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80055f2:	4b53      	ldr	r3, [pc, #332]	; (8005740 <HAL_RCC_OscConfig+0x26c>)
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80055fa:	2b00      	cmp	r3, #0
 80055fc:	d1f0      	bne.n	80055e0 <HAL_RCC_OscConfig+0x10c>
 80055fe:	e000      	b.n	8005602 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005600:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	f003 0302 	and.w	r3, r3, #2
 800560a:	2b00      	cmp	r3, #0
 800560c:	d063      	beq.n	80056d6 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800560e:	4b4c      	ldr	r3, [pc, #304]	; (8005740 <HAL_RCC_OscConfig+0x26c>)
 8005610:	685b      	ldr	r3, [r3, #4]
 8005612:	f003 030c 	and.w	r3, r3, #12
 8005616:	2b00      	cmp	r3, #0
 8005618:	d00b      	beq.n	8005632 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800561a:	4b49      	ldr	r3, [pc, #292]	; (8005740 <HAL_RCC_OscConfig+0x26c>)
 800561c:	685b      	ldr	r3, [r3, #4]
 800561e:	f003 030c 	and.w	r3, r3, #12
 8005622:	2b08      	cmp	r3, #8
 8005624:	d11c      	bne.n	8005660 <HAL_RCC_OscConfig+0x18c>
 8005626:	4b46      	ldr	r3, [pc, #280]	; (8005740 <HAL_RCC_OscConfig+0x26c>)
 8005628:	685b      	ldr	r3, [r3, #4]
 800562a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800562e:	2b00      	cmp	r3, #0
 8005630:	d116      	bne.n	8005660 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005632:	4b43      	ldr	r3, [pc, #268]	; (8005740 <HAL_RCC_OscConfig+0x26c>)
 8005634:	681b      	ldr	r3, [r3, #0]
 8005636:	f003 0302 	and.w	r3, r3, #2
 800563a:	2b00      	cmp	r3, #0
 800563c:	d005      	beq.n	800564a <HAL_RCC_OscConfig+0x176>
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	691b      	ldr	r3, [r3, #16]
 8005642:	2b01      	cmp	r3, #1
 8005644:	d001      	beq.n	800564a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8005646:	2301      	movs	r3, #1
 8005648:	e1c0      	b.n	80059cc <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800564a:	4b3d      	ldr	r3, [pc, #244]	; (8005740 <HAL_RCC_OscConfig+0x26c>)
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	695b      	ldr	r3, [r3, #20]
 8005656:	00db      	lsls	r3, r3, #3
 8005658:	4939      	ldr	r1, [pc, #228]	; (8005740 <HAL_RCC_OscConfig+0x26c>)
 800565a:	4313      	orrs	r3, r2
 800565c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800565e:	e03a      	b.n	80056d6 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	691b      	ldr	r3, [r3, #16]
 8005664:	2b00      	cmp	r3, #0
 8005666:	d020      	beq.n	80056aa <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005668:	4b36      	ldr	r3, [pc, #216]	; (8005744 <HAL_RCC_OscConfig+0x270>)
 800566a:	2201      	movs	r2, #1
 800566c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800566e:	f7fd fc33 	bl	8002ed8 <HAL_GetTick>
 8005672:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005674:	e008      	b.n	8005688 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005676:	f7fd fc2f 	bl	8002ed8 <HAL_GetTick>
 800567a:	4602      	mov	r2, r0
 800567c:	693b      	ldr	r3, [r7, #16]
 800567e:	1ad3      	subs	r3, r2, r3
 8005680:	2b02      	cmp	r3, #2
 8005682:	d901      	bls.n	8005688 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8005684:	2303      	movs	r3, #3
 8005686:	e1a1      	b.n	80059cc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005688:	4b2d      	ldr	r3, [pc, #180]	; (8005740 <HAL_RCC_OscConfig+0x26c>)
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	f003 0302 	and.w	r3, r3, #2
 8005690:	2b00      	cmp	r3, #0
 8005692:	d0f0      	beq.n	8005676 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005694:	4b2a      	ldr	r3, [pc, #168]	; (8005740 <HAL_RCC_OscConfig+0x26c>)
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	695b      	ldr	r3, [r3, #20]
 80056a0:	00db      	lsls	r3, r3, #3
 80056a2:	4927      	ldr	r1, [pc, #156]	; (8005740 <HAL_RCC_OscConfig+0x26c>)
 80056a4:	4313      	orrs	r3, r2
 80056a6:	600b      	str	r3, [r1, #0]
 80056a8:	e015      	b.n	80056d6 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80056aa:	4b26      	ldr	r3, [pc, #152]	; (8005744 <HAL_RCC_OscConfig+0x270>)
 80056ac:	2200      	movs	r2, #0
 80056ae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80056b0:	f7fd fc12 	bl	8002ed8 <HAL_GetTick>
 80056b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80056b6:	e008      	b.n	80056ca <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80056b8:	f7fd fc0e 	bl	8002ed8 <HAL_GetTick>
 80056bc:	4602      	mov	r2, r0
 80056be:	693b      	ldr	r3, [r7, #16]
 80056c0:	1ad3      	subs	r3, r2, r3
 80056c2:	2b02      	cmp	r3, #2
 80056c4:	d901      	bls.n	80056ca <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80056c6:	2303      	movs	r3, #3
 80056c8:	e180      	b.n	80059cc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80056ca:	4b1d      	ldr	r3, [pc, #116]	; (8005740 <HAL_RCC_OscConfig+0x26c>)
 80056cc:	681b      	ldr	r3, [r3, #0]
 80056ce:	f003 0302 	and.w	r3, r3, #2
 80056d2:	2b00      	cmp	r3, #0
 80056d4:	d1f0      	bne.n	80056b8 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	f003 0308 	and.w	r3, r3, #8
 80056de:	2b00      	cmp	r3, #0
 80056e0:	d03a      	beq.n	8005758 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	699b      	ldr	r3, [r3, #24]
 80056e6:	2b00      	cmp	r3, #0
 80056e8:	d019      	beq.n	800571e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80056ea:	4b17      	ldr	r3, [pc, #92]	; (8005748 <HAL_RCC_OscConfig+0x274>)
 80056ec:	2201      	movs	r2, #1
 80056ee:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80056f0:	f7fd fbf2 	bl	8002ed8 <HAL_GetTick>
 80056f4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80056f6:	e008      	b.n	800570a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80056f8:	f7fd fbee 	bl	8002ed8 <HAL_GetTick>
 80056fc:	4602      	mov	r2, r0
 80056fe:	693b      	ldr	r3, [r7, #16]
 8005700:	1ad3      	subs	r3, r2, r3
 8005702:	2b02      	cmp	r3, #2
 8005704:	d901      	bls.n	800570a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8005706:	2303      	movs	r3, #3
 8005708:	e160      	b.n	80059cc <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800570a:	4b0d      	ldr	r3, [pc, #52]	; (8005740 <HAL_RCC_OscConfig+0x26c>)
 800570c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800570e:	f003 0302 	and.w	r3, r3, #2
 8005712:	2b00      	cmp	r3, #0
 8005714:	d0f0      	beq.n	80056f8 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8005716:	2001      	movs	r0, #1
 8005718:	f000 fad8 	bl	8005ccc <RCC_Delay>
 800571c:	e01c      	b.n	8005758 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800571e:	4b0a      	ldr	r3, [pc, #40]	; (8005748 <HAL_RCC_OscConfig+0x274>)
 8005720:	2200      	movs	r2, #0
 8005722:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005724:	f7fd fbd8 	bl	8002ed8 <HAL_GetTick>
 8005728:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800572a:	e00f      	b.n	800574c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800572c:	f7fd fbd4 	bl	8002ed8 <HAL_GetTick>
 8005730:	4602      	mov	r2, r0
 8005732:	693b      	ldr	r3, [r7, #16]
 8005734:	1ad3      	subs	r3, r2, r3
 8005736:	2b02      	cmp	r3, #2
 8005738:	d908      	bls.n	800574c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800573a:	2303      	movs	r3, #3
 800573c:	e146      	b.n	80059cc <HAL_RCC_OscConfig+0x4f8>
 800573e:	bf00      	nop
 8005740:	40021000 	.word	0x40021000
 8005744:	42420000 	.word	0x42420000
 8005748:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800574c:	4b92      	ldr	r3, [pc, #584]	; (8005998 <HAL_RCC_OscConfig+0x4c4>)
 800574e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005750:	f003 0302 	and.w	r3, r3, #2
 8005754:	2b00      	cmp	r3, #0
 8005756:	d1e9      	bne.n	800572c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	f003 0304 	and.w	r3, r3, #4
 8005760:	2b00      	cmp	r3, #0
 8005762:	f000 80a6 	beq.w	80058b2 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005766:	2300      	movs	r3, #0
 8005768:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800576a:	4b8b      	ldr	r3, [pc, #556]	; (8005998 <HAL_RCC_OscConfig+0x4c4>)
 800576c:	69db      	ldr	r3, [r3, #28]
 800576e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005772:	2b00      	cmp	r3, #0
 8005774:	d10d      	bne.n	8005792 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005776:	4b88      	ldr	r3, [pc, #544]	; (8005998 <HAL_RCC_OscConfig+0x4c4>)
 8005778:	69db      	ldr	r3, [r3, #28]
 800577a:	4a87      	ldr	r2, [pc, #540]	; (8005998 <HAL_RCC_OscConfig+0x4c4>)
 800577c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005780:	61d3      	str	r3, [r2, #28]
 8005782:	4b85      	ldr	r3, [pc, #532]	; (8005998 <HAL_RCC_OscConfig+0x4c4>)
 8005784:	69db      	ldr	r3, [r3, #28]
 8005786:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800578a:	60bb      	str	r3, [r7, #8]
 800578c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800578e:	2301      	movs	r3, #1
 8005790:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005792:	4b82      	ldr	r3, [pc, #520]	; (800599c <HAL_RCC_OscConfig+0x4c8>)
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800579a:	2b00      	cmp	r3, #0
 800579c:	d118      	bne.n	80057d0 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800579e:	4b7f      	ldr	r3, [pc, #508]	; (800599c <HAL_RCC_OscConfig+0x4c8>)
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	4a7e      	ldr	r2, [pc, #504]	; (800599c <HAL_RCC_OscConfig+0x4c8>)
 80057a4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80057a8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80057aa:	f7fd fb95 	bl	8002ed8 <HAL_GetTick>
 80057ae:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80057b0:	e008      	b.n	80057c4 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80057b2:	f7fd fb91 	bl	8002ed8 <HAL_GetTick>
 80057b6:	4602      	mov	r2, r0
 80057b8:	693b      	ldr	r3, [r7, #16]
 80057ba:	1ad3      	subs	r3, r2, r3
 80057bc:	2b64      	cmp	r3, #100	; 0x64
 80057be:	d901      	bls.n	80057c4 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80057c0:	2303      	movs	r3, #3
 80057c2:	e103      	b.n	80059cc <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80057c4:	4b75      	ldr	r3, [pc, #468]	; (800599c <HAL_RCC_OscConfig+0x4c8>)
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80057cc:	2b00      	cmp	r3, #0
 80057ce:	d0f0      	beq.n	80057b2 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	68db      	ldr	r3, [r3, #12]
 80057d4:	2b01      	cmp	r3, #1
 80057d6:	d106      	bne.n	80057e6 <HAL_RCC_OscConfig+0x312>
 80057d8:	4b6f      	ldr	r3, [pc, #444]	; (8005998 <HAL_RCC_OscConfig+0x4c4>)
 80057da:	6a1b      	ldr	r3, [r3, #32]
 80057dc:	4a6e      	ldr	r2, [pc, #440]	; (8005998 <HAL_RCC_OscConfig+0x4c4>)
 80057de:	f043 0301 	orr.w	r3, r3, #1
 80057e2:	6213      	str	r3, [r2, #32]
 80057e4:	e02d      	b.n	8005842 <HAL_RCC_OscConfig+0x36e>
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	68db      	ldr	r3, [r3, #12]
 80057ea:	2b00      	cmp	r3, #0
 80057ec:	d10c      	bne.n	8005808 <HAL_RCC_OscConfig+0x334>
 80057ee:	4b6a      	ldr	r3, [pc, #424]	; (8005998 <HAL_RCC_OscConfig+0x4c4>)
 80057f0:	6a1b      	ldr	r3, [r3, #32]
 80057f2:	4a69      	ldr	r2, [pc, #420]	; (8005998 <HAL_RCC_OscConfig+0x4c4>)
 80057f4:	f023 0301 	bic.w	r3, r3, #1
 80057f8:	6213      	str	r3, [r2, #32]
 80057fa:	4b67      	ldr	r3, [pc, #412]	; (8005998 <HAL_RCC_OscConfig+0x4c4>)
 80057fc:	6a1b      	ldr	r3, [r3, #32]
 80057fe:	4a66      	ldr	r2, [pc, #408]	; (8005998 <HAL_RCC_OscConfig+0x4c4>)
 8005800:	f023 0304 	bic.w	r3, r3, #4
 8005804:	6213      	str	r3, [r2, #32]
 8005806:	e01c      	b.n	8005842 <HAL_RCC_OscConfig+0x36e>
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	68db      	ldr	r3, [r3, #12]
 800580c:	2b05      	cmp	r3, #5
 800580e:	d10c      	bne.n	800582a <HAL_RCC_OscConfig+0x356>
 8005810:	4b61      	ldr	r3, [pc, #388]	; (8005998 <HAL_RCC_OscConfig+0x4c4>)
 8005812:	6a1b      	ldr	r3, [r3, #32]
 8005814:	4a60      	ldr	r2, [pc, #384]	; (8005998 <HAL_RCC_OscConfig+0x4c4>)
 8005816:	f043 0304 	orr.w	r3, r3, #4
 800581a:	6213      	str	r3, [r2, #32]
 800581c:	4b5e      	ldr	r3, [pc, #376]	; (8005998 <HAL_RCC_OscConfig+0x4c4>)
 800581e:	6a1b      	ldr	r3, [r3, #32]
 8005820:	4a5d      	ldr	r2, [pc, #372]	; (8005998 <HAL_RCC_OscConfig+0x4c4>)
 8005822:	f043 0301 	orr.w	r3, r3, #1
 8005826:	6213      	str	r3, [r2, #32]
 8005828:	e00b      	b.n	8005842 <HAL_RCC_OscConfig+0x36e>
 800582a:	4b5b      	ldr	r3, [pc, #364]	; (8005998 <HAL_RCC_OscConfig+0x4c4>)
 800582c:	6a1b      	ldr	r3, [r3, #32]
 800582e:	4a5a      	ldr	r2, [pc, #360]	; (8005998 <HAL_RCC_OscConfig+0x4c4>)
 8005830:	f023 0301 	bic.w	r3, r3, #1
 8005834:	6213      	str	r3, [r2, #32]
 8005836:	4b58      	ldr	r3, [pc, #352]	; (8005998 <HAL_RCC_OscConfig+0x4c4>)
 8005838:	6a1b      	ldr	r3, [r3, #32]
 800583a:	4a57      	ldr	r2, [pc, #348]	; (8005998 <HAL_RCC_OscConfig+0x4c4>)
 800583c:	f023 0304 	bic.w	r3, r3, #4
 8005840:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	68db      	ldr	r3, [r3, #12]
 8005846:	2b00      	cmp	r3, #0
 8005848:	d015      	beq.n	8005876 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800584a:	f7fd fb45 	bl	8002ed8 <HAL_GetTick>
 800584e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005850:	e00a      	b.n	8005868 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005852:	f7fd fb41 	bl	8002ed8 <HAL_GetTick>
 8005856:	4602      	mov	r2, r0
 8005858:	693b      	ldr	r3, [r7, #16]
 800585a:	1ad3      	subs	r3, r2, r3
 800585c:	f241 3288 	movw	r2, #5000	; 0x1388
 8005860:	4293      	cmp	r3, r2
 8005862:	d901      	bls.n	8005868 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8005864:	2303      	movs	r3, #3
 8005866:	e0b1      	b.n	80059cc <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005868:	4b4b      	ldr	r3, [pc, #300]	; (8005998 <HAL_RCC_OscConfig+0x4c4>)
 800586a:	6a1b      	ldr	r3, [r3, #32]
 800586c:	f003 0302 	and.w	r3, r3, #2
 8005870:	2b00      	cmp	r3, #0
 8005872:	d0ee      	beq.n	8005852 <HAL_RCC_OscConfig+0x37e>
 8005874:	e014      	b.n	80058a0 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005876:	f7fd fb2f 	bl	8002ed8 <HAL_GetTick>
 800587a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800587c:	e00a      	b.n	8005894 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800587e:	f7fd fb2b 	bl	8002ed8 <HAL_GetTick>
 8005882:	4602      	mov	r2, r0
 8005884:	693b      	ldr	r3, [r7, #16]
 8005886:	1ad3      	subs	r3, r2, r3
 8005888:	f241 3288 	movw	r2, #5000	; 0x1388
 800588c:	4293      	cmp	r3, r2
 800588e:	d901      	bls.n	8005894 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8005890:	2303      	movs	r3, #3
 8005892:	e09b      	b.n	80059cc <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005894:	4b40      	ldr	r3, [pc, #256]	; (8005998 <HAL_RCC_OscConfig+0x4c4>)
 8005896:	6a1b      	ldr	r3, [r3, #32]
 8005898:	f003 0302 	and.w	r3, r3, #2
 800589c:	2b00      	cmp	r3, #0
 800589e:	d1ee      	bne.n	800587e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80058a0:	7dfb      	ldrb	r3, [r7, #23]
 80058a2:	2b01      	cmp	r3, #1
 80058a4:	d105      	bne.n	80058b2 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80058a6:	4b3c      	ldr	r3, [pc, #240]	; (8005998 <HAL_RCC_OscConfig+0x4c4>)
 80058a8:	69db      	ldr	r3, [r3, #28]
 80058aa:	4a3b      	ldr	r2, [pc, #236]	; (8005998 <HAL_RCC_OscConfig+0x4c4>)
 80058ac:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80058b0:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	69db      	ldr	r3, [r3, #28]
 80058b6:	2b00      	cmp	r3, #0
 80058b8:	f000 8087 	beq.w	80059ca <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80058bc:	4b36      	ldr	r3, [pc, #216]	; (8005998 <HAL_RCC_OscConfig+0x4c4>)
 80058be:	685b      	ldr	r3, [r3, #4]
 80058c0:	f003 030c 	and.w	r3, r3, #12
 80058c4:	2b08      	cmp	r3, #8
 80058c6:	d061      	beq.n	800598c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	69db      	ldr	r3, [r3, #28]
 80058cc:	2b02      	cmp	r3, #2
 80058ce:	d146      	bne.n	800595e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80058d0:	4b33      	ldr	r3, [pc, #204]	; (80059a0 <HAL_RCC_OscConfig+0x4cc>)
 80058d2:	2200      	movs	r2, #0
 80058d4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80058d6:	f7fd faff 	bl	8002ed8 <HAL_GetTick>
 80058da:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80058dc:	e008      	b.n	80058f0 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80058de:	f7fd fafb 	bl	8002ed8 <HAL_GetTick>
 80058e2:	4602      	mov	r2, r0
 80058e4:	693b      	ldr	r3, [r7, #16]
 80058e6:	1ad3      	subs	r3, r2, r3
 80058e8:	2b02      	cmp	r3, #2
 80058ea:	d901      	bls.n	80058f0 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80058ec:	2303      	movs	r3, #3
 80058ee:	e06d      	b.n	80059cc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80058f0:	4b29      	ldr	r3, [pc, #164]	; (8005998 <HAL_RCC_OscConfig+0x4c4>)
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80058f8:	2b00      	cmp	r3, #0
 80058fa:	d1f0      	bne.n	80058de <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	6a1b      	ldr	r3, [r3, #32]
 8005900:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005904:	d108      	bne.n	8005918 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8005906:	4b24      	ldr	r3, [pc, #144]	; (8005998 <HAL_RCC_OscConfig+0x4c4>)
 8005908:	685b      	ldr	r3, [r3, #4]
 800590a:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	689b      	ldr	r3, [r3, #8]
 8005912:	4921      	ldr	r1, [pc, #132]	; (8005998 <HAL_RCC_OscConfig+0x4c4>)
 8005914:	4313      	orrs	r3, r2
 8005916:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005918:	4b1f      	ldr	r3, [pc, #124]	; (8005998 <HAL_RCC_OscConfig+0x4c4>)
 800591a:	685b      	ldr	r3, [r3, #4]
 800591c:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	6a19      	ldr	r1, [r3, #32]
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005928:	430b      	orrs	r3, r1
 800592a:	491b      	ldr	r1, [pc, #108]	; (8005998 <HAL_RCC_OscConfig+0x4c4>)
 800592c:	4313      	orrs	r3, r2
 800592e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005930:	4b1b      	ldr	r3, [pc, #108]	; (80059a0 <HAL_RCC_OscConfig+0x4cc>)
 8005932:	2201      	movs	r2, #1
 8005934:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005936:	f7fd facf 	bl	8002ed8 <HAL_GetTick>
 800593a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800593c:	e008      	b.n	8005950 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800593e:	f7fd facb 	bl	8002ed8 <HAL_GetTick>
 8005942:	4602      	mov	r2, r0
 8005944:	693b      	ldr	r3, [r7, #16]
 8005946:	1ad3      	subs	r3, r2, r3
 8005948:	2b02      	cmp	r3, #2
 800594a:	d901      	bls.n	8005950 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 800594c:	2303      	movs	r3, #3
 800594e:	e03d      	b.n	80059cc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8005950:	4b11      	ldr	r3, [pc, #68]	; (8005998 <HAL_RCC_OscConfig+0x4c4>)
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005958:	2b00      	cmp	r3, #0
 800595a:	d0f0      	beq.n	800593e <HAL_RCC_OscConfig+0x46a>
 800595c:	e035      	b.n	80059ca <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800595e:	4b10      	ldr	r3, [pc, #64]	; (80059a0 <HAL_RCC_OscConfig+0x4cc>)
 8005960:	2200      	movs	r2, #0
 8005962:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005964:	f7fd fab8 	bl	8002ed8 <HAL_GetTick>
 8005968:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800596a:	e008      	b.n	800597e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800596c:	f7fd fab4 	bl	8002ed8 <HAL_GetTick>
 8005970:	4602      	mov	r2, r0
 8005972:	693b      	ldr	r3, [r7, #16]
 8005974:	1ad3      	subs	r3, r2, r3
 8005976:	2b02      	cmp	r3, #2
 8005978:	d901      	bls.n	800597e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800597a:	2303      	movs	r3, #3
 800597c:	e026      	b.n	80059cc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800597e:	4b06      	ldr	r3, [pc, #24]	; (8005998 <HAL_RCC_OscConfig+0x4c4>)
 8005980:	681b      	ldr	r3, [r3, #0]
 8005982:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005986:	2b00      	cmp	r3, #0
 8005988:	d1f0      	bne.n	800596c <HAL_RCC_OscConfig+0x498>
 800598a:	e01e      	b.n	80059ca <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	69db      	ldr	r3, [r3, #28]
 8005990:	2b01      	cmp	r3, #1
 8005992:	d107      	bne.n	80059a4 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8005994:	2301      	movs	r3, #1
 8005996:	e019      	b.n	80059cc <HAL_RCC_OscConfig+0x4f8>
 8005998:	40021000 	.word	0x40021000
 800599c:	40007000 	.word	0x40007000
 80059a0:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80059a4:	4b0b      	ldr	r3, [pc, #44]	; (80059d4 <HAL_RCC_OscConfig+0x500>)
 80059a6:	685b      	ldr	r3, [r3, #4]
 80059a8:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80059aa:	68fb      	ldr	r3, [r7, #12]
 80059ac:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	6a1b      	ldr	r3, [r3, #32]
 80059b4:	429a      	cmp	r2, r3
 80059b6:	d106      	bne.n	80059c6 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80059b8:	68fb      	ldr	r3, [r7, #12]
 80059ba:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80059c2:	429a      	cmp	r2, r3
 80059c4:	d001      	beq.n	80059ca <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80059c6:	2301      	movs	r3, #1
 80059c8:	e000      	b.n	80059cc <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80059ca:	2300      	movs	r3, #0
}
 80059cc:	4618      	mov	r0, r3
 80059ce:	3718      	adds	r7, #24
 80059d0:	46bd      	mov	sp, r7
 80059d2:	bd80      	pop	{r7, pc}
 80059d4:	40021000 	.word	0x40021000

080059d8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80059d8:	b580      	push	{r7, lr}
 80059da:	b084      	sub	sp, #16
 80059dc:	af00      	add	r7, sp, #0
 80059de:	6078      	str	r0, [r7, #4]
 80059e0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	2b00      	cmp	r3, #0
 80059e6:	d101      	bne.n	80059ec <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80059e8:	2301      	movs	r3, #1
 80059ea:	e0d0      	b.n	8005b8e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80059ec:	4b6a      	ldr	r3, [pc, #424]	; (8005b98 <HAL_RCC_ClockConfig+0x1c0>)
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	f003 0307 	and.w	r3, r3, #7
 80059f4:	683a      	ldr	r2, [r7, #0]
 80059f6:	429a      	cmp	r2, r3
 80059f8:	d910      	bls.n	8005a1c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80059fa:	4b67      	ldr	r3, [pc, #412]	; (8005b98 <HAL_RCC_ClockConfig+0x1c0>)
 80059fc:	681b      	ldr	r3, [r3, #0]
 80059fe:	f023 0207 	bic.w	r2, r3, #7
 8005a02:	4965      	ldr	r1, [pc, #404]	; (8005b98 <HAL_RCC_ClockConfig+0x1c0>)
 8005a04:	683b      	ldr	r3, [r7, #0]
 8005a06:	4313      	orrs	r3, r2
 8005a08:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005a0a:	4b63      	ldr	r3, [pc, #396]	; (8005b98 <HAL_RCC_ClockConfig+0x1c0>)
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	f003 0307 	and.w	r3, r3, #7
 8005a12:	683a      	ldr	r2, [r7, #0]
 8005a14:	429a      	cmp	r2, r3
 8005a16:	d001      	beq.n	8005a1c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8005a18:	2301      	movs	r3, #1
 8005a1a:	e0b8      	b.n	8005b8e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	f003 0302 	and.w	r3, r3, #2
 8005a24:	2b00      	cmp	r3, #0
 8005a26:	d020      	beq.n	8005a6a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	681b      	ldr	r3, [r3, #0]
 8005a2c:	f003 0304 	and.w	r3, r3, #4
 8005a30:	2b00      	cmp	r3, #0
 8005a32:	d005      	beq.n	8005a40 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005a34:	4b59      	ldr	r3, [pc, #356]	; (8005b9c <HAL_RCC_ClockConfig+0x1c4>)
 8005a36:	685b      	ldr	r3, [r3, #4]
 8005a38:	4a58      	ldr	r2, [pc, #352]	; (8005b9c <HAL_RCC_ClockConfig+0x1c4>)
 8005a3a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8005a3e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	681b      	ldr	r3, [r3, #0]
 8005a44:	f003 0308 	and.w	r3, r3, #8
 8005a48:	2b00      	cmp	r3, #0
 8005a4a:	d005      	beq.n	8005a58 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005a4c:	4b53      	ldr	r3, [pc, #332]	; (8005b9c <HAL_RCC_ClockConfig+0x1c4>)
 8005a4e:	685b      	ldr	r3, [r3, #4]
 8005a50:	4a52      	ldr	r2, [pc, #328]	; (8005b9c <HAL_RCC_ClockConfig+0x1c4>)
 8005a52:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8005a56:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005a58:	4b50      	ldr	r3, [pc, #320]	; (8005b9c <HAL_RCC_ClockConfig+0x1c4>)
 8005a5a:	685b      	ldr	r3, [r3, #4]
 8005a5c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	689b      	ldr	r3, [r3, #8]
 8005a64:	494d      	ldr	r1, [pc, #308]	; (8005b9c <HAL_RCC_ClockConfig+0x1c4>)
 8005a66:	4313      	orrs	r3, r2
 8005a68:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	681b      	ldr	r3, [r3, #0]
 8005a6e:	f003 0301 	and.w	r3, r3, #1
 8005a72:	2b00      	cmp	r3, #0
 8005a74:	d040      	beq.n	8005af8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	685b      	ldr	r3, [r3, #4]
 8005a7a:	2b01      	cmp	r3, #1
 8005a7c:	d107      	bne.n	8005a8e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005a7e:	4b47      	ldr	r3, [pc, #284]	; (8005b9c <HAL_RCC_ClockConfig+0x1c4>)
 8005a80:	681b      	ldr	r3, [r3, #0]
 8005a82:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005a86:	2b00      	cmp	r3, #0
 8005a88:	d115      	bne.n	8005ab6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005a8a:	2301      	movs	r3, #1
 8005a8c:	e07f      	b.n	8005b8e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	685b      	ldr	r3, [r3, #4]
 8005a92:	2b02      	cmp	r3, #2
 8005a94:	d107      	bne.n	8005aa6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005a96:	4b41      	ldr	r3, [pc, #260]	; (8005b9c <HAL_RCC_ClockConfig+0x1c4>)
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005a9e:	2b00      	cmp	r3, #0
 8005aa0:	d109      	bne.n	8005ab6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005aa2:	2301      	movs	r3, #1
 8005aa4:	e073      	b.n	8005b8e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005aa6:	4b3d      	ldr	r3, [pc, #244]	; (8005b9c <HAL_RCC_ClockConfig+0x1c4>)
 8005aa8:	681b      	ldr	r3, [r3, #0]
 8005aaa:	f003 0302 	and.w	r3, r3, #2
 8005aae:	2b00      	cmp	r3, #0
 8005ab0:	d101      	bne.n	8005ab6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005ab2:	2301      	movs	r3, #1
 8005ab4:	e06b      	b.n	8005b8e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005ab6:	4b39      	ldr	r3, [pc, #228]	; (8005b9c <HAL_RCC_ClockConfig+0x1c4>)
 8005ab8:	685b      	ldr	r3, [r3, #4]
 8005aba:	f023 0203 	bic.w	r2, r3, #3
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	685b      	ldr	r3, [r3, #4]
 8005ac2:	4936      	ldr	r1, [pc, #216]	; (8005b9c <HAL_RCC_ClockConfig+0x1c4>)
 8005ac4:	4313      	orrs	r3, r2
 8005ac6:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005ac8:	f7fd fa06 	bl	8002ed8 <HAL_GetTick>
 8005acc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005ace:	e00a      	b.n	8005ae6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005ad0:	f7fd fa02 	bl	8002ed8 <HAL_GetTick>
 8005ad4:	4602      	mov	r2, r0
 8005ad6:	68fb      	ldr	r3, [r7, #12]
 8005ad8:	1ad3      	subs	r3, r2, r3
 8005ada:	f241 3288 	movw	r2, #5000	; 0x1388
 8005ade:	4293      	cmp	r3, r2
 8005ae0:	d901      	bls.n	8005ae6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005ae2:	2303      	movs	r3, #3
 8005ae4:	e053      	b.n	8005b8e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005ae6:	4b2d      	ldr	r3, [pc, #180]	; (8005b9c <HAL_RCC_ClockConfig+0x1c4>)
 8005ae8:	685b      	ldr	r3, [r3, #4]
 8005aea:	f003 020c 	and.w	r2, r3, #12
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	685b      	ldr	r3, [r3, #4]
 8005af2:	009b      	lsls	r3, r3, #2
 8005af4:	429a      	cmp	r2, r3
 8005af6:	d1eb      	bne.n	8005ad0 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005af8:	4b27      	ldr	r3, [pc, #156]	; (8005b98 <HAL_RCC_ClockConfig+0x1c0>)
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	f003 0307 	and.w	r3, r3, #7
 8005b00:	683a      	ldr	r2, [r7, #0]
 8005b02:	429a      	cmp	r2, r3
 8005b04:	d210      	bcs.n	8005b28 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005b06:	4b24      	ldr	r3, [pc, #144]	; (8005b98 <HAL_RCC_ClockConfig+0x1c0>)
 8005b08:	681b      	ldr	r3, [r3, #0]
 8005b0a:	f023 0207 	bic.w	r2, r3, #7
 8005b0e:	4922      	ldr	r1, [pc, #136]	; (8005b98 <HAL_RCC_ClockConfig+0x1c0>)
 8005b10:	683b      	ldr	r3, [r7, #0]
 8005b12:	4313      	orrs	r3, r2
 8005b14:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005b16:	4b20      	ldr	r3, [pc, #128]	; (8005b98 <HAL_RCC_ClockConfig+0x1c0>)
 8005b18:	681b      	ldr	r3, [r3, #0]
 8005b1a:	f003 0307 	and.w	r3, r3, #7
 8005b1e:	683a      	ldr	r2, [r7, #0]
 8005b20:	429a      	cmp	r2, r3
 8005b22:	d001      	beq.n	8005b28 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8005b24:	2301      	movs	r3, #1
 8005b26:	e032      	b.n	8005b8e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	681b      	ldr	r3, [r3, #0]
 8005b2c:	f003 0304 	and.w	r3, r3, #4
 8005b30:	2b00      	cmp	r3, #0
 8005b32:	d008      	beq.n	8005b46 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005b34:	4b19      	ldr	r3, [pc, #100]	; (8005b9c <HAL_RCC_ClockConfig+0x1c4>)
 8005b36:	685b      	ldr	r3, [r3, #4]
 8005b38:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	68db      	ldr	r3, [r3, #12]
 8005b40:	4916      	ldr	r1, [pc, #88]	; (8005b9c <HAL_RCC_ClockConfig+0x1c4>)
 8005b42:	4313      	orrs	r3, r2
 8005b44:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	681b      	ldr	r3, [r3, #0]
 8005b4a:	f003 0308 	and.w	r3, r3, #8
 8005b4e:	2b00      	cmp	r3, #0
 8005b50:	d009      	beq.n	8005b66 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8005b52:	4b12      	ldr	r3, [pc, #72]	; (8005b9c <HAL_RCC_ClockConfig+0x1c4>)
 8005b54:	685b      	ldr	r3, [r3, #4]
 8005b56:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	691b      	ldr	r3, [r3, #16]
 8005b5e:	00db      	lsls	r3, r3, #3
 8005b60:	490e      	ldr	r1, [pc, #56]	; (8005b9c <HAL_RCC_ClockConfig+0x1c4>)
 8005b62:	4313      	orrs	r3, r2
 8005b64:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8005b66:	f000 f821 	bl	8005bac <HAL_RCC_GetSysClockFreq>
 8005b6a:	4602      	mov	r2, r0
 8005b6c:	4b0b      	ldr	r3, [pc, #44]	; (8005b9c <HAL_RCC_ClockConfig+0x1c4>)
 8005b6e:	685b      	ldr	r3, [r3, #4]
 8005b70:	091b      	lsrs	r3, r3, #4
 8005b72:	f003 030f 	and.w	r3, r3, #15
 8005b76:	490a      	ldr	r1, [pc, #40]	; (8005ba0 <HAL_RCC_ClockConfig+0x1c8>)
 8005b78:	5ccb      	ldrb	r3, [r1, r3]
 8005b7a:	fa22 f303 	lsr.w	r3, r2, r3
 8005b7e:	4a09      	ldr	r2, [pc, #36]	; (8005ba4 <HAL_RCC_ClockConfig+0x1cc>)
 8005b80:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8005b82:	4b09      	ldr	r3, [pc, #36]	; (8005ba8 <HAL_RCC_ClockConfig+0x1d0>)
 8005b84:	681b      	ldr	r3, [r3, #0]
 8005b86:	4618      	mov	r0, r3
 8005b88:	f7fd f964 	bl	8002e54 <HAL_InitTick>

  return HAL_OK;
 8005b8c:	2300      	movs	r3, #0
}
 8005b8e:	4618      	mov	r0, r3
 8005b90:	3710      	adds	r7, #16
 8005b92:	46bd      	mov	sp, r7
 8005b94:	bd80      	pop	{r7, pc}
 8005b96:	bf00      	nop
 8005b98:	40022000 	.word	0x40022000
 8005b9c:	40021000 	.word	0x40021000
 8005ba0:	0800b8f0 	.word	0x0800b8f0
 8005ba4:	20000004 	.word	0x20000004
 8005ba8:	20000008 	.word	0x20000008

08005bac <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005bac:	b490      	push	{r4, r7}
 8005bae:	b08a      	sub	sp, #40	; 0x28
 8005bb0:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8005bb2:	4b29      	ldr	r3, [pc, #164]	; (8005c58 <HAL_RCC_GetSysClockFreq+0xac>)
 8005bb4:	1d3c      	adds	r4, r7, #4
 8005bb6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8005bb8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8005bbc:	f240 2301 	movw	r3, #513	; 0x201
 8005bc0:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8005bc2:	2300      	movs	r3, #0
 8005bc4:	61fb      	str	r3, [r7, #28]
 8005bc6:	2300      	movs	r3, #0
 8005bc8:	61bb      	str	r3, [r7, #24]
 8005bca:	2300      	movs	r3, #0
 8005bcc:	627b      	str	r3, [r7, #36]	; 0x24
 8005bce:	2300      	movs	r3, #0
 8005bd0:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8005bd2:	2300      	movs	r3, #0
 8005bd4:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8005bd6:	4b21      	ldr	r3, [pc, #132]	; (8005c5c <HAL_RCC_GetSysClockFreq+0xb0>)
 8005bd8:	685b      	ldr	r3, [r3, #4]
 8005bda:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8005bdc:	69fb      	ldr	r3, [r7, #28]
 8005bde:	f003 030c 	and.w	r3, r3, #12
 8005be2:	2b04      	cmp	r3, #4
 8005be4:	d002      	beq.n	8005bec <HAL_RCC_GetSysClockFreq+0x40>
 8005be6:	2b08      	cmp	r3, #8
 8005be8:	d003      	beq.n	8005bf2 <HAL_RCC_GetSysClockFreq+0x46>
 8005bea:	e02b      	b.n	8005c44 <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8005bec:	4b1c      	ldr	r3, [pc, #112]	; (8005c60 <HAL_RCC_GetSysClockFreq+0xb4>)
 8005bee:	623b      	str	r3, [r7, #32]
      break;
 8005bf0:	e02b      	b.n	8005c4a <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8005bf2:	69fb      	ldr	r3, [r7, #28]
 8005bf4:	0c9b      	lsrs	r3, r3, #18
 8005bf6:	f003 030f 	and.w	r3, r3, #15
 8005bfa:	3328      	adds	r3, #40	; 0x28
 8005bfc:	443b      	add	r3, r7
 8005bfe:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8005c02:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8005c04:	69fb      	ldr	r3, [r7, #28]
 8005c06:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005c0a:	2b00      	cmp	r3, #0
 8005c0c:	d012      	beq.n	8005c34 <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8005c0e:	4b13      	ldr	r3, [pc, #76]	; (8005c5c <HAL_RCC_GetSysClockFreq+0xb0>)
 8005c10:	685b      	ldr	r3, [r3, #4]
 8005c12:	0c5b      	lsrs	r3, r3, #17
 8005c14:	f003 0301 	and.w	r3, r3, #1
 8005c18:	3328      	adds	r3, #40	; 0x28
 8005c1a:	443b      	add	r3, r7
 8005c1c:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8005c20:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8005c22:	697b      	ldr	r3, [r7, #20]
 8005c24:	4a0e      	ldr	r2, [pc, #56]	; (8005c60 <HAL_RCC_GetSysClockFreq+0xb4>)
 8005c26:	fb03 f202 	mul.w	r2, r3, r2
 8005c2a:	69bb      	ldr	r3, [r7, #24]
 8005c2c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005c30:	627b      	str	r3, [r7, #36]	; 0x24
 8005c32:	e004      	b.n	8005c3e <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8005c34:	697b      	ldr	r3, [r7, #20]
 8005c36:	4a0b      	ldr	r2, [pc, #44]	; (8005c64 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005c38:	fb02 f303 	mul.w	r3, r2, r3
 8005c3c:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8005c3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c40:	623b      	str	r3, [r7, #32]
      break;
 8005c42:	e002      	b.n	8005c4a <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8005c44:	4b06      	ldr	r3, [pc, #24]	; (8005c60 <HAL_RCC_GetSysClockFreq+0xb4>)
 8005c46:	623b      	str	r3, [r7, #32]
      break;
 8005c48:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005c4a:	6a3b      	ldr	r3, [r7, #32]
}
 8005c4c:	4618      	mov	r0, r3
 8005c4e:	3728      	adds	r7, #40	; 0x28
 8005c50:	46bd      	mov	sp, r7
 8005c52:	bc90      	pop	{r4, r7}
 8005c54:	4770      	bx	lr
 8005c56:	bf00      	nop
 8005c58:	0800b8e0 	.word	0x0800b8e0
 8005c5c:	40021000 	.word	0x40021000
 8005c60:	007a1200 	.word	0x007a1200
 8005c64:	003d0900 	.word	0x003d0900

08005c68 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005c68:	b480      	push	{r7}
 8005c6a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005c6c:	4b02      	ldr	r3, [pc, #8]	; (8005c78 <HAL_RCC_GetHCLKFreq+0x10>)
 8005c6e:	681b      	ldr	r3, [r3, #0]
}
 8005c70:	4618      	mov	r0, r3
 8005c72:	46bd      	mov	sp, r7
 8005c74:	bc80      	pop	{r7}
 8005c76:	4770      	bx	lr
 8005c78:	20000004 	.word	0x20000004

08005c7c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005c7c:	b580      	push	{r7, lr}
 8005c7e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8005c80:	f7ff fff2 	bl	8005c68 <HAL_RCC_GetHCLKFreq>
 8005c84:	4602      	mov	r2, r0
 8005c86:	4b05      	ldr	r3, [pc, #20]	; (8005c9c <HAL_RCC_GetPCLK1Freq+0x20>)
 8005c88:	685b      	ldr	r3, [r3, #4]
 8005c8a:	0a1b      	lsrs	r3, r3, #8
 8005c8c:	f003 0307 	and.w	r3, r3, #7
 8005c90:	4903      	ldr	r1, [pc, #12]	; (8005ca0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005c92:	5ccb      	ldrb	r3, [r1, r3]
 8005c94:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005c98:	4618      	mov	r0, r3
 8005c9a:	bd80      	pop	{r7, pc}
 8005c9c:	40021000 	.word	0x40021000
 8005ca0:	0800b900 	.word	0x0800b900

08005ca4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005ca4:	b580      	push	{r7, lr}
 8005ca6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8005ca8:	f7ff ffde 	bl	8005c68 <HAL_RCC_GetHCLKFreq>
 8005cac:	4602      	mov	r2, r0
 8005cae:	4b05      	ldr	r3, [pc, #20]	; (8005cc4 <HAL_RCC_GetPCLK2Freq+0x20>)
 8005cb0:	685b      	ldr	r3, [r3, #4]
 8005cb2:	0adb      	lsrs	r3, r3, #11
 8005cb4:	f003 0307 	and.w	r3, r3, #7
 8005cb8:	4903      	ldr	r1, [pc, #12]	; (8005cc8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005cba:	5ccb      	ldrb	r3, [r1, r3]
 8005cbc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005cc0:	4618      	mov	r0, r3
 8005cc2:	bd80      	pop	{r7, pc}
 8005cc4:	40021000 	.word	0x40021000
 8005cc8:	0800b900 	.word	0x0800b900

08005ccc <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8005ccc:	b480      	push	{r7}
 8005cce:	b085      	sub	sp, #20
 8005cd0:	af00      	add	r7, sp, #0
 8005cd2:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8005cd4:	4b0a      	ldr	r3, [pc, #40]	; (8005d00 <RCC_Delay+0x34>)
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	4a0a      	ldr	r2, [pc, #40]	; (8005d04 <RCC_Delay+0x38>)
 8005cda:	fba2 2303 	umull	r2, r3, r2, r3
 8005cde:	0a5b      	lsrs	r3, r3, #9
 8005ce0:	687a      	ldr	r2, [r7, #4]
 8005ce2:	fb02 f303 	mul.w	r3, r2, r3
 8005ce6:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8005ce8:	bf00      	nop
  }
  while (Delay --);
 8005cea:	68fb      	ldr	r3, [r7, #12]
 8005cec:	1e5a      	subs	r2, r3, #1
 8005cee:	60fa      	str	r2, [r7, #12]
 8005cf0:	2b00      	cmp	r3, #0
 8005cf2:	d1f9      	bne.n	8005ce8 <RCC_Delay+0x1c>
}
 8005cf4:	bf00      	nop
 8005cf6:	bf00      	nop
 8005cf8:	3714      	adds	r7, #20
 8005cfa:	46bd      	mov	sp, r7
 8005cfc:	bc80      	pop	{r7}
 8005cfe:	4770      	bx	lr
 8005d00:	20000004 	.word	0x20000004
 8005d04:	10624dd3 	.word	0x10624dd3

08005d08 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005d08:	b580      	push	{r7, lr}
 8005d0a:	b086      	sub	sp, #24
 8005d0c:	af00      	add	r7, sp, #0
 8005d0e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8005d10:	2300      	movs	r3, #0
 8005d12:	613b      	str	r3, [r7, #16]
 8005d14:	2300      	movs	r3, #0
 8005d16:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	681b      	ldr	r3, [r3, #0]
 8005d1c:	f003 0301 	and.w	r3, r3, #1
 8005d20:	2b00      	cmp	r3, #0
 8005d22:	d07d      	beq.n	8005e20 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8005d24:	2300      	movs	r3, #0
 8005d26:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005d28:	4b4f      	ldr	r3, [pc, #316]	; (8005e68 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005d2a:	69db      	ldr	r3, [r3, #28]
 8005d2c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005d30:	2b00      	cmp	r3, #0
 8005d32:	d10d      	bne.n	8005d50 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005d34:	4b4c      	ldr	r3, [pc, #304]	; (8005e68 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005d36:	69db      	ldr	r3, [r3, #28]
 8005d38:	4a4b      	ldr	r2, [pc, #300]	; (8005e68 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005d3a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005d3e:	61d3      	str	r3, [r2, #28]
 8005d40:	4b49      	ldr	r3, [pc, #292]	; (8005e68 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005d42:	69db      	ldr	r3, [r3, #28]
 8005d44:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005d48:	60bb      	str	r3, [r7, #8]
 8005d4a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005d4c:	2301      	movs	r3, #1
 8005d4e:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005d50:	4b46      	ldr	r3, [pc, #280]	; (8005e6c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005d58:	2b00      	cmp	r3, #0
 8005d5a:	d118      	bne.n	8005d8e <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005d5c:	4b43      	ldr	r3, [pc, #268]	; (8005e6c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005d5e:	681b      	ldr	r3, [r3, #0]
 8005d60:	4a42      	ldr	r2, [pc, #264]	; (8005e6c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005d62:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005d66:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005d68:	f7fd f8b6 	bl	8002ed8 <HAL_GetTick>
 8005d6c:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005d6e:	e008      	b.n	8005d82 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005d70:	f7fd f8b2 	bl	8002ed8 <HAL_GetTick>
 8005d74:	4602      	mov	r2, r0
 8005d76:	693b      	ldr	r3, [r7, #16]
 8005d78:	1ad3      	subs	r3, r2, r3
 8005d7a:	2b64      	cmp	r3, #100	; 0x64
 8005d7c:	d901      	bls.n	8005d82 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8005d7e:	2303      	movs	r3, #3
 8005d80:	e06d      	b.n	8005e5e <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005d82:	4b3a      	ldr	r3, [pc, #232]	; (8005e6c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005d84:	681b      	ldr	r3, [r3, #0]
 8005d86:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005d8a:	2b00      	cmp	r3, #0
 8005d8c:	d0f0      	beq.n	8005d70 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8005d8e:	4b36      	ldr	r3, [pc, #216]	; (8005e68 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005d90:	6a1b      	ldr	r3, [r3, #32]
 8005d92:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005d96:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8005d98:	68fb      	ldr	r3, [r7, #12]
 8005d9a:	2b00      	cmp	r3, #0
 8005d9c:	d02e      	beq.n	8005dfc <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	685b      	ldr	r3, [r3, #4]
 8005da2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005da6:	68fa      	ldr	r2, [r7, #12]
 8005da8:	429a      	cmp	r2, r3
 8005daa:	d027      	beq.n	8005dfc <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005dac:	4b2e      	ldr	r3, [pc, #184]	; (8005e68 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005dae:	6a1b      	ldr	r3, [r3, #32]
 8005db0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005db4:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8005db6:	4b2e      	ldr	r3, [pc, #184]	; (8005e70 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8005db8:	2201      	movs	r2, #1
 8005dba:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8005dbc:	4b2c      	ldr	r3, [pc, #176]	; (8005e70 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8005dbe:	2200      	movs	r2, #0
 8005dc0:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8005dc2:	4a29      	ldr	r2, [pc, #164]	; (8005e68 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005dc4:	68fb      	ldr	r3, [r7, #12]
 8005dc6:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8005dc8:	68fb      	ldr	r3, [r7, #12]
 8005dca:	f003 0301 	and.w	r3, r3, #1
 8005dce:	2b00      	cmp	r3, #0
 8005dd0:	d014      	beq.n	8005dfc <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005dd2:	f7fd f881 	bl	8002ed8 <HAL_GetTick>
 8005dd6:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005dd8:	e00a      	b.n	8005df0 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005dda:	f7fd f87d 	bl	8002ed8 <HAL_GetTick>
 8005dde:	4602      	mov	r2, r0
 8005de0:	693b      	ldr	r3, [r7, #16]
 8005de2:	1ad3      	subs	r3, r2, r3
 8005de4:	f241 3288 	movw	r2, #5000	; 0x1388
 8005de8:	4293      	cmp	r3, r2
 8005dea:	d901      	bls.n	8005df0 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8005dec:	2303      	movs	r3, #3
 8005dee:	e036      	b.n	8005e5e <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005df0:	4b1d      	ldr	r3, [pc, #116]	; (8005e68 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005df2:	6a1b      	ldr	r3, [r3, #32]
 8005df4:	f003 0302 	and.w	r3, r3, #2
 8005df8:	2b00      	cmp	r3, #0
 8005dfa:	d0ee      	beq.n	8005dda <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005dfc:	4b1a      	ldr	r3, [pc, #104]	; (8005e68 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005dfe:	6a1b      	ldr	r3, [r3, #32]
 8005e00:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	685b      	ldr	r3, [r3, #4]
 8005e08:	4917      	ldr	r1, [pc, #92]	; (8005e68 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005e0a:	4313      	orrs	r3, r2
 8005e0c:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8005e0e:	7dfb      	ldrb	r3, [r7, #23]
 8005e10:	2b01      	cmp	r3, #1
 8005e12:	d105      	bne.n	8005e20 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005e14:	4b14      	ldr	r3, [pc, #80]	; (8005e68 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005e16:	69db      	ldr	r3, [r3, #28]
 8005e18:	4a13      	ldr	r2, [pc, #76]	; (8005e68 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005e1a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005e1e:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	681b      	ldr	r3, [r3, #0]
 8005e24:	f003 0302 	and.w	r3, r3, #2
 8005e28:	2b00      	cmp	r3, #0
 8005e2a:	d008      	beq.n	8005e3e <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8005e2c:	4b0e      	ldr	r3, [pc, #56]	; (8005e68 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005e2e:	685b      	ldr	r3, [r3, #4]
 8005e30:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	689b      	ldr	r3, [r3, #8]
 8005e38:	490b      	ldr	r1, [pc, #44]	; (8005e68 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005e3a:	4313      	orrs	r3, r2
 8005e3c:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	681b      	ldr	r3, [r3, #0]
 8005e42:	f003 0310 	and.w	r3, r3, #16
 8005e46:	2b00      	cmp	r3, #0
 8005e48:	d008      	beq.n	8005e5c <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005e4a:	4b07      	ldr	r3, [pc, #28]	; (8005e68 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005e4c:	685b      	ldr	r3, [r3, #4]
 8005e4e:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	68db      	ldr	r3, [r3, #12]
 8005e56:	4904      	ldr	r1, [pc, #16]	; (8005e68 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005e58:	4313      	orrs	r3, r2
 8005e5a:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8005e5c:	2300      	movs	r3, #0
}
 8005e5e:	4618      	mov	r0, r3
 8005e60:	3718      	adds	r7, #24
 8005e62:	46bd      	mov	sp, r7
 8005e64:	bd80      	pop	{r7, pc}
 8005e66:	bf00      	nop
 8005e68:	40021000 	.word	0x40021000
 8005e6c:	40007000 	.word	0x40007000
 8005e70:	42420440 	.word	0x42420440

08005e74 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005e74:	b580      	push	{r7, lr}
 8005e76:	b082      	sub	sp, #8
 8005e78:	af00      	add	r7, sp, #0
 8005e7a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	2b00      	cmp	r3, #0
 8005e80:	d101      	bne.n	8005e86 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005e82:	2301      	movs	r3, #1
 8005e84:	e041      	b.n	8005f0a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005e8c:	b2db      	uxtb	r3, r3
 8005e8e:	2b00      	cmp	r3, #0
 8005e90:	d106      	bne.n	8005ea0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	2200      	movs	r2, #0
 8005e96:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005e9a:	6878      	ldr	r0, [r7, #4]
 8005e9c:	f7fc fdf4 	bl	8002a88 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	2202      	movs	r2, #2
 8005ea4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	681a      	ldr	r2, [r3, #0]
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	3304      	adds	r3, #4
 8005eb0:	4619      	mov	r1, r3
 8005eb2:	4610      	mov	r0, r2
 8005eb4:	f000 faba 	bl	800642c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	2201      	movs	r2, #1
 8005ebc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	2201      	movs	r2, #1
 8005ec4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	2201      	movs	r2, #1
 8005ecc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	2201      	movs	r2, #1
 8005ed4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	2201      	movs	r2, #1
 8005edc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	2201      	movs	r2, #1
 8005ee4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	2201      	movs	r2, #1
 8005eec:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	2201      	movs	r2, #1
 8005ef4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	2201      	movs	r2, #1
 8005efc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	2201      	movs	r2, #1
 8005f04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005f08:	2300      	movs	r3, #0
}
 8005f0a:	4618      	mov	r0, r3
 8005f0c:	3708      	adds	r7, #8
 8005f0e:	46bd      	mov	sp, r7
 8005f10:	bd80      	pop	{r7, pc}
	...

08005f14 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8005f14:	b480      	push	{r7}
 8005f16:	b085      	sub	sp, #20
 8005f18:	af00      	add	r7, sp, #0
 8005f1a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005f22:	b2db      	uxtb	r3, r3
 8005f24:	2b01      	cmp	r3, #1
 8005f26:	d001      	beq.n	8005f2c <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8005f28:	2301      	movs	r3, #1
 8005f2a:	e032      	b.n	8005f92 <HAL_TIM_Base_Start+0x7e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	2202      	movs	r2, #2
 8005f30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	681b      	ldr	r3, [r3, #0]
 8005f38:	4a18      	ldr	r2, [pc, #96]	; (8005f9c <HAL_TIM_Base_Start+0x88>)
 8005f3a:	4293      	cmp	r3, r2
 8005f3c:	d00e      	beq.n	8005f5c <HAL_TIM_Base_Start+0x48>
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	681b      	ldr	r3, [r3, #0]
 8005f42:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005f46:	d009      	beq.n	8005f5c <HAL_TIM_Base_Start+0x48>
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	681b      	ldr	r3, [r3, #0]
 8005f4c:	4a14      	ldr	r2, [pc, #80]	; (8005fa0 <HAL_TIM_Base_Start+0x8c>)
 8005f4e:	4293      	cmp	r3, r2
 8005f50:	d004      	beq.n	8005f5c <HAL_TIM_Base_Start+0x48>
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	681b      	ldr	r3, [r3, #0]
 8005f56:	4a13      	ldr	r2, [pc, #76]	; (8005fa4 <HAL_TIM_Base_Start+0x90>)
 8005f58:	4293      	cmp	r3, r2
 8005f5a:	d111      	bne.n	8005f80 <HAL_TIM_Base_Start+0x6c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	681b      	ldr	r3, [r3, #0]
 8005f60:	689b      	ldr	r3, [r3, #8]
 8005f62:	f003 0307 	and.w	r3, r3, #7
 8005f66:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005f68:	68fb      	ldr	r3, [r7, #12]
 8005f6a:	2b06      	cmp	r3, #6
 8005f6c:	d010      	beq.n	8005f90 <HAL_TIM_Base_Start+0x7c>
    {
      __HAL_TIM_ENABLE(htim);
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	681b      	ldr	r3, [r3, #0]
 8005f72:	681a      	ldr	r2, [r3, #0]
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	681b      	ldr	r3, [r3, #0]
 8005f78:	f042 0201 	orr.w	r2, r2, #1
 8005f7c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005f7e:	e007      	b.n	8005f90 <HAL_TIM_Base_Start+0x7c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	681b      	ldr	r3, [r3, #0]
 8005f84:	681a      	ldr	r2, [r3, #0]
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	681b      	ldr	r3, [r3, #0]
 8005f8a:	f042 0201 	orr.w	r2, r2, #1
 8005f8e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005f90:	2300      	movs	r3, #0
}
 8005f92:	4618      	mov	r0, r3
 8005f94:	3714      	adds	r7, #20
 8005f96:	46bd      	mov	sp, r7
 8005f98:	bc80      	pop	{r7}
 8005f9a:	4770      	bx	lr
 8005f9c:	40012c00 	.word	0x40012c00
 8005fa0:	40000400 	.word	0x40000400
 8005fa4:	40000800 	.word	0x40000800

08005fa8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005fa8:	b480      	push	{r7}
 8005faa:	b085      	sub	sp, #20
 8005fac:	af00      	add	r7, sp, #0
 8005fae:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005fb6:	b2db      	uxtb	r3, r3
 8005fb8:	2b01      	cmp	r3, #1
 8005fba:	d001      	beq.n	8005fc0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005fbc:	2301      	movs	r3, #1
 8005fbe:	e03a      	b.n	8006036 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	2202      	movs	r2, #2
 8005fc4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	681b      	ldr	r3, [r3, #0]
 8005fcc:	68da      	ldr	r2, [r3, #12]
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	681b      	ldr	r3, [r3, #0]
 8005fd2:	f042 0201 	orr.w	r2, r2, #1
 8005fd6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	681b      	ldr	r3, [r3, #0]
 8005fdc:	4a18      	ldr	r2, [pc, #96]	; (8006040 <HAL_TIM_Base_Start_IT+0x98>)
 8005fde:	4293      	cmp	r3, r2
 8005fe0:	d00e      	beq.n	8006000 <HAL_TIM_Base_Start_IT+0x58>
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	681b      	ldr	r3, [r3, #0]
 8005fe6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005fea:	d009      	beq.n	8006000 <HAL_TIM_Base_Start_IT+0x58>
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	681b      	ldr	r3, [r3, #0]
 8005ff0:	4a14      	ldr	r2, [pc, #80]	; (8006044 <HAL_TIM_Base_Start_IT+0x9c>)
 8005ff2:	4293      	cmp	r3, r2
 8005ff4:	d004      	beq.n	8006000 <HAL_TIM_Base_Start_IT+0x58>
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	681b      	ldr	r3, [r3, #0]
 8005ffa:	4a13      	ldr	r2, [pc, #76]	; (8006048 <HAL_TIM_Base_Start_IT+0xa0>)
 8005ffc:	4293      	cmp	r3, r2
 8005ffe:	d111      	bne.n	8006024 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	681b      	ldr	r3, [r3, #0]
 8006004:	689b      	ldr	r3, [r3, #8]
 8006006:	f003 0307 	and.w	r3, r3, #7
 800600a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800600c:	68fb      	ldr	r3, [r7, #12]
 800600e:	2b06      	cmp	r3, #6
 8006010:	d010      	beq.n	8006034 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	681b      	ldr	r3, [r3, #0]
 8006016:	681a      	ldr	r2, [r3, #0]
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	681b      	ldr	r3, [r3, #0]
 800601c:	f042 0201 	orr.w	r2, r2, #1
 8006020:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006022:	e007      	b.n	8006034 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	681b      	ldr	r3, [r3, #0]
 8006028:	681a      	ldr	r2, [r3, #0]
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	681b      	ldr	r3, [r3, #0]
 800602e:	f042 0201 	orr.w	r2, r2, #1
 8006032:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006034:	2300      	movs	r3, #0
}
 8006036:	4618      	mov	r0, r3
 8006038:	3714      	adds	r7, #20
 800603a:	46bd      	mov	sp, r7
 800603c:	bc80      	pop	{r7}
 800603e:	4770      	bx	lr
 8006040:	40012c00 	.word	0x40012c00
 8006044:	40000400 	.word	0x40000400
 8006048:	40000800 	.word	0x40000800

0800604c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800604c:	b580      	push	{r7, lr}
 800604e:	b082      	sub	sp, #8
 8006050:	af00      	add	r7, sp, #0
 8006052:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	681b      	ldr	r3, [r3, #0]
 8006058:	691b      	ldr	r3, [r3, #16]
 800605a:	f003 0302 	and.w	r3, r3, #2
 800605e:	2b02      	cmp	r3, #2
 8006060:	d122      	bne.n	80060a8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	681b      	ldr	r3, [r3, #0]
 8006066:	68db      	ldr	r3, [r3, #12]
 8006068:	f003 0302 	and.w	r3, r3, #2
 800606c:	2b02      	cmp	r3, #2
 800606e:	d11b      	bne.n	80060a8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	681b      	ldr	r3, [r3, #0]
 8006074:	f06f 0202 	mvn.w	r2, #2
 8006078:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	2201      	movs	r2, #1
 800607e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	681b      	ldr	r3, [r3, #0]
 8006084:	699b      	ldr	r3, [r3, #24]
 8006086:	f003 0303 	and.w	r3, r3, #3
 800608a:	2b00      	cmp	r3, #0
 800608c:	d003      	beq.n	8006096 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800608e:	6878      	ldr	r0, [r7, #4]
 8006090:	f000 f9b1 	bl	80063f6 <HAL_TIM_IC_CaptureCallback>
 8006094:	e005      	b.n	80060a2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006096:	6878      	ldr	r0, [r7, #4]
 8006098:	f000 f9a4 	bl	80063e4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800609c:	6878      	ldr	r0, [r7, #4]
 800609e:	f000 f9b3 	bl	8006408 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	2200      	movs	r2, #0
 80060a6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	681b      	ldr	r3, [r3, #0]
 80060ac:	691b      	ldr	r3, [r3, #16]
 80060ae:	f003 0304 	and.w	r3, r3, #4
 80060b2:	2b04      	cmp	r3, #4
 80060b4:	d122      	bne.n	80060fc <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	681b      	ldr	r3, [r3, #0]
 80060ba:	68db      	ldr	r3, [r3, #12]
 80060bc:	f003 0304 	and.w	r3, r3, #4
 80060c0:	2b04      	cmp	r3, #4
 80060c2:	d11b      	bne.n	80060fc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	681b      	ldr	r3, [r3, #0]
 80060c8:	f06f 0204 	mvn.w	r2, #4
 80060cc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	2202      	movs	r2, #2
 80060d2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	681b      	ldr	r3, [r3, #0]
 80060d8:	699b      	ldr	r3, [r3, #24]
 80060da:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80060de:	2b00      	cmp	r3, #0
 80060e0:	d003      	beq.n	80060ea <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80060e2:	6878      	ldr	r0, [r7, #4]
 80060e4:	f000 f987 	bl	80063f6 <HAL_TIM_IC_CaptureCallback>
 80060e8:	e005      	b.n	80060f6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80060ea:	6878      	ldr	r0, [r7, #4]
 80060ec:	f000 f97a 	bl	80063e4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80060f0:	6878      	ldr	r0, [r7, #4]
 80060f2:	f000 f989 	bl	8006408 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	2200      	movs	r2, #0
 80060fa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	681b      	ldr	r3, [r3, #0]
 8006100:	691b      	ldr	r3, [r3, #16]
 8006102:	f003 0308 	and.w	r3, r3, #8
 8006106:	2b08      	cmp	r3, #8
 8006108:	d122      	bne.n	8006150 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	681b      	ldr	r3, [r3, #0]
 800610e:	68db      	ldr	r3, [r3, #12]
 8006110:	f003 0308 	and.w	r3, r3, #8
 8006114:	2b08      	cmp	r3, #8
 8006116:	d11b      	bne.n	8006150 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	681b      	ldr	r3, [r3, #0]
 800611c:	f06f 0208 	mvn.w	r2, #8
 8006120:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	2204      	movs	r2, #4
 8006126:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	681b      	ldr	r3, [r3, #0]
 800612c:	69db      	ldr	r3, [r3, #28]
 800612e:	f003 0303 	and.w	r3, r3, #3
 8006132:	2b00      	cmp	r3, #0
 8006134:	d003      	beq.n	800613e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006136:	6878      	ldr	r0, [r7, #4]
 8006138:	f000 f95d 	bl	80063f6 <HAL_TIM_IC_CaptureCallback>
 800613c:	e005      	b.n	800614a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800613e:	6878      	ldr	r0, [r7, #4]
 8006140:	f000 f950 	bl	80063e4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006144:	6878      	ldr	r0, [r7, #4]
 8006146:	f000 f95f 	bl	8006408 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	2200      	movs	r2, #0
 800614e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	681b      	ldr	r3, [r3, #0]
 8006154:	691b      	ldr	r3, [r3, #16]
 8006156:	f003 0310 	and.w	r3, r3, #16
 800615a:	2b10      	cmp	r3, #16
 800615c:	d122      	bne.n	80061a4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	681b      	ldr	r3, [r3, #0]
 8006162:	68db      	ldr	r3, [r3, #12]
 8006164:	f003 0310 	and.w	r3, r3, #16
 8006168:	2b10      	cmp	r3, #16
 800616a:	d11b      	bne.n	80061a4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	681b      	ldr	r3, [r3, #0]
 8006170:	f06f 0210 	mvn.w	r2, #16
 8006174:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	2208      	movs	r2, #8
 800617a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	681b      	ldr	r3, [r3, #0]
 8006180:	69db      	ldr	r3, [r3, #28]
 8006182:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006186:	2b00      	cmp	r3, #0
 8006188:	d003      	beq.n	8006192 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800618a:	6878      	ldr	r0, [r7, #4]
 800618c:	f000 f933 	bl	80063f6 <HAL_TIM_IC_CaptureCallback>
 8006190:	e005      	b.n	800619e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006192:	6878      	ldr	r0, [r7, #4]
 8006194:	f000 f926 	bl	80063e4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006198:	6878      	ldr	r0, [r7, #4]
 800619a:	f000 f935 	bl	8006408 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	2200      	movs	r2, #0
 80061a2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	681b      	ldr	r3, [r3, #0]
 80061a8:	691b      	ldr	r3, [r3, #16]
 80061aa:	f003 0301 	and.w	r3, r3, #1
 80061ae:	2b01      	cmp	r3, #1
 80061b0:	d10e      	bne.n	80061d0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	681b      	ldr	r3, [r3, #0]
 80061b6:	68db      	ldr	r3, [r3, #12]
 80061b8:	f003 0301 	and.w	r3, r3, #1
 80061bc:	2b01      	cmp	r3, #1
 80061be:	d107      	bne.n	80061d0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	681b      	ldr	r3, [r3, #0]
 80061c4:	f06f 0201 	mvn.w	r2, #1
 80061c8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80061ca:	6878      	ldr	r0, [r7, #4]
 80061cc:	f7fc fb54 	bl	8002878 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	681b      	ldr	r3, [r3, #0]
 80061d4:	691b      	ldr	r3, [r3, #16]
 80061d6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80061da:	2b80      	cmp	r3, #128	; 0x80
 80061dc:	d10e      	bne.n	80061fc <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	681b      	ldr	r3, [r3, #0]
 80061e2:	68db      	ldr	r3, [r3, #12]
 80061e4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80061e8:	2b80      	cmp	r3, #128	; 0x80
 80061ea:	d107      	bne.n	80061fc <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	681b      	ldr	r3, [r3, #0]
 80061f0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80061f4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80061f6:	6878      	ldr	r0, [r7, #4]
 80061f8:	f000 fa77 	bl	80066ea <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	681b      	ldr	r3, [r3, #0]
 8006200:	691b      	ldr	r3, [r3, #16]
 8006202:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006206:	2b40      	cmp	r3, #64	; 0x40
 8006208:	d10e      	bne.n	8006228 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	681b      	ldr	r3, [r3, #0]
 800620e:	68db      	ldr	r3, [r3, #12]
 8006210:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006214:	2b40      	cmp	r3, #64	; 0x40
 8006216:	d107      	bne.n	8006228 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	681b      	ldr	r3, [r3, #0]
 800621c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006220:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006222:	6878      	ldr	r0, [r7, #4]
 8006224:	f000 f8f9 	bl	800641a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	681b      	ldr	r3, [r3, #0]
 800622c:	691b      	ldr	r3, [r3, #16]
 800622e:	f003 0320 	and.w	r3, r3, #32
 8006232:	2b20      	cmp	r3, #32
 8006234:	d10e      	bne.n	8006254 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	681b      	ldr	r3, [r3, #0]
 800623a:	68db      	ldr	r3, [r3, #12]
 800623c:	f003 0320 	and.w	r3, r3, #32
 8006240:	2b20      	cmp	r3, #32
 8006242:	d107      	bne.n	8006254 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	681b      	ldr	r3, [r3, #0]
 8006248:	f06f 0220 	mvn.w	r2, #32
 800624c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800624e:	6878      	ldr	r0, [r7, #4]
 8006250:	f000 fa42 	bl	80066d8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006254:	bf00      	nop
 8006256:	3708      	adds	r7, #8
 8006258:	46bd      	mov	sp, r7
 800625a:	bd80      	pop	{r7, pc}

0800625c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800625c:	b580      	push	{r7, lr}
 800625e:	b084      	sub	sp, #16
 8006260:	af00      	add	r7, sp, #0
 8006262:	6078      	str	r0, [r7, #4]
 8006264:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800626c:	2b01      	cmp	r3, #1
 800626e:	d101      	bne.n	8006274 <HAL_TIM_ConfigClockSource+0x18>
 8006270:	2302      	movs	r3, #2
 8006272:	e0b3      	b.n	80063dc <HAL_TIM_ConfigClockSource+0x180>
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	2201      	movs	r2, #1
 8006278:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	2202      	movs	r2, #2
 8006280:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	681b      	ldr	r3, [r3, #0]
 8006288:	689b      	ldr	r3, [r3, #8]
 800628a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800628c:	68fb      	ldr	r3, [r7, #12]
 800628e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8006292:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006294:	68fb      	ldr	r3, [r7, #12]
 8006296:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800629a:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	681b      	ldr	r3, [r3, #0]
 80062a0:	68fa      	ldr	r2, [r7, #12]
 80062a2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80062a4:	683b      	ldr	r3, [r7, #0]
 80062a6:	681b      	ldr	r3, [r3, #0]
 80062a8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80062ac:	d03e      	beq.n	800632c <HAL_TIM_ConfigClockSource+0xd0>
 80062ae:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80062b2:	f200 8087 	bhi.w	80063c4 <HAL_TIM_ConfigClockSource+0x168>
 80062b6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80062ba:	f000 8085 	beq.w	80063c8 <HAL_TIM_ConfigClockSource+0x16c>
 80062be:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80062c2:	d87f      	bhi.n	80063c4 <HAL_TIM_ConfigClockSource+0x168>
 80062c4:	2b70      	cmp	r3, #112	; 0x70
 80062c6:	d01a      	beq.n	80062fe <HAL_TIM_ConfigClockSource+0xa2>
 80062c8:	2b70      	cmp	r3, #112	; 0x70
 80062ca:	d87b      	bhi.n	80063c4 <HAL_TIM_ConfigClockSource+0x168>
 80062cc:	2b60      	cmp	r3, #96	; 0x60
 80062ce:	d050      	beq.n	8006372 <HAL_TIM_ConfigClockSource+0x116>
 80062d0:	2b60      	cmp	r3, #96	; 0x60
 80062d2:	d877      	bhi.n	80063c4 <HAL_TIM_ConfigClockSource+0x168>
 80062d4:	2b50      	cmp	r3, #80	; 0x50
 80062d6:	d03c      	beq.n	8006352 <HAL_TIM_ConfigClockSource+0xf6>
 80062d8:	2b50      	cmp	r3, #80	; 0x50
 80062da:	d873      	bhi.n	80063c4 <HAL_TIM_ConfigClockSource+0x168>
 80062dc:	2b40      	cmp	r3, #64	; 0x40
 80062de:	d058      	beq.n	8006392 <HAL_TIM_ConfigClockSource+0x136>
 80062e0:	2b40      	cmp	r3, #64	; 0x40
 80062e2:	d86f      	bhi.n	80063c4 <HAL_TIM_ConfigClockSource+0x168>
 80062e4:	2b30      	cmp	r3, #48	; 0x30
 80062e6:	d064      	beq.n	80063b2 <HAL_TIM_ConfigClockSource+0x156>
 80062e8:	2b30      	cmp	r3, #48	; 0x30
 80062ea:	d86b      	bhi.n	80063c4 <HAL_TIM_ConfigClockSource+0x168>
 80062ec:	2b20      	cmp	r3, #32
 80062ee:	d060      	beq.n	80063b2 <HAL_TIM_ConfigClockSource+0x156>
 80062f0:	2b20      	cmp	r3, #32
 80062f2:	d867      	bhi.n	80063c4 <HAL_TIM_ConfigClockSource+0x168>
 80062f4:	2b00      	cmp	r3, #0
 80062f6:	d05c      	beq.n	80063b2 <HAL_TIM_ConfigClockSource+0x156>
 80062f8:	2b10      	cmp	r3, #16
 80062fa:	d05a      	beq.n	80063b2 <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 80062fc:	e062      	b.n	80063c4 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	6818      	ldr	r0, [r3, #0]
 8006302:	683b      	ldr	r3, [r7, #0]
 8006304:	6899      	ldr	r1, [r3, #8]
 8006306:	683b      	ldr	r3, [r7, #0]
 8006308:	685a      	ldr	r2, [r3, #4]
 800630a:	683b      	ldr	r3, [r7, #0]
 800630c:	68db      	ldr	r3, [r3, #12]
 800630e:	f000 f966 	bl	80065de <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	681b      	ldr	r3, [r3, #0]
 8006316:	689b      	ldr	r3, [r3, #8]
 8006318:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800631a:	68fb      	ldr	r3, [r7, #12]
 800631c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8006320:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	681b      	ldr	r3, [r3, #0]
 8006326:	68fa      	ldr	r2, [r7, #12]
 8006328:	609a      	str	r2, [r3, #8]
      break;
 800632a:	e04e      	b.n	80063ca <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	6818      	ldr	r0, [r3, #0]
 8006330:	683b      	ldr	r3, [r7, #0]
 8006332:	6899      	ldr	r1, [r3, #8]
 8006334:	683b      	ldr	r3, [r7, #0]
 8006336:	685a      	ldr	r2, [r3, #4]
 8006338:	683b      	ldr	r3, [r7, #0]
 800633a:	68db      	ldr	r3, [r3, #12]
 800633c:	f000 f94f 	bl	80065de <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	681b      	ldr	r3, [r3, #0]
 8006344:	689a      	ldr	r2, [r3, #8]
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	681b      	ldr	r3, [r3, #0]
 800634a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800634e:	609a      	str	r2, [r3, #8]
      break;
 8006350:	e03b      	b.n	80063ca <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	6818      	ldr	r0, [r3, #0]
 8006356:	683b      	ldr	r3, [r7, #0]
 8006358:	6859      	ldr	r1, [r3, #4]
 800635a:	683b      	ldr	r3, [r7, #0]
 800635c:	68db      	ldr	r3, [r3, #12]
 800635e:	461a      	mov	r2, r3
 8006360:	f000 f8c6 	bl	80064f0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	681b      	ldr	r3, [r3, #0]
 8006368:	2150      	movs	r1, #80	; 0x50
 800636a:	4618      	mov	r0, r3
 800636c:	f000 f91d 	bl	80065aa <TIM_ITRx_SetConfig>
      break;
 8006370:	e02b      	b.n	80063ca <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	6818      	ldr	r0, [r3, #0]
 8006376:	683b      	ldr	r3, [r7, #0]
 8006378:	6859      	ldr	r1, [r3, #4]
 800637a:	683b      	ldr	r3, [r7, #0]
 800637c:	68db      	ldr	r3, [r3, #12]
 800637e:	461a      	mov	r2, r3
 8006380:	f000 f8e4 	bl	800654c <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	681b      	ldr	r3, [r3, #0]
 8006388:	2160      	movs	r1, #96	; 0x60
 800638a:	4618      	mov	r0, r3
 800638c:	f000 f90d 	bl	80065aa <TIM_ITRx_SetConfig>
      break;
 8006390:	e01b      	b.n	80063ca <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	6818      	ldr	r0, [r3, #0]
 8006396:	683b      	ldr	r3, [r7, #0]
 8006398:	6859      	ldr	r1, [r3, #4]
 800639a:	683b      	ldr	r3, [r7, #0]
 800639c:	68db      	ldr	r3, [r3, #12]
 800639e:	461a      	mov	r2, r3
 80063a0:	f000 f8a6 	bl	80064f0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	681b      	ldr	r3, [r3, #0]
 80063a8:	2140      	movs	r1, #64	; 0x40
 80063aa:	4618      	mov	r0, r3
 80063ac:	f000 f8fd 	bl	80065aa <TIM_ITRx_SetConfig>
      break;
 80063b0:	e00b      	b.n	80063ca <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	681a      	ldr	r2, [r3, #0]
 80063b6:	683b      	ldr	r3, [r7, #0]
 80063b8:	681b      	ldr	r3, [r3, #0]
 80063ba:	4619      	mov	r1, r3
 80063bc:	4610      	mov	r0, r2
 80063be:	f000 f8f4 	bl	80065aa <TIM_ITRx_SetConfig>
        break;
 80063c2:	e002      	b.n	80063ca <HAL_TIM_ConfigClockSource+0x16e>
      break;
 80063c4:	bf00      	nop
 80063c6:	e000      	b.n	80063ca <HAL_TIM_ConfigClockSource+0x16e>
      break;
 80063c8:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	2201      	movs	r2, #1
 80063ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	2200      	movs	r2, #0
 80063d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80063da:	2300      	movs	r3, #0
}
 80063dc:	4618      	mov	r0, r3
 80063de:	3710      	adds	r7, #16
 80063e0:	46bd      	mov	sp, r7
 80063e2:	bd80      	pop	{r7, pc}

080063e4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80063e4:	b480      	push	{r7}
 80063e6:	b083      	sub	sp, #12
 80063e8:	af00      	add	r7, sp, #0
 80063ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80063ec:	bf00      	nop
 80063ee:	370c      	adds	r7, #12
 80063f0:	46bd      	mov	sp, r7
 80063f2:	bc80      	pop	{r7}
 80063f4:	4770      	bx	lr

080063f6 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80063f6:	b480      	push	{r7}
 80063f8:	b083      	sub	sp, #12
 80063fa:	af00      	add	r7, sp, #0
 80063fc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80063fe:	bf00      	nop
 8006400:	370c      	adds	r7, #12
 8006402:	46bd      	mov	sp, r7
 8006404:	bc80      	pop	{r7}
 8006406:	4770      	bx	lr

08006408 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006408:	b480      	push	{r7}
 800640a:	b083      	sub	sp, #12
 800640c:	af00      	add	r7, sp, #0
 800640e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006410:	bf00      	nop
 8006412:	370c      	adds	r7, #12
 8006414:	46bd      	mov	sp, r7
 8006416:	bc80      	pop	{r7}
 8006418:	4770      	bx	lr

0800641a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800641a:	b480      	push	{r7}
 800641c:	b083      	sub	sp, #12
 800641e:	af00      	add	r7, sp, #0
 8006420:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006422:	bf00      	nop
 8006424:	370c      	adds	r7, #12
 8006426:	46bd      	mov	sp, r7
 8006428:	bc80      	pop	{r7}
 800642a:	4770      	bx	lr

0800642c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800642c:	b480      	push	{r7}
 800642e:	b085      	sub	sp, #20
 8006430:	af00      	add	r7, sp, #0
 8006432:	6078      	str	r0, [r7, #4]
 8006434:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	681b      	ldr	r3, [r3, #0]
 800643a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	4a29      	ldr	r2, [pc, #164]	; (80064e4 <TIM_Base_SetConfig+0xb8>)
 8006440:	4293      	cmp	r3, r2
 8006442:	d00b      	beq.n	800645c <TIM_Base_SetConfig+0x30>
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800644a:	d007      	beq.n	800645c <TIM_Base_SetConfig+0x30>
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	4a26      	ldr	r2, [pc, #152]	; (80064e8 <TIM_Base_SetConfig+0xbc>)
 8006450:	4293      	cmp	r3, r2
 8006452:	d003      	beq.n	800645c <TIM_Base_SetConfig+0x30>
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	4a25      	ldr	r2, [pc, #148]	; (80064ec <TIM_Base_SetConfig+0xc0>)
 8006458:	4293      	cmp	r3, r2
 800645a:	d108      	bne.n	800646e <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800645c:	68fb      	ldr	r3, [r7, #12]
 800645e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006462:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006464:	683b      	ldr	r3, [r7, #0]
 8006466:	685b      	ldr	r3, [r3, #4]
 8006468:	68fa      	ldr	r2, [r7, #12]
 800646a:	4313      	orrs	r3, r2
 800646c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	4a1c      	ldr	r2, [pc, #112]	; (80064e4 <TIM_Base_SetConfig+0xb8>)
 8006472:	4293      	cmp	r3, r2
 8006474:	d00b      	beq.n	800648e <TIM_Base_SetConfig+0x62>
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800647c:	d007      	beq.n	800648e <TIM_Base_SetConfig+0x62>
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	4a19      	ldr	r2, [pc, #100]	; (80064e8 <TIM_Base_SetConfig+0xbc>)
 8006482:	4293      	cmp	r3, r2
 8006484:	d003      	beq.n	800648e <TIM_Base_SetConfig+0x62>
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	4a18      	ldr	r2, [pc, #96]	; (80064ec <TIM_Base_SetConfig+0xc0>)
 800648a:	4293      	cmp	r3, r2
 800648c:	d108      	bne.n	80064a0 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800648e:	68fb      	ldr	r3, [r7, #12]
 8006490:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006494:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006496:	683b      	ldr	r3, [r7, #0]
 8006498:	68db      	ldr	r3, [r3, #12]
 800649a:	68fa      	ldr	r2, [r7, #12]
 800649c:	4313      	orrs	r3, r2
 800649e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80064a0:	68fb      	ldr	r3, [r7, #12]
 80064a2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80064a6:	683b      	ldr	r3, [r7, #0]
 80064a8:	695b      	ldr	r3, [r3, #20]
 80064aa:	4313      	orrs	r3, r2
 80064ac:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	68fa      	ldr	r2, [r7, #12]
 80064b2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80064b4:	683b      	ldr	r3, [r7, #0]
 80064b6:	689a      	ldr	r2, [r3, #8]
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80064bc:	683b      	ldr	r3, [r7, #0]
 80064be:	681a      	ldr	r2, [r3, #0]
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	4a07      	ldr	r2, [pc, #28]	; (80064e4 <TIM_Base_SetConfig+0xb8>)
 80064c8:	4293      	cmp	r3, r2
 80064ca:	d103      	bne.n	80064d4 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80064cc:	683b      	ldr	r3, [r7, #0]
 80064ce:	691a      	ldr	r2, [r3, #16]
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	2201      	movs	r2, #1
 80064d8:	615a      	str	r2, [r3, #20]
}
 80064da:	bf00      	nop
 80064dc:	3714      	adds	r7, #20
 80064de:	46bd      	mov	sp, r7
 80064e0:	bc80      	pop	{r7}
 80064e2:	4770      	bx	lr
 80064e4:	40012c00 	.word	0x40012c00
 80064e8:	40000400 	.word	0x40000400
 80064ec:	40000800 	.word	0x40000800

080064f0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80064f0:	b480      	push	{r7}
 80064f2:	b087      	sub	sp, #28
 80064f4:	af00      	add	r7, sp, #0
 80064f6:	60f8      	str	r0, [r7, #12]
 80064f8:	60b9      	str	r1, [r7, #8]
 80064fa:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80064fc:	68fb      	ldr	r3, [r7, #12]
 80064fe:	6a1b      	ldr	r3, [r3, #32]
 8006500:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006502:	68fb      	ldr	r3, [r7, #12]
 8006504:	6a1b      	ldr	r3, [r3, #32]
 8006506:	f023 0201 	bic.w	r2, r3, #1
 800650a:	68fb      	ldr	r3, [r7, #12]
 800650c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800650e:	68fb      	ldr	r3, [r7, #12]
 8006510:	699b      	ldr	r3, [r3, #24]
 8006512:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006514:	693b      	ldr	r3, [r7, #16]
 8006516:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800651a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	011b      	lsls	r3, r3, #4
 8006520:	693a      	ldr	r2, [r7, #16]
 8006522:	4313      	orrs	r3, r2
 8006524:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006526:	697b      	ldr	r3, [r7, #20]
 8006528:	f023 030a 	bic.w	r3, r3, #10
 800652c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800652e:	697a      	ldr	r2, [r7, #20]
 8006530:	68bb      	ldr	r3, [r7, #8]
 8006532:	4313      	orrs	r3, r2
 8006534:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006536:	68fb      	ldr	r3, [r7, #12]
 8006538:	693a      	ldr	r2, [r7, #16]
 800653a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800653c:	68fb      	ldr	r3, [r7, #12]
 800653e:	697a      	ldr	r2, [r7, #20]
 8006540:	621a      	str	r2, [r3, #32]
}
 8006542:	bf00      	nop
 8006544:	371c      	adds	r7, #28
 8006546:	46bd      	mov	sp, r7
 8006548:	bc80      	pop	{r7}
 800654a:	4770      	bx	lr

0800654c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800654c:	b480      	push	{r7}
 800654e:	b087      	sub	sp, #28
 8006550:	af00      	add	r7, sp, #0
 8006552:	60f8      	str	r0, [r7, #12]
 8006554:	60b9      	str	r1, [r7, #8]
 8006556:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006558:	68fb      	ldr	r3, [r7, #12]
 800655a:	6a1b      	ldr	r3, [r3, #32]
 800655c:	f023 0210 	bic.w	r2, r3, #16
 8006560:	68fb      	ldr	r3, [r7, #12]
 8006562:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006564:	68fb      	ldr	r3, [r7, #12]
 8006566:	699b      	ldr	r3, [r3, #24]
 8006568:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800656a:	68fb      	ldr	r3, [r7, #12]
 800656c:	6a1b      	ldr	r3, [r3, #32]
 800656e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006570:	697b      	ldr	r3, [r7, #20]
 8006572:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006576:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	031b      	lsls	r3, r3, #12
 800657c:	697a      	ldr	r2, [r7, #20]
 800657e:	4313      	orrs	r3, r2
 8006580:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006582:	693b      	ldr	r3, [r7, #16]
 8006584:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006588:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800658a:	68bb      	ldr	r3, [r7, #8]
 800658c:	011b      	lsls	r3, r3, #4
 800658e:	693a      	ldr	r2, [r7, #16]
 8006590:	4313      	orrs	r3, r2
 8006592:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006594:	68fb      	ldr	r3, [r7, #12]
 8006596:	697a      	ldr	r2, [r7, #20]
 8006598:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800659a:	68fb      	ldr	r3, [r7, #12]
 800659c:	693a      	ldr	r2, [r7, #16]
 800659e:	621a      	str	r2, [r3, #32]
}
 80065a0:	bf00      	nop
 80065a2:	371c      	adds	r7, #28
 80065a4:	46bd      	mov	sp, r7
 80065a6:	bc80      	pop	{r7}
 80065a8:	4770      	bx	lr

080065aa <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80065aa:	b480      	push	{r7}
 80065ac:	b085      	sub	sp, #20
 80065ae:	af00      	add	r7, sp, #0
 80065b0:	6078      	str	r0, [r7, #4]
 80065b2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	689b      	ldr	r3, [r3, #8]
 80065b8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80065ba:	68fb      	ldr	r3, [r7, #12]
 80065bc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80065c0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80065c2:	683a      	ldr	r2, [r7, #0]
 80065c4:	68fb      	ldr	r3, [r7, #12]
 80065c6:	4313      	orrs	r3, r2
 80065c8:	f043 0307 	orr.w	r3, r3, #7
 80065cc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	68fa      	ldr	r2, [r7, #12]
 80065d2:	609a      	str	r2, [r3, #8]
}
 80065d4:	bf00      	nop
 80065d6:	3714      	adds	r7, #20
 80065d8:	46bd      	mov	sp, r7
 80065da:	bc80      	pop	{r7}
 80065dc:	4770      	bx	lr

080065de <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80065de:	b480      	push	{r7}
 80065e0:	b087      	sub	sp, #28
 80065e2:	af00      	add	r7, sp, #0
 80065e4:	60f8      	str	r0, [r7, #12]
 80065e6:	60b9      	str	r1, [r7, #8]
 80065e8:	607a      	str	r2, [r7, #4]
 80065ea:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80065ec:	68fb      	ldr	r3, [r7, #12]
 80065ee:	689b      	ldr	r3, [r3, #8]
 80065f0:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80065f2:	697b      	ldr	r3, [r7, #20]
 80065f4:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80065f8:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80065fa:	683b      	ldr	r3, [r7, #0]
 80065fc:	021a      	lsls	r2, r3, #8
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	431a      	orrs	r2, r3
 8006602:	68bb      	ldr	r3, [r7, #8]
 8006604:	4313      	orrs	r3, r2
 8006606:	697a      	ldr	r2, [r7, #20]
 8006608:	4313      	orrs	r3, r2
 800660a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800660c:	68fb      	ldr	r3, [r7, #12]
 800660e:	697a      	ldr	r2, [r7, #20]
 8006610:	609a      	str	r2, [r3, #8]
}
 8006612:	bf00      	nop
 8006614:	371c      	adds	r7, #28
 8006616:	46bd      	mov	sp, r7
 8006618:	bc80      	pop	{r7}
 800661a:	4770      	bx	lr

0800661c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800661c:	b480      	push	{r7}
 800661e:	b085      	sub	sp, #20
 8006620:	af00      	add	r7, sp, #0
 8006622:	6078      	str	r0, [r7, #4]
 8006624:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800662c:	2b01      	cmp	r3, #1
 800662e:	d101      	bne.n	8006634 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006630:	2302      	movs	r3, #2
 8006632:	e046      	b.n	80066c2 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	2201      	movs	r2, #1
 8006638:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	2202      	movs	r2, #2
 8006640:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	681b      	ldr	r3, [r3, #0]
 8006648:	685b      	ldr	r3, [r3, #4]
 800664a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	681b      	ldr	r3, [r3, #0]
 8006650:	689b      	ldr	r3, [r3, #8]
 8006652:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006654:	68fb      	ldr	r3, [r7, #12]
 8006656:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800665a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800665c:	683b      	ldr	r3, [r7, #0]
 800665e:	681b      	ldr	r3, [r3, #0]
 8006660:	68fa      	ldr	r2, [r7, #12]
 8006662:	4313      	orrs	r3, r2
 8006664:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	681b      	ldr	r3, [r3, #0]
 800666a:	68fa      	ldr	r2, [r7, #12]
 800666c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	681b      	ldr	r3, [r3, #0]
 8006672:	4a16      	ldr	r2, [pc, #88]	; (80066cc <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8006674:	4293      	cmp	r3, r2
 8006676:	d00e      	beq.n	8006696 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	681b      	ldr	r3, [r3, #0]
 800667c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006680:	d009      	beq.n	8006696 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	681b      	ldr	r3, [r3, #0]
 8006686:	4a12      	ldr	r2, [pc, #72]	; (80066d0 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8006688:	4293      	cmp	r3, r2
 800668a:	d004      	beq.n	8006696 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	681b      	ldr	r3, [r3, #0]
 8006690:	4a10      	ldr	r2, [pc, #64]	; (80066d4 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8006692:	4293      	cmp	r3, r2
 8006694:	d10c      	bne.n	80066b0 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006696:	68bb      	ldr	r3, [r7, #8]
 8006698:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800669c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800669e:	683b      	ldr	r3, [r7, #0]
 80066a0:	685b      	ldr	r3, [r3, #4]
 80066a2:	68ba      	ldr	r2, [r7, #8]
 80066a4:	4313      	orrs	r3, r2
 80066a6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	681b      	ldr	r3, [r3, #0]
 80066ac:	68ba      	ldr	r2, [r7, #8]
 80066ae:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	2201      	movs	r2, #1
 80066b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	2200      	movs	r2, #0
 80066bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80066c0:	2300      	movs	r3, #0
}
 80066c2:	4618      	mov	r0, r3
 80066c4:	3714      	adds	r7, #20
 80066c6:	46bd      	mov	sp, r7
 80066c8:	bc80      	pop	{r7}
 80066ca:	4770      	bx	lr
 80066cc:	40012c00 	.word	0x40012c00
 80066d0:	40000400 	.word	0x40000400
 80066d4:	40000800 	.word	0x40000800

080066d8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80066d8:	b480      	push	{r7}
 80066da:	b083      	sub	sp, #12
 80066dc:	af00      	add	r7, sp, #0
 80066de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80066e0:	bf00      	nop
 80066e2:	370c      	adds	r7, #12
 80066e4:	46bd      	mov	sp, r7
 80066e6:	bc80      	pop	{r7}
 80066e8:	4770      	bx	lr

080066ea <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80066ea:	b480      	push	{r7}
 80066ec:	b083      	sub	sp, #12
 80066ee:	af00      	add	r7, sp, #0
 80066f0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80066f2:	bf00      	nop
 80066f4:	370c      	adds	r7, #12
 80066f6:	46bd      	mov	sp, r7
 80066f8:	bc80      	pop	{r7}
 80066fa:	4770      	bx	lr

080066fc <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80066fc:	b580      	push	{r7, lr}
 80066fe:	b082      	sub	sp, #8
 8006700:	af00      	add	r7, sp, #0
 8006702:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	2b00      	cmp	r3, #0
 8006708:	d101      	bne.n	800670e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800670a:	2301      	movs	r3, #1
 800670c:	e03f      	b.n	800678e <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006714:	b2db      	uxtb	r3, r3
 8006716:	2b00      	cmp	r3, #0
 8006718:	d106      	bne.n	8006728 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	2200      	movs	r2, #0
 800671e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006722:	6878      	ldr	r0, [r7, #4]
 8006724:	f7fc f9fc 	bl	8002b20 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	2224      	movs	r2, #36	; 0x24
 800672c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	681b      	ldr	r3, [r3, #0]
 8006734:	68da      	ldr	r2, [r3, #12]
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	681b      	ldr	r3, [r3, #0]
 800673a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800673e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8006740:	6878      	ldr	r0, [r7, #4]
 8006742:	f000 f905 	bl	8006950 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	681b      	ldr	r3, [r3, #0]
 800674a:	691a      	ldr	r2, [r3, #16]
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	681b      	ldr	r3, [r3, #0]
 8006750:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006754:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	681b      	ldr	r3, [r3, #0]
 800675a:	695a      	ldr	r2, [r3, #20]
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	681b      	ldr	r3, [r3, #0]
 8006760:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006764:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	681b      	ldr	r3, [r3, #0]
 800676a:	68da      	ldr	r2, [r3, #12]
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	681b      	ldr	r3, [r3, #0]
 8006770:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006774:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	2200      	movs	r2, #0
 800677a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	2220      	movs	r2, #32
 8006780:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	2220      	movs	r2, #32
 8006788:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800678c:	2300      	movs	r3, #0
}
 800678e:	4618      	mov	r0, r3
 8006790:	3708      	adds	r7, #8
 8006792:	46bd      	mov	sp, r7
 8006794:	bd80      	pop	{r7, pc}

08006796 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006796:	b580      	push	{r7, lr}
 8006798:	b08a      	sub	sp, #40	; 0x28
 800679a:	af02      	add	r7, sp, #8
 800679c:	60f8      	str	r0, [r7, #12]
 800679e:	60b9      	str	r1, [r7, #8]
 80067a0:	603b      	str	r3, [r7, #0]
 80067a2:	4613      	mov	r3, r2
 80067a4:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80067a6:	2300      	movs	r3, #0
 80067a8:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80067aa:	68fb      	ldr	r3, [r7, #12]
 80067ac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80067b0:	b2db      	uxtb	r3, r3
 80067b2:	2b20      	cmp	r3, #32
 80067b4:	d17c      	bne.n	80068b0 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80067b6:	68bb      	ldr	r3, [r7, #8]
 80067b8:	2b00      	cmp	r3, #0
 80067ba:	d002      	beq.n	80067c2 <HAL_UART_Transmit+0x2c>
 80067bc:	88fb      	ldrh	r3, [r7, #6]
 80067be:	2b00      	cmp	r3, #0
 80067c0:	d101      	bne.n	80067c6 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80067c2:	2301      	movs	r3, #1
 80067c4:	e075      	b.n	80068b2 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80067c6:	68fb      	ldr	r3, [r7, #12]
 80067c8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80067cc:	2b01      	cmp	r3, #1
 80067ce:	d101      	bne.n	80067d4 <HAL_UART_Transmit+0x3e>
 80067d0:	2302      	movs	r3, #2
 80067d2:	e06e      	b.n	80068b2 <HAL_UART_Transmit+0x11c>
 80067d4:	68fb      	ldr	r3, [r7, #12]
 80067d6:	2201      	movs	r2, #1
 80067d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80067dc:	68fb      	ldr	r3, [r7, #12]
 80067de:	2200      	movs	r2, #0
 80067e0:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80067e2:	68fb      	ldr	r3, [r7, #12]
 80067e4:	2221      	movs	r2, #33	; 0x21
 80067e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80067ea:	f7fc fb75 	bl	8002ed8 <HAL_GetTick>
 80067ee:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80067f0:	68fb      	ldr	r3, [r7, #12]
 80067f2:	88fa      	ldrh	r2, [r7, #6]
 80067f4:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80067f6:	68fb      	ldr	r3, [r7, #12]
 80067f8:	88fa      	ldrh	r2, [r7, #6]
 80067fa:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80067fc:	68fb      	ldr	r3, [r7, #12]
 80067fe:	689b      	ldr	r3, [r3, #8]
 8006800:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006804:	d108      	bne.n	8006818 <HAL_UART_Transmit+0x82>
 8006806:	68fb      	ldr	r3, [r7, #12]
 8006808:	691b      	ldr	r3, [r3, #16]
 800680a:	2b00      	cmp	r3, #0
 800680c:	d104      	bne.n	8006818 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800680e:	2300      	movs	r3, #0
 8006810:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8006812:	68bb      	ldr	r3, [r7, #8]
 8006814:	61bb      	str	r3, [r7, #24]
 8006816:	e003      	b.n	8006820 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8006818:	68bb      	ldr	r3, [r7, #8]
 800681a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800681c:	2300      	movs	r3, #0
 800681e:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8006820:	68fb      	ldr	r3, [r7, #12]
 8006822:	2200      	movs	r2, #0
 8006824:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8006828:	e02a      	b.n	8006880 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800682a:	683b      	ldr	r3, [r7, #0]
 800682c:	9300      	str	r3, [sp, #0]
 800682e:	697b      	ldr	r3, [r7, #20]
 8006830:	2200      	movs	r2, #0
 8006832:	2180      	movs	r1, #128	; 0x80
 8006834:	68f8      	ldr	r0, [r7, #12]
 8006836:	f000 f840 	bl	80068ba <UART_WaitOnFlagUntilTimeout>
 800683a:	4603      	mov	r3, r0
 800683c:	2b00      	cmp	r3, #0
 800683e:	d001      	beq.n	8006844 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8006840:	2303      	movs	r3, #3
 8006842:	e036      	b.n	80068b2 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8006844:	69fb      	ldr	r3, [r7, #28]
 8006846:	2b00      	cmp	r3, #0
 8006848:	d10b      	bne.n	8006862 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800684a:	69bb      	ldr	r3, [r7, #24]
 800684c:	881b      	ldrh	r3, [r3, #0]
 800684e:	461a      	mov	r2, r3
 8006850:	68fb      	ldr	r3, [r7, #12]
 8006852:	681b      	ldr	r3, [r3, #0]
 8006854:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006858:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800685a:	69bb      	ldr	r3, [r7, #24]
 800685c:	3302      	adds	r3, #2
 800685e:	61bb      	str	r3, [r7, #24]
 8006860:	e007      	b.n	8006872 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8006862:	69fb      	ldr	r3, [r7, #28]
 8006864:	781a      	ldrb	r2, [r3, #0]
 8006866:	68fb      	ldr	r3, [r7, #12]
 8006868:	681b      	ldr	r3, [r3, #0]
 800686a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800686c:	69fb      	ldr	r3, [r7, #28]
 800686e:	3301      	adds	r3, #1
 8006870:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006872:	68fb      	ldr	r3, [r7, #12]
 8006874:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006876:	b29b      	uxth	r3, r3
 8006878:	3b01      	subs	r3, #1
 800687a:	b29a      	uxth	r2, r3
 800687c:	68fb      	ldr	r3, [r7, #12]
 800687e:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8006880:	68fb      	ldr	r3, [r7, #12]
 8006882:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006884:	b29b      	uxth	r3, r3
 8006886:	2b00      	cmp	r3, #0
 8006888:	d1cf      	bne.n	800682a <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800688a:	683b      	ldr	r3, [r7, #0]
 800688c:	9300      	str	r3, [sp, #0]
 800688e:	697b      	ldr	r3, [r7, #20]
 8006890:	2200      	movs	r2, #0
 8006892:	2140      	movs	r1, #64	; 0x40
 8006894:	68f8      	ldr	r0, [r7, #12]
 8006896:	f000 f810 	bl	80068ba <UART_WaitOnFlagUntilTimeout>
 800689a:	4603      	mov	r3, r0
 800689c:	2b00      	cmp	r3, #0
 800689e:	d001      	beq.n	80068a4 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80068a0:	2303      	movs	r3, #3
 80068a2:	e006      	b.n	80068b2 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80068a4:	68fb      	ldr	r3, [r7, #12]
 80068a6:	2220      	movs	r2, #32
 80068a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80068ac:	2300      	movs	r3, #0
 80068ae:	e000      	b.n	80068b2 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80068b0:	2302      	movs	r3, #2
  }
}
 80068b2:	4618      	mov	r0, r3
 80068b4:	3720      	adds	r7, #32
 80068b6:	46bd      	mov	sp, r7
 80068b8:	bd80      	pop	{r7, pc}

080068ba <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 80068ba:	b580      	push	{r7, lr}
 80068bc:	b084      	sub	sp, #16
 80068be:	af00      	add	r7, sp, #0
 80068c0:	60f8      	str	r0, [r7, #12]
 80068c2:	60b9      	str	r1, [r7, #8]
 80068c4:	603b      	str	r3, [r7, #0]
 80068c6:	4613      	mov	r3, r2
 80068c8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80068ca:	e02c      	b.n	8006926 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80068cc:	69bb      	ldr	r3, [r7, #24]
 80068ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 80068d2:	d028      	beq.n	8006926 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80068d4:	69bb      	ldr	r3, [r7, #24]
 80068d6:	2b00      	cmp	r3, #0
 80068d8:	d007      	beq.n	80068ea <UART_WaitOnFlagUntilTimeout+0x30>
 80068da:	f7fc fafd 	bl	8002ed8 <HAL_GetTick>
 80068de:	4602      	mov	r2, r0
 80068e0:	683b      	ldr	r3, [r7, #0]
 80068e2:	1ad3      	subs	r3, r2, r3
 80068e4:	69ba      	ldr	r2, [r7, #24]
 80068e6:	429a      	cmp	r2, r3
 80068e8:	d21d      	bcs.n	8006926 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80068ea:	68fb      	ldr	r3, [r7, #12]
 80068ec:	681b      	ldr	r3, [r3, #0]
 80068ee:	68da      	ldr	r2, [r3, #12]
 80068f0:	68fb      	ldr	r3, [r7, #12]
 80068f2:	681b      	ldr	r3, [r3, #0]
 80068f4:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80068f8:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80068fa:	68fb      	ldr	r3, [r7, #12]
 80068fc:	681b      	ldr	r3, [r3, #0]
 80068fe:	695a      	ldr	r2, [r3, #20]
 8006900:	68fb      	ldr	r3, [r7, #12]
 8006902:	681b      	ldr	r3, [r3, #0]
 8006904:	f022 0201 	bic.w	r2, r2, #1
 8006908:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 800690a:	68fb      	ldr	r3, [r7, #12]
 800690c:	2220      	movs	r2, #32
 800690e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8006912:	68fb      	ldr	r3, [r7, #12]
 8006914:	2220      	movs	r2, #32
 8006916:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800691a:	68fb      	ldr	r3, [r7, #12]
 800691c:	2200      	movs	r2, #0
 800691e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8006922:	2303      	movs	r3, #3
 8006924:	e00f      	b.n	8006946 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006926:	68fb      	ldr	r3, [r7, #12]
 8006928:	681b      	ldr	r3, [r3, #0]
 800692a:	681a      	ldr	r2, [r3, #0]
 800692c:	68bb      	ldr	r3, [r7, #8]
 800692e:	4013      	ands	r3, r2
 8006930:	68ba      	ldr	r2, [r7, #8]
 8006932:	429a      	cmp	r2, r3
 8006934:	bf0c      	ite	eq
 8006936:	2301      	moveq	r3, #1
 8006938:	2300      	movne	r3, #0
 800693a:	b2db      	uxtb	r3, r3
 800693c:	461a      	mov	r2, r3
 800693e:	79fb      	ldrb	r3, [r7, #7]
 8006940:	429a      	cmp	r2, r3
 8006942:	d0c3      	beq.n	80068cc <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8006944:	2300      	movs	r3, #0
}
 8006946:	4618      	mov	r0, r3
 8006948:	3710      	adds	r7, #16
 800694a:	46bd      	mov	sp, r7
 800694c:	bd80      	pop	{r7, pc}
	...

08006950 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006950:	b580      	push	{r7, lr}
 8006952:	b084      	sub	sp, #16
 8006954:	af00      	add	r7, sp, #0
 8006956:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	681b      	ldr	r3, [r3, #0]
 800695c:	691b      	ldr	r3, [r3, #16]
 800695e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	68da      	ldr	r2, [r3, #12]
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	681b      	ldr	r3, [r3, #0]
 800696a:	430a      	orrs	r2, r1
 800696c:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	689a      	ldr	r2, [r3, #8]
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	691b      	ldr	r3, [r3, #16]
 8006976:	431a      	orrs	r2, r3
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	695b      	ldr	r3, [r3, #20]
 800697c:	4313      	orrs	r3, r2
 800697e:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	681b      	ldr	r3, [r3, #0]
 8006984:	68db      	ldr	r3, [r3, #12]
 8006986:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 800698a:	f023 030c 	bic.w	r3, r3, #12
 800698e:	687a      	ldr	r2, [r7, #4]
 8006990:	6812      	ldr	r2, [r2, #0]
 8006992:	68b9      	ldr	r1, [r7, #8]
 8006994:	430b      	orrs	r3, r1
 8006996:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	681b      	ldr	r3, [r3, #0]
 800699c:	695b      	ldr	r3, [r3, #20]
 800699e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	699a      	ldr	r2, [r3, #24]
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	681b      	ldr	r3, [r3, #0]
 80069aa:	430a      	orrs	r2, r1
 80069ac:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	681b      	ldr	r3, [r3, #0]
 80069b2:	4a2c      	ldr	r2, [pc, #176]	; (8006a64 <UART_SetConfig+0x114>)
 80069b4:	4293      	cmp	r3, r2
 80069b6:	d103      	bne.n	80069c0 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80069b8:	f7ff f974 	bl	8005ca4 <HAL_RCC_GetPCLK2Freq>
 80069bc:	60f8      	str	r0, [r7, #12]
 80069be:	e002      	b.n	80069c6 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80069c0:	f7ff f95c 	bl	8005c7c <HAL_RCC_GetPCLK1Freq>
 80069c4:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80069c6:	68fa      	ldr	r2, [r7, #12]
 80069c8:	4613      	mov	r3, r2
 80069ca:	009b      	lsls	r3, r3, #2
 80069cc:	4413      	add	r3, r2
 80069ce:	009a      	lsls	r2, r3, #2
 80069d0:	441a      	add	r2, r3
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	685b      	ldr	r3, [r3, #4]
 80069d6:	009b      	lsls	r3, r3, #2
 80069d8:	fbb2 f3f3 	udiv	r3, r2, r3
 80069dc:	4a22      	ldr	r2, [pc, #136]	; (8006a68 <UART_SetConfig+0x118>)
 80069de:	fba2 2303 	umull	r2, r3, r2, r3
 80069e2:	095b      	lsrs	r3, r3, #5
 80069e4:	0119      	lsls	r1, r3, #4
 80069e6:	68fa      	ldr	r2, [r7, #12]
 80069e8:	4613      	mov	r3, r2
 80069ea:	009b      	lsls	r3, r3, #2
 80069ec:	4413      	add	r3, r2
 80069ee:	009a      	lsls	r2, r3, #2
 80069f0:	441a      	add	r2, r3
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	685b      	ldr	r3, [r3, #4]
 80069f6:	009b      	lsls	r3, r3, #2
 80069f8:	fbb2 f2f3 	udiv	r2, r2, r3
 80069fc:	4b1a      	ldr	r3, [pc, #104]	; (8006a68 <UART_SetConfig+0x118>)
 80069fe:	fba3 0302 	umull	r0, r3, r3, r2
 8006a02:	095b      	lsrs	r3, r3, #5
 8006a04:	2064      	movs	r0, #100	; 0x64
 8006a06:	fb00 f303 	mul.w	r3, r0, r3
 8006a0a:	1ad3      	subs	r3, r2, r3
 8006a0c:	011b      	lsls	r3, r3, #4
 8006a0e:	3332      	adds	r3, #50	; 0x32
 8006a10:	4a15      	ldr	r2, [pc, #84]	; (8006a68 <UART_SetConfig+0x118>)
 8006a12:	fba2 2303 	umull	r2, r3, r2, r3
 8006a16:	095b      	lsrs	r3, r3, #5
 8006a18:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006a1c:	4419      	add	r1, r3
 8006a1e:	68fa      	ldr	r2, [r7, #12]
 8006a20:	4613      	mov	r3, r2
 8006a22:	009b      	lsls	r3, r3, #2
 8006a24:	4413      	add	r3, r2
 8006a26:	009a      	lsls	r2, r3, #2
 8006a28:	441a      	add	r2, r3
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	685b      	ldr	r3, [r3, #4]
 8006a2e:	009b      	lsls	r3, r3, #2
 8006a30:	fbb2 f2f3 	udiv	r2, r2, r3
 8006a34:	4b0c      	ldr	r3, [pc, #48]	; (8006a68 <UART_SetConfig+0x118>)
 8006a36:	fba3 0302 	umull	r0, r3, r3, r2
 8006a3a:	095b      	lsrs	r3, r3, #5
 8006a3c:	2064      	movs	r0, #100	; 0x64
 8006a3e:	fb00 f303 	mul.w	r3, r0, r3
 8006a42:	1ad3      	subs	r3, r2, r3
 8006a44:	011b      	lsls	r3, r3, #4
 8006a46:	3332      	adds	r3, #50	; 0x32
 8006a48:	4a07      	ldr	r2, [pc, #28]	; (8006a68 <UART_SetConfig+0x118>)
 8006a4a:	fba2 2303 	umull	r2, r3, r2, r3
 8006a4e:	095b      	lsrs	r3, r3, #5
 8006a50:	f003 020f 	and.w	r2, r3, #15
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	681b      	ldr	r3, [r3, #0]
 8006a58:	440a      	add	r2, r1
 8006a5a:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8006a5c:	bf00      	nop
 8006a5e:	3710      	adds	r7, #16
 8006a60:	46bd      	mov	sp, r7
 8006a62:	bd80      	pop	{r7, pc}
 8006a64:	40013800 	.word	0x40013800
 8006a68:	51eb851f 	.word	0x51eb851f

08006a6c <__errno>:
 8006a6c:	4b01      	ldr	r3, [pc, #4]	; (8006a74 <__errno+0x8>)
 8006a6e:	6818      	ldr	r0, [r3, #0]
 8006a70:	4770      	bx	lr
 8006a72:	bf00      	nop
 8006a74:	20000010 	.word	0x20000010

08006a78 <__libc_init_array>:
 8006a78:	b570      	push	{r4, r5, r6, lr}
 8006a7a:	2600      	movs	r6, #0
 8006a7c:	4d0c      	ldr	r5, [pc, #48]	; (8006ab0 <__libc_init_array+0x38>)
 8006a7e:	4c0d      	ldr	r4, [pc, #52]	; (8006ab4 <__libc_init_array+0x3c>)
 8006a80:	1b64      	subs	r4, r4, r5
 8006a82:	10a4      	asrs	r4, r4, #2
 8006a84:	42a6      	cmp	r6, r4
 8006a86:	d109      	bne.n	8006a9c <__libc_init_array+0x24>
 8006a88:	f004 fed0 	bl	800b82c <_init>
 8006a8c:	2600      	movs	r6, #0
 8006a8e:	4d0a      	ldr	r5, [pc, #40]	; (8006ab8 <__libc_init_array+0x40>)
 8006a90:	4c0a      	ldr	r4, [pc, #40]	; (8006abc <__libc_init_array+0x44>)
 8006a92:	1b64      	subs	r4, r4, r5
 8006a94:	10a4      	asrs	r4, r4, #2
 8006a96:	42a6      	cmp	r6, r4
 8006a98:	d105      	bne.n	8006aa6 <__libc_init_array+0x2e>
 8006a9a:	bd70      	pop	{r4, r5, r6, pc}
 8006a9c:	f855 3b04 	ldr.w	r3, [r5], #4
 8006aa0:	4798      	blx	r3
 8006aa2:	3601      	adds	r6, #1
 8006aa4:	e7ee      	b.n	8006a84 <__libc_init_array+0xc>
 8006aa6:	f855 3b04 	ldr.w	r3, [r5], #4
 8006aaa:	4798      	blx	r3
 8006aac:	3601      	adds	r6, #1
 8006aae:	e7f2      	b.n	8006a96 <__libc_init_array+0x1e>
 8006ab0:	0800bdf8 	.word	0x0800bdf8
 8006ab4:	0800bdf8 	.word	0x0800bdf8
 8006ab8:	0800bdf8 	.word	0x0800bdf8
 8006abc:	0800bdfc 	.word	0x0800bdfc

08006ac0 <memset>:
 8006ac0:	4603      	mov	r3, r0
 8006ac2:	4402      	add	r2, r0
 8006ac4:	4293      	cmp	r3, r2
 8006ac6:	d100      	bne.n	8006aca <memset+0xa>
 8006ac8:	4770      	bx	lr
 8006aca:	f803 1b01 	strb.w	r1, [r3], #1
 8006ace:	e7f9      	b.n	8006ac4 <memset+0x4>

08006ad0 <__cvt>:
 8006ad0:	2b00      	cmp	r3, #0
 8006ad2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006ad6:	461f      	mov	r7, r3
 8006ad8:	bfbb      	ittet	lt
 8006ada:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 8006ade:	461f      	movlt	r7, r3
 8006ae0:	2300      	movge	r3, #0
 8006ae2:	232d      	movlt	r3, #45	; 0x2d
 8006ae4:	b088      	sub	sp, #32
 8006ae6:	4614      	mov	r4, r2
 8006ae8:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8006aea:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8006aec:	7013      	strb	r3, [r2, #0]
 8006aee:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8006af0:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 8006af4:	f023 0820 	bic.w	r8, r3, #32
 8006af8:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8006afc:	d005      	beq.n	8006b0a <__cvt+0x3a>
 8006afe:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8006b02:	d100      	bne.n	8006b06 <__cvt+0x36>
 8006b04:	3501      	adds	r5, #1
 8006b06:	2302      	movs	r3, #2
 8006b08:	e000      	b.n	8006b0c <__cvt+0x3c>
 8006b0a:	2303      	movs	r3, #3
 8006b0c:	aa07      	add	r2, sp, #28
 8006b0e:	9204      	str	r2, [sp, #16]
 8006b10:	aa06      	add	r2, sp, #24
 8006b12:	e9cd a202 	strd	sl, r2, [sp, #8]
 8006b16:	e9cd 3500 	strd	r3, r5, [sp]
 8006b1a:	4622      	mov	r2, r4
 8006b1c:	463b      	mov	r3, r7
 8006b1e:	f001 fd9b 	bl	8008658 <_dtoa_r>
 8006b22:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8006b26:	4606      	mov	r6, r0
 8006b28:	d102      	bne.n	8006b30 <__cvt+0x60>
 8006b2a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8006b2c:	07db      	lsls	r3, r3, #31
 8006b2e:	d522      	bpl.n	8006b76 <__cvt+0xa6>
 8006b30:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8006b34:	eb06 0905 	add.w	r9, r6, r5
 8006b38:	d110      	bne.n	8006b5c <__cvt+0x8c>
 8006b3a:	7833      	ldrb	r3, [r6, #0]
 8006b3c:	2b30      	cmp	r3, #48	; 0x30
 8006b3e:	d10a      	bne.n	8006b56 <__cvt+0x86>
 8006b40:	2200      	movs	r2, #0
 8006b42:	2300      	movs	r3, #0
 8006b44:	4620      	mov	r0, r4
 8006b46:	4639      	mov	r1, r7
 8006b48:	f7f9 ff2e 	bl	80009a8 <__aeabi_dcmpeq>
 8006b4c:	b918      	cbnz	r0, 8006b56 <__cvt+0x86>
 8006b4e:	f1c5 0501 	rsb	r5, r5, #1
 8006b52:	f8ca 5000 	str.w	r5, [sl]
 8006b56:	f8da 3000 	ldr.w	r3, [sl]
 8006b5a:	4499      	add	r9, r3
 8006b5c:	2200      	movs	r2, #0
 8006b5e:	2300      	movs	r3, #0
 8006b60:	4620      	mov	r0, r4
 8006b62:	4639      	mov	r1, r7
 8006b64:	f7f9 ff20 	bl	80009a8 <__aeabi_dcmpeq>
 8006b68:	b108      	cbz	r0, 8006b6e <__cvt+0x9e>
 8006b6a:	f8cd 901c 	str.w	r9, [sp, #28]
 8006b6e:	2230      	movs	r2, #48	; 0x30
 8006b70:	9b07      	ldr	r3, [sp, #28]
 8006b72:	454b      	cmp	r3, r9
 8006b74:	d307      	bcc.n	8006b86 <__cvt+0xb6>
 8006b76:	4630      	mov	r0, r6
 8006b78:	9b07      	ldr	r3, [sp, #28]
 8006b7a:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8006b7c:	1b9b      	subs	r3, r3, r6
 8006b7e:	6013      	str	r3, [r2, #0]
 8006b80:	b008      	add	sp, #32
 8006b82:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006b86:	1c59      	adds	r1, r3, #1
 8006b88:	9107      	str	r1, [sp, #28]
 8006b8a:	701a      	strb	r2, [r3, #0]
 8006b8c:	e7f0      	b.n	8006b70 <__cvt+0xa0>

08006b8e <__exponent>:
 8006b8e:	4603      	mov	r3, r0
 8006b90:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006b92:	2900      	cmp	r1, #0
 8006b94:	f803 2b02 	strb.w	r2, [r3], #2
 8006b98:	bfb6      	itet	lt
 8006b9a:	222d      	movlt	r2, #45	; 0x2d
 8006b9c:	222b      	movge	r2, #43	; 0x2b
 8006b9e:	4249      	neglt	r1, r1
 8006ba0:	2909      	cmp	r1, #9
 8006ba2:	7042      	strb	r2, [r0, #1]
 8006ba4:	dd2b      	ble.n	8006bfe <__exponent+0x70>
 8006ba6:	f10d 0407 	add.w	r4, sp, #7
 8006baa:	46a4      	mov	ip, r4
 8006bac:	270a      	movs	r7, #10
 8006bae:	fb91 f6f7 	sdiv	r6, r1, r7
 8006bb2:	460a      	mov	r2, r1
 8006bb4:	46a6      	mov	lr, r4
 8006bb6:	fb07 1516 	mls	r5, r7, r6, r1
 8006bba:	2a63      	cmp	r2, #99	; 0x63
 8006bbc:	f105 0530 	add.w	r5, r5, #48	; 0x30
 8006bc0:	4631      	mov	r1, r6
 8006bc2:	f104 34ff 	add.w	r4, r4, #4294967295
 8006bc6:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8006bca:	dcf0      	bgt.n	8006bae <__exponent+0x20>
 8006bcc:	3130      	adds	r1, #48	; 0x30
 8006bce:	f1ae 0502 	sub.w	r5, lr, #2
 8006bd2:	f804 1c01 	strb.w	r1, [r4, #-1]
 8006bd6:	4629      	mov	r1, r5
 8006bd8:	1c44      	adds	r4, r0, #1
 8006bda:	4561      	cmp	r1, ip
 8006bdc:	d30a      	bcc.n	8006bf4 <__exponent+0x66>
 8006bde:	f10d 0209 	add.w	r2, sp, #9
 8006be2:	eba2 020e 	sub.w	r2, r2, lr
 8006be6:	4565      	cmp	r5, ip
 8006be8:	bf88      	it	hi
 8006bea:	2200      	movhi	r2, #0
 8006bec:	4413      	add	r3, r2
 8006bee:	1a18      	subs	r0, r3, r0
 8006bf0:	b003      	add	sp, #12
 8006bf2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006bf4:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006bf8:	f804 2f01 	strb.w	r2, [r4, #1]!
 8006bfc:	e7ed      	b.n	8006bda <__exponent+0x4c>
 8006bfe:	2330      	movs	r3, #48	; 0x30
 8006c00:	3130      	adds	r1, #48	; 0x30
 8006c02:	7083      	strb	r3, [r0, #2]
 8006c04:	70c1      	strb	r1, [r0, #3]
 8006c06:	1d03      	adds	r3, r0, #4
 8006c08:	e7f1      	b.n	8006bee <__exponent+0x60>
	...

08006c0c <_printf_float>:
 8006c0c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006c10:	b091      	sub	sp, #68	; 0x44
 8006c12:	460c      	mov	r4, r1
 8006c14:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 8006c18:	4616      	mov	r6, r2
 8006c1a:	461f      	mov	r7, r3
 8006c1c:	4605      	mov	r5, r0
 8006c1e:	f002 ff65 	bl	8009aec <_localeconv_r>
 8006c22:	6803      	ldr	r3, [r0, #0]
 8006c24:	4618      	mov	r0, r3
 8006c26:	9309      	str	r3, [sp, #36]	; 0x24
 8006c28:	f7f9 fa92 	bl	8000150 <strlen>
 8006c2c:	2300      	movs	r3, #0
 8006c2e:	930e      	str	r3, [sp, #56]	; 0x38
 8006c30:	f8d8 3000 	ldr.w	r3, [r8]
 8006c34:	900a      	str	r0, [sp, #40]	; 0x28
 8006c36:	3307      	adds	r3, #7
 8006c38:	f023 0307 	bic.w	r3, r3, #7
 8006c3c:	f103 0208 	add.w	r2, r3, #8
 8006c40:	f894 9018 	ldrb.w	r9, [r4, #24]
 8006c44:	f8d4 b000 	ldr.w	fp, [r4]
 8006c48:	f8c8 2000 	str.w	r2, [r8]
 8006c4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c50:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8006c54:	e9d4 8a12 	ldrd	r8, sl, [r4, #72]	; 0x48
 8006c58:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
 8006c5c:	930b      	str	r3, [sp, #44]	; 0x2c
 8006c5e:	f04f 32ff 	mov.w	r2, #4294967295
 8006c62:	4640      	mov	r0, r8
 8006c64:	4b9c      	ldr	r3, [pc, #624]	; (8006ed8 <_printf_float+0x2cc>)
 8006c66:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8006c68:	f7f9 fed0 	bl	8000a0c <__aeabi_dcmpun>
 8006c6c:	bb70      	cbnz	r0, 8006ccc <_printf_float+0xc0>
 8006c6e:	f04f 32ff 	mov.w	r2, #4294967295
 8006c72:	4640      	mov	r0, r8
 8006c74:	4b98      	ldr	r3, [pc, #608]	; (8006ed8 <_printf_float+0x2cc>)
 8006c76:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8006c78:	f7f9 feaa 	bl	80009d0 <__aeabi_dcmple>
 8006c7c:	bb30      	cbnz	r0, 8006ccc <_printf_float+0xc0>
 8006c7e:	2200      	movs	r2, #0
 8006c80:	2300      	movs	r3, #0
 8006c82:	4640      	mov	r0, r8
 8006c84:	4651      	mov	r1, sl
 8006c86:	f7f9 fe99 	bl	80009bc <__aeabi_dcmplt>
 8006c8a:	b110      	cbz	r0, 8006c92 <_printf_float+0x86>
 8006c8c:	232d      	movs	r3, #45	; 0x2d
 8006c8e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006c92:	4b92      	ldr	r3, [pc, #584]	; (8006edc <_printf_float+0x2d0>)
 8006c94:	4892      	ldr	r0, [pc, #584]	; (8006ee0 <_printf_float+0x2d4>)
 8006c96:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 8006c9a:	bf94      	ite	ls
 8006c9c:	4698      	movls	r8, r3
 8006c9e:	4680      	movhi	r8, r0
 8006ca0:	2303      	movs	r3, #3
 8006ca2:	f04f 0a00 	mov.w	sl, #0
 8006ca6:	6123      	str	r3, [r4, #16]
 8006ca8:	f02b 0304 	bic.w	r3, fp, #4
 8006cac:	6023      	str	r3, [r4, #0]
 8006cae:	4633      	mov	r3, r6
 8006cb0:	4621      	mov	r1, r4
 8006cb2:	4628      	mov	r0, r5
 8006cb4:	9700      	str	r7, [sp, #0]
 8006cb6:	aa0f      	add	r2, sp, #60	; 0x3c
 8006cb8:	f000 f9d4 	bl	8007064 <_printf_common>
 8006cbc:	3001      	adds	r0, #1
 8006cbe:	f040 8090 	bne.w	8006de2 <_printf_float+0x1d6>
 8006cc2:	f04f 30ff 	mov.w	r0, #4294967295
 8006cc6:	b011      	add	sp, #68	; 0x44
 8006cc8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006ccc:	4642      	mov	r2, r8
 8006cce:	4653      	mov	r3, sl
 8006cd0:	4640      	mov	r0, r8
 8006cd2:	4651      	mov	r1, sl
 8006cd4:	f7f9 fe9a 	bl	8000a0c <__aeabi_dcmpun>
 8006cd8:	b148      	cbz	r0, 8006cee <_printf_float+0xe2>
 8006cda:	f1ba 0f00 	cmp.w	sl, #0
 8006cde:	bfb8      	it	lt
 8006ce0:	232d      	movlt	r3, #45	; 0x2d
 8006ce2:	4880      	ldr	r0, [pc, #512]	; (8006ee4 <_printf_float+0x2d8>)
 8006ce4:	bfb8      	it	lt
 8006ce6:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8006cea:	4b7f      	ldr	r3, [pc, #508]	; (8006ee8 <_printf_float+0x2dc>)
 8006cec:	e7d3      	b.n	8006c96 <_printf_float+0x8a>
 8006cee:	6863      	ldr	r3, [r4, #4]
 8006cf0:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 8006cf4:	1c5a      	adds	r2, r3, #1
 8006cf6:	d142      	bne.n	8006d7e <_printf_float+0x172>
 8006cf8:	2306      	movs	r3, #6
 8006cfa:	6063      	str	r3, [r4, #4]
 8006cfc:	2200      	movs	r2, #0
 8006cfe:	9206      	str	r2, [sp, #24]
 8006d00:	aa0e      	add	r2, sp, #56	; 0x38
 8006d02:	e9cd 9204 	strd	r9, r2, [sp, #16]
 8006d06:	aa0d      	add	r2, sp, #52	; 0x34
 8006d08:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 8006d0c:	9203      	str	r2, [sp, #12]
 8006d0e:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 8006d12:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8006d16:	6023      	str	r3, [r4, #0]
 8006d18:	6863      	ldr	r3, [r4, #4]
 8006d1a:	4642      	mov	r2, r8
 8006d1c:	9300      	str	r3, [sp, #0]
 8006d1e:	4628      	mov	r0, r5
 8006d20:	4653      	mov	r3, sl
 8006d22:	910b      	str	r1, [sp, #44]	; 0x2c
 8006d24:	f7ff fed4 	bl	8006ad0 <__cvt>
 8006d28:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8006d2a:	4680      	mov	r8, r0
 8006d2c:	2947      	cmp	r1, #71	; 0x47
 8006d2e:	990d      	ldr	r1, [sp, #52]	; 0x34
 8006d30:	d108      	bne.n	8006d44 <_printf_float+0x138>
 8006d32:	1cc8      	adds	r0, r1, #3
 8006d34:	db02      	blt.n	8006d3c <_printf_float+0x130>
 8006d36:	6863      	ldr	r3, [r4, #4]
 8006d38:	4299      	cmp	r1, r3
 8006d3a:	dd40      	ble.n	8006dbe <_printf_float+0x1b2>
 8006d3c:	f1a9 0902 	sub.w	r9, r9, #2
 8006d40:	fa5f f989 	uxtb.w	r9, r9
 8006d44:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8006d48:	d81f      	bhi.n	8006d8a <_printf_float+0x17e>
 8006d4a:	464a      	mov	r2, r9
 8006d4c:	3901      	subs	r1, #1
 8006d4e:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8006d52:	910d      	str	r1, [sp, #52]	; 0x34
 8006d54:	f7ff ff1b 	bl	8006b8e <__exponent>
 8006d58:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006d5a:	4682      	mov	sl, r0
 8006d5c:	1813      	adds	r3, r2, r0
 8006d5e:	2a01      	cmp	r2, #1
 8006d60:	6123      	str	r3, [r4, #16]
 8006d62:	dc02      	bgt.n	8006d6a <_printf_float+0x15e>
 8006d64:	6822      	ldr	r2, [r4, #0]
 8006d66:	07d2      	lsls	r2, r2, #31
 8006d68:	d501      	bpl.n	8006d6e <_printf_float+0x162>
 8006d6a:	3301      	adds	r3, #1
 8006d6c:	6123      	str	r3, [r4, #16]
 8006d6e:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 8006d72:	2b00      	cmp	r3, #0
 8006d74:	d09b      	beq.n	8006cae <_printf_float+0xa2>
 8006d76:	232d      	movs	r3, #45	; 0x2d
 8006d78:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006d7c:	e797      	b.n	8006cae <_printf_float+0xa2>
 8006d7e:	2947      	cmp	r1, #71	; 0x47
 8006d80:	d1bc      	bne.n	8006cfc <_printf_float+0xf0>
 8006d82:	2b00      	cmp	r3, #0
 8006d84:	d1ba      	bne.n	8006cfc <_printf_float+0xf0>
 8006d86:	2301      	movs	r3, #1
 8006d88:	e7b7      	b.n	8006cfa <_printf_float+0xee>
 8006d8a:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 8006d8e:	d118      	bne.n	8006dc2 <_printf_float+0x1b6>
 8006d90:	2900      	cmp	r1, #0
 8006d92:	6863      	ldr	r3, [r4, #4]
 8006d94:	dd0b      	ble.n	8006dae <_printf_float+0x1a2>
 8006d96:	6121      	str	r1, [r4, #16]
 8006d98:	b913      	cbnz	r3, 8006da0 <_printf_float+0x194>
 8006d9a:	6822      	ldr	r2, [r4, #0]
 8006d9c:	07d0      	lsls	r0, r2, #31
 8006d9e:	d502      	bpl.n	8006da6 <_printf_float+0x19a>
 8006da0:	3301      	adds	r3, #1
 8006da2:	440b      	add	r3, r1
 8006da4:	6123      	str	r3, [r4, #16]
 8006da6:	f04f 0a00 	mov.w	sl, #0
 8006daa:	65a1      	str	r1, [r4, #88]	; 0x58
 8006dac:	e7df      	b.n	8006d6e <_printf_float+0x162>
 8006dae:	b913      	cbnz	r3, 8006db6 <_printf_float+0x1aa>
 8006db0:	6822      	ldr	r2, [r4, #0]
 8006db2:	07d2      	lsls	r2, r2, #31
 8006db4:	d501      	bpl.n	8006dba <_printf_float+0x1ae>
 8006db6:	3302      	adds	r3, #2
 8006db8:	e7f4      	b.n	8006da4 <_printf_float+0x198>
 8006dba:	2301      	movs	r3, #1
 8006dbc:	e7f2      	b.n	8006da4 <_printf_float+0x198>
 8006dbe:	f04f 0967 	mov.w	r9, #103	; 0x67
 8006dc2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006dc4:	4299      	cmp	r1, r3
 8006dc6:	db05      	blt.n	8006dd4 <_printf_float+0x1c8>
 8006dc8:	6823      	ldr	r3, [r4, #0]
 8006dca:	6121      	str	r1, [r4, #16]
 8006dcc:	07d8      	lsls	r0, r3, #31
 8006dce:	d5ea      	bpl.n	8006da6 <_printf_float+0x19a>
 8006dd0:	1c4b      	adds	r3, r1, #1
 8006dd2:	e7e7      	b.n	8006da4 <_printf_float+0x198>
 8006dd4:	2900      	cmp	r1, #0
 8006dd6:	bfcc      	ite	gt
 8006dd8:	2201      	movgt	r2, #1
 8006dda:	f1c1 0202 	rsble	r2, r1, #2
 8006dde:	4413      	add	r3, r2
 8006de0:	e7e0      	b.n	8006da4 <_printf_float+0x198>
 8006de2:	6823      	ldr	r3, [r4, #0]
 8006de4:	055a      	lsls	r2, r3, #21
 8006de6:	d407      	bmi.n	8006df8 <_printf_float+0x1ec>
 8006de8:	6923      	ldr	r3, [r4, #16]
 8006dea:	4642      	mov	r2, r8
 8006dec:	4631      	mov	r1, r6
 8006dee:	4628      	mov	r0, r5
 8006df0:	47b8      	blx	r7
 8006df2:	3001      	adds	r0, #1
 8006df4:	d12b      	bne.n	8006e4e <_printf_float+0x242>
 8006df6:	e764      	b.n	8006cc2 <_printf_float+0xb6>
 8006df8:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8006dfc:	f240 80dd 	bls.w	8006fba <_printf_float+0x3ae>
 8006e00:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8006e04:	2200      	movs	r2, #0
 8006e06:	2300      	movs	r3, #0
 8006e08:	f7f9 fdce 	bl	80009a8 <__aeabi_dcmpeq>
 8006e0c:	2800      	cmp	r0, #0
 8006e0e:	d033      	beq.n	8006e78 <_printf_float+0x26c>
 8006e10:	2301      	movs	r3, #1
 8006e12:	4631      	mov	r1, r6
 8006e14:	4628      	mov	r0, r5
 8006e16:	4a35      	ldr	r2, [pc, #212]	; (8006eec <_printf_float+0x2e0>)
 8006e18:	47b8      	blx	r7
 8006e1a:	3001      	adds	r0, #1
 8006e1c:	f43f af51 	beq.w	8006cc2 <_printf_float+0xb6>
 8006e20:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8006e24:	429a      	cmp	r2, r3
 8006e26:	db02      	blt.n	8006e2e <_printf_float+0x222>
 8006e28:	6823      	ldr	r3, [r4, #0]
 8006e2a:	07d8      	lsls	r0, r3, #31
 8006e2c:	d50f      	bpl.n	8006e4e <_printf_float+0x242>
 8006e2e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006e32:	4631      	mov	r1, r6
 8006e34:	4628      	mov	r0, r5
 8006e36:	47b8      	blx	r7
 8006e38:	3001      	adds	r0, #1
 8006e3a:	f43f af42 	beq.w	8006cc2 <_printf_float+0xb6>
 8006e3e:	f04f 0800 	mov.w	r8, #0
 8006e42:	f104 091a 	add.w	r9, r4, #26
 8006e46:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006e48:	3b01      	subs	r3, #1
 8006e4a:	4543      	cmp	r3, r8
 8006e4c:	dc09      	bgt.n	8006e62 <_printf_float+0x256>
 8006e4e:	6823      	ldr	r3, [r4, #0]
 8006e50:	079b      	lsls	r3, r3, #30
 8006e52:	f100 8102 	bmi.w	800705a <_printf_float+0x44e>
 8006e56:	68e0      	ldr	r0, [r4, #12]
 8006e58:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8006e5a:	4298      	cmp	r0, r3
 8006e5c:	bfb8      	it	lt
 8006e5e:	4618      	movlt	r0, r3
 8006e60:	e731      	b.n	8006cc6 <_printf_float+0xba>
 8006e62:	2301      	movs	r3, #1
 8006e64:	464a      	mov	r2, r9
 8006e66:	4631      	mov	r1, r6
 8006e68:	4628      	mov	r0, r5
 8006e6a:	47b8      	blx	r7
 8006e6c:	3001      	adds	r0, #1
 8006e6e:	f43f af28 	beq.w	8006cc2 <_printf_float+0xb6>
 8006e72:	f108 0801 	add.w	r8, r8, #1
 8006e76:	e7e6      	b.n	8006e46 <_printf_float+0x23a>
 8006e78:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006e7a:	2b00      	cmp	r3, #0
 8006e7c:	dc38      	bgt.n	8006ef0 <_printf_float+0x2e4>
 8006e7e:	2301      	movs	r3, #1
 8006e80:	4631      	mov	r1, r6
 8006e82:	4628      	mov	r0, r5
 8006e84:	4a19      	ldr	r2, [pc, #100]	; (8006eec <_printf_float+0x2e0>)
 8006e86:	47b8      	blx	r7
 8006e88:	3001      	adds	r0, #1
 8006e8a:	f43f af1a 	beq.w	8006cc2 <_printf_float+0xb6>
 8006e8e:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8006e92:	4313      	orrs	r3, r2
 8006e94:	d102      	bne.n	8006e9c <_printf_float+0x290>
 8006e96:	6823      	ldr	r3, [r4, #0]
 8006e98:	07d9      	lsls	r1, r3, #31
 8006e9a:	d5d8      	bpl.n	8006e4e <_printf_float+0x242>
 8006e9c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006ea0:	4631      	mov	r1, r6
 8006ea2:	4628      	mov	r0, r5
 8006ea4:	47b8      	blx	r7
 8006ea6:	3001      	adds	r0, #1
 8006ea8:	f43f af0b 	beq.w	8006cc2 <_printf_float+0xb6>
 8006eac:	f04f 0900 	mov.w	r9, #0
 8006eb0:	f104 0a1a 	add.w	sl, r4, #26
 8006eb4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006eb6:	425b      	negs	r3, r3
 8006eb8:	454b      	cmp	r3, r9
 8006eba:	dc01      	bgt.n	8006ec0 <_printf_float+0x2b4>
 8006ebc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006ebe:	e794      	b.n	8006dea <_printf_float+0x1de>
 8006ec0:	2301      	movs	r3, #1
 8006ec2:	4652      	mov	r2, sl
 8006ec4:	4631      	mov	r1, r6
 8006ec6:	4628      	mov	r0, r5
 8006ec8:	47b8      	blx	r7
 8006eca:	3001      	adds	r0, #1
 8006ecc:	f43f aef9 	beq.w	8006cc2 <_printf_float+0xb6>
 8006ed0:	f109 0901 	add.w	r9, r9, #1
 8006ed4:	e7ee      	b.n	8006eb4 <_printf_float+0x2a8>
 8006ed6:	bf00      	nop
 8006ed8:	7fefffff 	.word	0x7fefffff
 8006edc:	0800b90c 	.word	0x0800b90c
 8006ee0:	0800b910 	.word	0x0800b910
 8006ee4:	0800b918 	.word	0x0800b918
 8006ee8:	0800b914 	.word	0x0800b914
 8006eec:	0800b91c 	.word	0x0800b91c
 8006ef0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006ef2:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8006ef4:	429a      	cmp	r2, r3
 8006ef6:	bfa8      	it	ge
 8006ef8:	461a      	movge	r2, r3
 8006efa:	2a00      	cmp	r2, #0
 8006efc:	4691      	mov	r9, r2
 8006efe:	dc37      	bgt.n	8006f70 <_printf_float+0x364>
 8006f00:	f04f 0b00 	mov.w	fp, #0
 8006f04:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006f08:	f104 021a 	add.w	r2, r4, #26
 8006f0c:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8006f10:	ebaa 0309 	sub.w	r3, sl, r9
 8006f14:	455b      	cmp	r3, fp
 8006f16:	dc33      	bgt.n	8006f80 <_printf_float+0x374>
 8006f18:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8006f1c:	429a      	cmp	r2, r3
 8006f1e:	db3b      	blt.n	8006f98 <_printf_float+0x38c>
 8006f20:	6823      	ldr	r3, [r4, #0]
 8006f22:	07da      	lsls	r2, r3, #31
 8006f24:	d438      	bmi.n	8006f98 <_printf_float+0x38c>
 8006f26:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006f28:	990d      	ldr	r1, [sp, #52]	; 0x34
 8006f2a:	eba3 020a 	sub.w	r2, r3, sl
 8006f2e:	eba3 0901 	sub.w	r9, r3, r1
 8006f32:	4591      	cmp	r9, r2
 8006f34:	bfa8      	it	ge
 8006f36:	4691      	movge	r9, r2
 8006f38:	f1b9 0f00 	cmp.w	r9, #0
 8006f3c:	dc34      	bgt.n	8006fa8 <_printf_float+0x39c>
 8006f3e:	f04f 0800 	mov.w	r8, #0
 8006f42:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006f46:	f104 0a1a 	add.w	sl, r4, #26
 8006f4a:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8006f4e:	1a9b      	subs	r3, r3, r2
 8006f50:	eba3 0309 	sub.w	r3, r3, r9
 8006f54:	4543      	cmp	r3, r8
 8006f56:	f77f af7a 	ble.w	8006e4e <_printf_float+0x242>
 8006f5a:	2301      	movs	r3, #1
 8006f5c:	4652      	mov	r2, sl
 8006f5e:	4631      	mov	r1, r6
 8006f60:	4628      	mov	r0, r5
 8006f62:	47b8      	blx	r7
 8006f64:	3001      	adds	r0, #1
 8006f66:	f43f aeac 	beq.w	8006cc2 <_printf_float+0xb6>
 8006f6a:	f108 0801 	add.w	r8, r8, #1
 8006f6e:	e7ec      	b.n	8006f4a <_printf_float+0x33e>
 8006f70:	4613      	mov	r3, r2
 8006f72:	4631      	mov	r1, r6
 8006f74:	4642      	mov	r2, r8
 8006f76:	4628      	mov	r0, r5
 8006f78:	47b8      	blx	r7
 8006f7a:	3001      	adds	r0, #1
 8006f7c:	d1c0      	bne.n	8006f00 <_printf_float+0x2f4>
 8006f7e:	e6a0      	b.n	8006cc2 <_printf_float+0xb6>
 8006f80:	2301      	movs	r3, #1
 8006f82:	4631      	mov	r1, r6
 8006f84:	4628      	mov	r0, r5
 8006f86:	920b      	str	r2, [sp, #44]	; 0x2c
 8006f88:	47b8      	blx	r7
 8006f8a:	3001      	adds	r0, #1
 8006f8c:	f43f ae99 	beq.w	8006cc2 <_printf_float+0xb6>
 8006f90:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8006f92:	f10b 0b01 	add.w	fp, fp, #1
 8006f96:	e7b9      	b.n	8006f0c <_printf_float+0x300>
 8006f98:	4631      	mov	r1, r6
 8006f9a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006f9e:	4628      	mov	r0, r5
 8006fa0:	47b8      	blx	r7
 8006fa2:	3001      	adds	r0, #1
 8006fa4:	d1bf      	bne.n	8006f26 <_printf_float+0x31a>
 8006fa6:	e68c      	b.n	8006cc2 <_printf_float+0xb6>
 8006fa8:	464b      	mov	r3, r9
 8006faa:	4631      	mov	r1, r6
 8006fac:	4628      	mov	r0, r5
 8006fae:	eb08 020a 	add.w	r2, r8, sl
 8006fb2:	47b8      	blx	r7
 8006fb4:	3001      	adds	r0, #1
 8006fb6:	d1c2      	bne.n	8006f3e <_printf_float+0x332>
 8006fb8:	e683      	b.n	8006cc2 <_printf_float+0xb6>
 8006fba:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006fbc:	2a01      	cmp	r2, #1
 8006fbe:	dc01      	bgt.n	8006fc4 <_printf_float+0x3b8>
 8006fc0:	07db      	lsls	r3, r3, #31
 8006fc2:	d537      	bpl.n	8007034 <_printf_float+0x428>
 8006fc4:	2301      	movs	r3, #1
 8006fc6:	4642      	mov	r2, r8
 8006fc8:	4631      	mov	r1, r6
 8006fca:	4628      	mov	r0, r5
 8006fcc:	47b8      	blx	r7
 8006fce:	3001      	adds	r0, #1
 8006fd0:	f43f ae77 	beq.w	8006cc2 <_printf_float+0xb6>
 8006fd4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006fd8:	4631      	mov	r1, r6
 8006fda:	4628      	mov	r0, r5
 8006fdc:	47b8      	blx	r7
 8006fde:	3001      	adds	r0, #1
 8006fe0:	f43f ae6f 	beq.w	8006cc2 <_printf_float+0xb6>
 8006fe4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8006fe8:	2200      	movs	r2, #0
 8006fea:	2300      	movs	r3, #0
 8006fec:	f7f9 fcdc 	bl	80009a8 <__aeabi_dcmpeq>
 8006ff0:	b9d8      	cbnz	r0, 800702a <_printf_float+0x41e>
 8006ff2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006ff4:	f108 0201 	add.w	r2, r8, #1
 8006ff8:	3b01      	subs	r3, #1
 8006ffa:	4631      	mov	r1, r6
 8006ffc:	4628      	mov	r0, r5
 8006ffe:	47b8      	blx	r7
 8007000:	3001      	adds	r0, #1
 8007002:	d10e      	bne.n	8007022 <_printf_float+0x416>
 8007004:	e65d      	b.n	8006cc2 <_printf_float+0xb6>
 8007006:	2301      	movs	r3, #1
 8007008:	464a      	mov	r2, r9
 800700a:	4631      	mov	r1, r6
 800700c:	4628      	mov	r0, r5
 800700e:	47b8      	blx	r7
 8007010:	3001      	adds	r0, #1
 8007012:	f43f ae56 	beq.w	8006cc2 <_printf_float+0xb6>
 8007016:	f108 0801 	add.w	r8, r8, #1
 800701a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800701c:	3b01      	subs	r3, #1
 800701e:	4543      	cmp	r3, r8
 8007020:	dcf1      	bgt.n	8007006 <_printf_float+0x3fa>
 8007022:	4653      	mov	r3, sl
 8007024:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8007028:	e6e0      	b.n	8006dec <_printf_float+0x1e0>
 800702a:	f04f 0800 	mov.w	r8, #0
 800702e:	f104 091a 	add.w	r9, r4, #26
 8007032:	e7f2      	b.n	800701a <_printf_float+0x40e>
 8007034:	2301      	movs	r3, #1
 8007036:	4642      	mov	r2, r8
 8007038:	e7df      	b.n	8006ffa <_printf_float+0x3ee>
 800703a:	2301      	movs	r3, #1
 800703c:	464a      	mov	r2, r9
 800703e:	4631      	mov	r1, r6
 8007040:	4628      	mov	r0, r5
 8007042:	47b8      	blx	r7
 8007044:	3001      	adds	r0, #1
 8007046:	f43f ae3c 	beq.w	8006cc2 <_printf_float+0xb6>
 800704a:	f108 0801 	add.w	r8, r8, #1
 800704e:	68e3      	ldr	r3, [r4, #12]
 8007050:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8007052:	1a5b      	subs	r3, r3, r1
 8007054:	4543      	cmp	r3, r8
 8007056:	dcf0      	bgt.n	800703a <_printf_float+0x42e>
 8007058:	e6fd      	b.n	8006e56 <_printf_float+0x24a>
 800705a:	f04f 0800 	mov.w	r8, #0
 800705e:	f104 0919 	add.w	r9, r4, #25
 8007062:	e7f4      	b.n	800704e <_printf_float+0x442>

08007064 <_printf_common>:
 8007064:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007068:	4616      	mov	r6, r2
 800706a:	4699      	mov	r9, r3
 800706c:	688a      	ldr	r2, [r1, #8]
 800706e:	690b      	ldr	r3, [r1, #16]
 8007070:	4607      	mov	r7, r0
 8007072:	4293      	cmp	r3, r2
 8007074:	bfb8      	it	lt
 8007076:	4613      	movlt	r3, r2
 8007078:	6033      	str	r3, [r6, #0]
 800707a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800707e:	460c      	mov	r4, r1
 8007080:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007084:	b10a      	cbz	r2, 800708a <_printf_common+0x26>
 8007086:	3301      	adds	r3, #1
 8007088:	6033      	str	r3, [r6, #0]
 800708a:	6823      	ldr	r3, [r4, #0]
 800708c:	0699      	lsls	r1, r3, #26
 800708e:	bf42      	ittt	mi
 8007090:	6833      	ldrmi	r3, [r6, #0]
 8007092:	3302      	addmi	r3, #2
 8007094:	6033      	strmi	r3, [r6, #0]
 8007096:	6825      	ldr	r5, [r4, #0]
 8007098:	f015 0506 	ands.w	r5, r5, #6
 800709c:	d106      	bne.n	80070ac <_printf_common+0x48>
 800709e:	f104 0a19 	add.w	sl, r4, #25
 80070a2:	68e3      	ldr	r3, [r4, #12]
 80070a4:	6832      	ldr	r2, [r6, #0]
 80070a6:	1a9b      	subs	r3, r3, r2
 80070a8:	42ab      	cmp	r3, r5
 80070aa:	dc28      	bgt.n	80070fe <_printf_common+0x9a>
 80070ac:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80070b0:	1e13      	subs	r3, r2, #0
 80070b2:	6822      	ldr	r2, [r4, #0]
 80070b4:	bf18      	it	ne
 80070b6:	2301      	movne	r3, #1
 80070b8:	0692      	lsls	r2, r2, #26
 80070ba:	d42d      	bmi.n	8007118 <_printf_common+0xb4>
 80070bc:	4649      	mov	r1, r9
 80070be:	4638      	mov	r0, r7
 80070c0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80070c4:	47c0      	blx	r8
 80070c6:	3001      	adds	r0, #1
 80070c8:	d020      	beq.n	800710c <_printf_common+0xa8>
 80070ca:	6823      	ldr	r3, [r4, #0]
 80070cc:	68e5      	ldr	r5, [r4, #12]
 80070ce:	f003 0306 	and.w	r3, r3, #6
 80070d2:	2b04      	cmp	r3, #4
 80070d4:	bf18      	it	ne
 80070d6:	2500      	movne	r5, #0
 80070d8:	6832      	ldr	r2, [r6, #0]
 80070da:	f04f 0600 	mov.w	r6, #0
 80070de:	68a3      	ldr	r3, [r4, #8]
 80070e0:	bf08      	it	eq
 80070e2:	1aad      	subeq	r5, r5, r2
 80070e4:	6922      	ldr	r2, [r4, #16]
 80070e6:	bf08      	it	eq
 80070e8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80070ec:	4293      	cmp	r3, r2
 80070ee:	bfc4      	itt	gt
 80070f0:	1a9b      	subgt	r3, r3, r2
 80070f2:	18ed      	addgt	r5, r5, r3
 80070f4:	341a      	adds	r4, #26
 80070f6:	42b5      	cmp	r5, r6
 80070f8:	d11a      	bne.n	8007130 <_printf_common+0xcc>
 80070fa:	2000      	movs	r0, #0
 80070fc:	e008      	b.n	8007110 <_printf_common+0xac>
 80070fe:	2301      	movs	r3, #1
 8007100:	4652      	mov	r2, sl
 8007102:	4649      	mov	r1, r9
 8007104:	4638      	mov	r0, r7
 8007106:	47c0      	blx	r8
 8007108:	3001      	adds	r0, #1
 800710a:	d103      	bne.n	8007114 <_printf_common+0xb0>
 800710c:	f04f 30ff 	mov.w	r0, #4294967295
 8007110:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007114:	3501      	adds	r5, #1
 8007116:	e7c4      	b.n	80070a2 <_printf_common+0x3e>
 8007118:	2030      	movs	r0, #48	; 0x30
 800711a:	18e1      	adds	r1, r4, r3
 800711c:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8007120:	1c5a      	adds	r2, r3, #1
 8007122:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007126:	4422      	add	r2, r4
 8007128:	3302      	adds	r3, #2
 800712a:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800712e:	e7c5      	b.n	80070bc <_printf_common+0x58>
 8007130:	2301      	movs	r3, #1
 8007132:	4622      	mov	r2, r4
 8007134:	4649      	mov	r1, r9
 8007136:	4638      	mov	r0, r7
 8007138:	47c0      	blx	r8
 800713a:	3001      	adds	r0, #1
 800713c:	d0e6      	beq.n	800710c <_printf_common+0xa8>
 800713e:	3601      	adds	r6, #1
 8007140:	e7d9      	b.n	80070f6 <_printf_common+0x92>
	...

08007144 <_printf_i>:
 8007144:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007148:	7e0f      	ldrb	r7, [r1, #24]
 800714a:	4691      	mov	r9, r2
 800714c:	2f78      	cmp	r7, #120	; 0x78
 800714e:	4680      	mov	r8, r0
 8007150:	460c      	mov	r4, r1
 8007152:	469a      	mov	sl, r3
 8007154:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8007156:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800715a:	d807      	bhi.n	800716c <_printf_i+0x28>
 800715c:	2f62      	cmp	r7, #98	; 0x62
 800715e:	d80a      	bhi.n	8007176 <_printf_i+0x32>
 8007160:	2f00      	cmp	r7, #0
 8007162:	f000 80d9 	beq.w	8007318 <_printf_i+0x1d4>
 8007166:	2f58      	cmp	r7, #88	; 0x58
 8007168:	f000 80a4 	beq.w	80072b4 <_printf_i+0x170>
 800716c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007170:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8007174:	e03a      	b.n	80071ec <_printf_i+0xa8>
 8007176:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800717a:	2b15      	cmp	r3, #21
 800717c:	d8f6      	bhi.n	800716c <_printf_i+0x28>
 800717e:	a101      	add	r1, pc, #4	; (adr r1, 8007184 <_printf_i+0x40>)
 8007180:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007184:	080071dd 	.word	0x080071dd
 8007188:	080071f1 	.word	0x080071f1
 800718c:	0800716d 	.word	0x0800716d
 8007190:	0800716d 	.word	0x0800716d
 8007194:	0800716d 	.word	0x0800716d
 8007198:	0800716d 	.word	0x0800716d
 800719c:	080071f1 	.word	0x080071f1
 80071a0:	0800716d 	.word	0x0800716d
 80071a4:	0800716d 	.word	0x0800716d
 80071a8:	0800716d 	.word	0x0800716d
 80071ac:	0800716d 	.word	0x0800716d
 80071b0:	080072ff 	.word	0x080072ff
 80071b4:	08007221 	.word	0x08007221
 80071b8:	080072e1 	.word	0x080072e1
 80071bc:	0800716d 	.word	0x0800716d
 80071c0:	0800716d 	.word	0x0800716d
 80071c4:	08007321 	.word	0x08007321
 80071c8:	0800716d 	.word	0x0800716d
 80071cc:	08007221 	.word	0x08007221
 80071d0:	0800716d 	.word	0x0800716d
 80071d4:	0800716d 	.word	0x0800716d
 80071d8:	080072e9 	.word	0x080072e9
 80071dc:	682b      	ldr	r3, [r5, #0]
 80071de:	1d1a      	adds	r2, r3, #4
 80071e0:	681b      	ldr	r3, [r3, #0]
 80071e2:	602a      	str	r2, [r5, #0]
 80071e4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80071e8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80071ec:	2301      	movs	r3, #1
 80071ee:	e0a4      	b.n	800733a <_printf_i+0x1f6>
 80071f0:	6820      	ldr	r0, [r4, #0]
 80071f2:	6829      	ldr	r1, [r5, #0]
 80071f4:	0606      	lsls	r6, r0, #24
 80071f6:	f101 0304 	add.w	r3, r1, #4
 80071fa:	d50a      	bpl.n	8007212 <_printf_i+0xce>
 80071fc:	680e      	ldr	r6, [r1, #0]
 80071fe:	602b      	str	r3, [r5, #0]
 8007200:	2e00      	cmp	r6, #0
 8007202:	da03      	bge.n	800720c <_printf_i+0xc8>
 8007204:	232d      	movs	r3, #45	; 0x2d
 8007206:	4276      	negs	r6, r6
 8007208:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800720c:	230a      	movs	r3, #10
 800720e:	485e      	ldr	r0, [pc, #376]	; (8007388 <_printf_i+0x244>)
 8007210:	e019      	b.n	8007246 <_printf_i+0x102>
 8007212:	680e      	ldr	r6, [r1, #0]
 8007214:	f010 0f40 	tst.w	r0, #64	; 0x40
 8007218:	602b      	str	r3, [r5, #0]
 800721a:	bf18      	it	ne
 800721c:	b236      	sxthne	r6, r6
 800721e:	e7ef      	b.n	8007200 <_printf_i+0xbc>
 8007220:	682b      	ldr	r3, [r5, #0]
 8007222:	6820      	ldr	r0, [r4, #0]
 8007224:	1d19      	adds	r1, r3, #4
 8007226:	6029      	str	r1, [r5, #0]
 8007228:	0601      	lsls	r1, r0, #24
 800722a:	d501      	bpl.n	8007230 <_printf_i+0xec>
 800722c:	681e      	ldr	r6, [r3, #0]
 800722e:	e002      	b.n	8007236 <_printf_i+0xf2>
 8007230:	0646      	lsls	r6, r0, #25
 8007232:	d5fb      	bpl.n	800722c <_printf_i+0xe8>
 8007234:	881e      	ldrh	r6, [r3, #0]
 8007236:	2f6f      	cmp	r7, #111	; 0x6f
 8007238:	bf0c      	ite	eq
 800723a:	2308      	moveq	r3, #8
 800723c:	230a      	movne	r3, #10
 800723e:	4852      	ldr	r0, [pc, #328]	; (8007388 <_printf_i+0x244>)
 8007240:	2100      	movs	r1, #0
 8007242:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8007246:	6865      	ldr	r5, [r4, #4]
 8007248:	2d00      	cmp	r5, #0
 800724a:	bfa8      	it	ge
 800724c:	6821      	ldrge	r1, [r4, #0]
 800724e:	60a5      	str	r5, [r4, #8]
 8007250:	bfa4      	itt	ge
 8007252:	f021 0104 	bicge.w	r1, r1, #4
 8007256:	6021      	strge	r1, [r4, #0]
 8007258:	b90e      	cbnz	r6, 800725e <_printf_i+0x11a>
 800725a:	2d00      	cmp	r5, #0
 800725c:	d04d      	beq.n	80072fa <_printf_i+0x1b6>
 800725e:	4615      	mov	r5, r2
 8007260:	fbb6 f1f3 	udiv	r1, r6, r3
 8007264:	fb03 6711 	mls	r7, r3, r1, r6
 8007268:	5dc7      	ldrb	r7, [r0, r7]
 800726a:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800726e:	4637      	mov	r7, r6
 8007270:	42bb      	cmp	r3, r7
 8007272:	460e      	mov	r6, r1
 8007274:	d9f4      	bls.n	8007260 <_printf_i+0x11c>
 8007276:	2b08      	cmp	r3, #8
 8007278:	d10b      	bne.n	8007292 <_printf_i+0x14e>
 800727a:	6823      	ldr	r3, [r4, #0]
 800727c:	07de      	lsls	r6, r3, #31
 800727e:	d508      	bpl.n	8007292 <_printf_i+0x14e>
 8007280:	6923      	ldr	r3, [r4, #16]
 8007282:	6861      	ldr	r1, [r4, #4]
 8007284:	4299      	cmp	r1, r3
 8007286:	bfde      	ittt	le
 8007288:	2330      	movle	r3, #48	; 0x30
 800728a:	f805 3c01 	strble.w	r3, [r5, #-1]
 800728e:	f105 35ff 	addle.w	r5, r5, #4294967295
 8007292:	1b52      	subs	r2, r2, r5
 8007294:	6122      	str	r2, [r4, #16]
 8007296:	464b      	mov	r3, r9
 8007298:	4621      	mov	r1, r4
 800729a:	4640      	mov	r0, r8
 800729c:	f8cd a000 	str.w	sl, [sp]
 80072a0:	aa03      	add	r2, sp, #12
 80072a2:	f7ff fedf 	bl	8007064 <_printf_common>
 80072a6:	3001      	adds	r0, #1
 80072a8:	d14c      	bne.n	8007344 <_printf_i+0x200>
 80072aa:	f04f 30ff 	mov.w	r0, #4294967295
 80072ae:	b004      	add	sp, #16
 80072b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80072b4:	4834      	ldr	r0, [pc, #208]	; (8007388 <_printf_i+0x244>)
 80072b6:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80072ba:	6829      	ldr	r1, [r5, #0]
 80072bc:	6823      	ldr	r3, [r4, #0]
 80072be:	f851 6b04 	ldr.w	r6, [r1], #4
 80072c2:	6029      	str	r1, [r5, #0]
 80072c4:	061d      	lsls	r5, r3, #24
 80072c6:	d514      	bpl.n	80072f2 <_printf_i+0x1ae>
 80072c8:	07df      	lsls	r7, r3, #31
 80072ca:	bf44      	itt	mi
 80072cc:	f043 0320 	orrmi.w	r3, r3, #32
 80072d0:	6023      	strmi	r3, [r4, #0]
 80072d2:	b91e      	cbnz	r6, 80072dc <_printf_i+0x198>
 80072d4:	6823      	ldr	r3, [r4, #0]
 80072d6:	f023 0320 	bic.w	r3, r3, #32
 80072da:	6023      	str	r3, [r4, #0]
 80072dc:	2310      	movs	r3, #16
 80072de:	e7af      	b.n	8007240 <_printf_i+0xfc>
 80072e0:	6823      	ldr	r3, [r4, #0]
 80072e2:	f043 0320 	orr.w	r3, r3, #32
 80072e6:	6023      	str	r3, [r4, #0]
 80072e8:	2378      	movs	r3, #120	; 0x78
 80072ea:	4828      	ldr	r0, [pc, #160]	; (800738c <_printf_i+0x248>)
 80072ec:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80072f0:	e7e3      	b.n	80072ba <_printf_i+0x176>
 80072f2:	0659      	lsls	r1, r3, #25
 80072f4:	bf48      	it	mi
 80072f6:	b2b6      	uxthmi	r6, r6
 80072f8:	e7e6      	b.n	80072c8 <_printf_i+0x184>
 80072fa:	4615      	mov	r5, r2
 80072fc:	e7bb      	b.n	8007276 <_printf_i+0x132>
 80072fe:	682b      	ldr	r3, [r5, #0]
 8007300:	6826      	ldr	r6, [r4, #0]
 8007302:	1d18      	adds	r0, r3, #4
 8007304:	6961      	ldr	r1, [r4, #20]
 8007306:	6028      	str	r0, [r5, #0]
 8007308:	0635      	lsls	r5, r6, #24
 800730a:	681b      	ldr	r3, [r3, #0]
 800730c:	d501      	bpl.n	8007312 <_printf_i+0x1ce>
 800730e:	6019      	str	r1, [r3, #0]
 8007310:	e002      	b.n	8007318 <_printf_i+0x1d4>
 8007312:	0670      	lsls	r0, r6, #25
 8007314:	d5fb      	bpl.n	800730e <_printf_i+0x1ca>
 8007316:	8019      	strh	r1, [r3, #0]
 8007318:	2300      	movs	r3, #0
 800731a:	4615      	mov	r5, r2
 800731c:	6123      	str	r3, [r4, #16]
 800731e:	e7ba      	b.n	8007296 <_printf_i+0x152>
 8007320:	682b      	ldr	r3, [r5, #0]
 8007322:	2100      	movs	r1, #0
 8007324:	1d1a      	adds	r2, r3, #4
 8007326:	602a      	str	r2, [r5, #0]
 8007328:	681d      	ldr	r5, [r3, #0]
 800732a:	6862      	ldr	r2, [r4, #4]
 800732c:	4628      	mov	r0, r5
 800732e:	f002 fbff 	bl	8009b30 <memchr>
 8007332:	b108      	cbz	r0, 8007338 <_printf_i+0x1f4>
 8007334:	1b40      	subs	r0, r0, r5
 8007336:	6060      	str	r0, [r4, #4]
 8007338:	6863      	ldr	r3, [r4, #4]
 800733a:	6123      	str	r3, [r4, #16]
 800733c:	2300      	movs	r3, #0
 800733e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007342:	e7a8      	b.n	8007296 <_printf_i+0x152>
 8007344:	462a      	mov	r2, r5
 8007346:	4649      	mov	r1, r9
 8007348:	4640      	mov	r0, r8
 800734a:	6923      	ldr	r3, [r4, #16]
 800734c:	47d0      	blx	sl
 800734e:	3001      	adds	r0, #1
 8007350:	d0ab      	beq.n	80072aa <_printf_i+0x166>
 8007352:	6823      	ldr	r3, [r4, #0]
 8007354:	079b      	lsls	r3, r3, #30
 8007356:	d413      	bmi.n	8007380 <_printf_i+0x23c>
 8007358:	68e0      	ldr	r0, [r4, #12]
 800735a:	9b03      	ldr	r3, [sp, #12]
 800735c:	4298      	cmp	r0, r3
 800735e:	bfb8      	it	lt
 8007360:	4618      	movlt	r0, r3
 8007362:	e7a4      	b.n	80072ae <_printf_i+0x16a>
 8007364:	2301      	movs	r3, #1
 8007366:	4632      	mov	r2, r6
 8007368:	4649      	mov	r1, r9
 800736a:	4640      	mov	r0, r8
 800736c:	47d0      	blx	sl
 800736e:	3001      	adds	r0, #1
 8007370:	d09b      	beq.n	80072aa <_printf_i+0x166>
 8007372:	3501      	adds	r5, #1
 8007374:	68e3      	ldr	r3, [r4, #12]
 8007376:	9903      	ldr	r1, [sp, #12]
 8007378:	1a5b      	subs	r3, r3, r1
 800737a:	42ab      	cmp	r3, r5
 800737c:	dcf2      	bgt.n	8007364 <_printf_i+0x220>
 800737e:	e7eb      	b.n	8007358 <_printf_i+0x214>
 8007380:	2500      	movs	r5, #0
 8007382:	f104 0619 	add.w	r6, r4, #25
 8007386:	e7f5      	b.n	8007374 <_printf_i+0x230>
 8007388:	0800b91e 	.word	0x0800b91e
 800738c:	0800b92f 	.word	0x0800b92f

08007390 <_scanf_float>:
 8007390:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007394:	b087      	sub	sp, #28
 8007396:	9303      	str	r3, [sp, #12]
 8007398:	688b      	ldr	r3, [r1, #8]
 800739a:	4617      	mov	r7, r2
 800739c:	1e5a      	subs	r2, r3, #1
 800739e:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 80073a2:	bf85      	ittet	hi
 80073a4:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 80073a8:	195b      	addhi	r3, r3, r5
 80073aa:	2300      	movls	r3, #0
 80073ac:	9302      	strhi	r3, [sp, #8]
 80073ae:	bf88      	it	hi
 80073b0:	f240 135d 	movwhi	r3, #349	; 0x15d
 80073b4:	468b      	mov	fp, r1
 80073b6:	f04f 0500 	mov.w	r5, #0
 80073ba:	bf8c      	ite	hi
 80073bc:	608b      	strhi	r3, [r1, #8]
 80073be:	9302      	strls	r3, [sp, #8]
 80073c0:	680b      	ldr	r3, [r1, #0]
 80073c2:	4680      	mov	r8, r0
 80073c4:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 80073c8:	f84b 3b1c 	str.w	r3, [fp], #28
 80073cc:	460c      	mov	r4, r1
 80073ce:	465e      	mov	r6, fp
 80073d0:	46aa      	mov	sl, r5
 80073d2:	46a9      	mov	r9, r5
 80073d4:	e9cd 5504 	strd	r5, r5, [sp, #16]
 80073d8:	9501      	str	r5, [sp, #4]
 80073da:	68a2      	ldr	r2, [r4, #8]
 80073dc:	b152      	cbz	r2, 80073f4 <_scanf_float+0x64>
 80073de:	683b      	ldr	r3, [r7, #0]
 80073e0:	781b      	ldrb	r3, [r3, #0]
 80073e2:	2b4e      	cmp	r3, #78	; 0x4e
 80073e4:	d864      	bhi.n	80074b0 <_scanf_float+0x120>
 80073e6:	2b40      	cmp	r3, #64	; 0x40
 80073e8:	d83c      	bhi.n	8007464 <_scanf_float+0xd4>
 80073ea:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 80073ee:	b2c8      	uxtb	r0, r1
 80073f0:	280e      	cmp	r0, #14
 80073f2:	d93a      	bls.n	800746a <_scanf_float+0xda>
 80073f4:	f1b9 0f00 	cmp.w	r9, #0
 80073f8:	d003      	beq.n	8007402 <_scanf_float+0x72>
 80073fa:	6823      	ldr	r3, [r4, #0]
 80073fc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007400:	6023      	str	r3, [r4, #0]
 8007402:	f10a 3aff 	add.w	sl, sl, #4294967295
 8007406:	f1ba 0f01 	cmp.w	sl, #1
 800740a:	f200 8113 	bhi.w	8007634 <_scanf_float+0x2a4>
 800740e:	455e      	cmp	r6, fp
 8007410:	f200 8105 	bhi.w	800761e <_scanf_float+0x28e>
 8007414:	2501      	movs	r5, #1
 8007416:	4628      	mov	r0, r5
 8007418:	b007      	add	sp, #28
 800741a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800741e:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 8007422:	2a0d      	cmp	r2, #13
 8007424:	d8e6      	bhi.n	80073f4 <_scanf_float+0x64>
 8007426:	a101      	add	r1, pc, #4	; (adr r1, 800742c <_scanf_float+0x9c>)
 8007428:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800742c:	0800756b 	.word	0x0800756b
 8007430:	080073f5 	.word	0x080073f5
 8007434:	080073f5 	.word	0x080073f5
 8007438:	080073f5 	.word	0x080073f5
 800743c:	080075cb 	.word	0x080075cb
 8007440:	080075a3 	.word	0x080075a3
 8007444:	080073f5 	.word	0x080073f5
 8007448:	080073f5 	.word	0x080073f5
 800744c:	08007579 	.word	0x08007579
 8007450:	080073f5 	.word	0x080073f5
 8007454:	080073f5 	.word	0x080073f5
 8007458:	080073f5 	.word	0x080073f5
 800745c:	080073f5 	.word	0x080073f5
 8007460:	08007531 	.word	0x08007531
 8007464:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 8007468:	e7db      	b.n	8007422 <_scanf_float+0x92>
 800746a:	290e      	cmp	r1, #14
 800746c:	d8c2      	bhi.n	80073f4 <_scanf_float+0x64>
 800746e:	a001      	add	r0, pc, #4	; (adr r0, 8007474 <_scanf_float+0xe4>)
 8007470:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8007474:	08007523 	.word	0x08007523
 8007478:	080073f5 	.word	0x080073f5
 800747c:	08007523 	.word	0x08007523
 8007480:	080075b7 	.word	0x080075b7
 8007484:	080073f5 	.word	0x080073f5
 8007488:	080074d1 	.word	0x080074d1
 800748c:	0800750d 	.word	0x0800750d
 8007490:	0800750d 	.word	0x0800750d
 8007494:	0800750d 	.word	0x0800750d
 8007498:	0800750d 	.word	0x0800750d
 800749c:	0800750d 	.word	0x0800750d
 80074a0:	0800750d 	.word	0x0800750d
 80074a4:	0800750d 	.word	0x0800750d
 80074a8:	0800750d 	.word	0x0800750d
 80074ac:	0800750d 	.word	0x0800750d
 80074b0:	2b6e      	cmp	r3, #110	; 0x6e
 80074b2:	d809      	bhi.n	80074c8 <_scanf_float+0x138>
 80074b4:	2b60      	cmp	r3, #96	; 0x60
 80074b6:	d8b2      	bhi.n	800741e <_scanf_float+0x8e>
 80074b8:	2b54      	cmp	r3, #84	; 0x54
 80074ba:	d077      	beq.n	80075ac <_scanf_float+0x21c>
 80074bc:	2b59      	cmp	r3, #89	; 0x59
 80074be:	d199      	bne.n	80073f4 <_scanf_float+0x64>
 80074c0:	2d07      	cmp	r5, #7
 80074c2:	d197      	bne.n	80073f4 <_scanf_float+0x64>
 80074c4:	2508      	movs	r5, #8
 80074c6:	e029      	b.n	800751c <_scanf_float+0x18c>
 80074c8:	2b74      	cmp	r3, #116	; 0x74
 80074ca:	d06f      	beq.n	80075ac <_scanf_float+0x21c>
 80074cc:	2b79      	cmp	r3, #121	; 0x79
 80074ce:	e7f6      	b.n	80074be <_scanf_float+0x12e>
 80074d0:	6821      	ldr	r1, [r4, #0]
 80074d2:	05c8      	lsls	r0, r1, #23
 80074d4:	d51a      	bpl.n	800750c <_scanf_float+0x17c>
 80074d6:	9b02      	ldr	r3, [sp, #8]
 80074d8:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 80074dc:	6021      	str	r1, [r4, #0]
 80074de:	f109 0901 	add.w	r9, r9, #1
 80074e2:	b11b      	cbz	r3, 80074ec <_scanf_float+0x15c>
 80074e4:	3b01      	subs	r3, #1
 80074e6:	3201      	adds	r2, #1
 80074e8:	9302      	str	r3, [sp, #8]
 80074ea:	60a2      	str	r2, [r4, #8]
 80074ec:	68a3      	ldr	r3, [r4, #8]
 80074ee:	3b01      	subs	r3, #1
 80074f0:	60a3      	str	r3, [r4, #8]
 80074f2:	6923      	ldr	r3, [r4, #16]
 80074f4:	3301      	adds	r3, #1
 80074f6:	6123      	str	r3, [r4, #16]
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	3b01      	subs	r3, #1
 80074fc:	2b00      	cmp	r3, #0
 80074fe:	607b      	str	r3, [r7, #4]
 8007500:	f340 8084 	ble.w	800760c <_scanf_float+0x27c>
 8007504:	683b      	ldr	r3, [r7, #0]
 8007506:	3301      	adds	r3, #1
 8007508:	603b      	str	r3, [r7, #0]
 800750a:	e766      	b.n	80073da <_scanf_float+0x4a>
 800750c:	eb1a 0f05 	cmn.w	sl, r5
 8007510:	f47f af70 	bne.w	80073f4 <_scanf_float+0x64>
 8007514:	6822      	ldr	r2, [r4, #0]
 8007516:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 800751a:	6022      	str	r2, [r4, #0]
 800751c:	f806 3b01 	strb.w	r3, [r6], #1
 8007520:	e7e4      	b.n	80074ec <_scanf_float+0x15c>
 8007522:	6822      	ldr	r2, [r4, #0]
 8007524:	0610      	lsls	r0, r2, #24
 8007526:	f57f af65 	bpl.w	80073f4 <_scanf_float+0x64>
 800752a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800752e:	e7f4      	b.n	800751a <_scanf_float+0x18a>
 8007530:	f1ba 0f00 	cmp.w	sl, #0
 8007534:	d10e      	bne.n	8007554 <_scanf_float+0x1c4>
 8007536:	f1b9 0f00 	cmp.w	r9, #0
 800753a:	d10e      	bne.n	800755a <_scanf_float+0x1ca>
 800753c:	6822      	ldr	r2, [r4, #0]
 800753e:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8007542:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8007546:	d108      	bne.n	800755a <_scanf_float+0x1ca>
 8007548:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800754c:	f04f 0a01 	mov.w	sl, #1
 8007550:	6022      	str	r2, [r4, #0]
 8007552:	e7e3      	b.n	800751c <_scanf_float+0x18c>
 8007554:	f1ba 0f02 	cmp.w	sl, #2
 8007558:	d055      	beq.n	8007606 <_scanf_float+0x276>
 800755a:	2d01      	cmp	r5, #1
 800755c:	d002      	beq.n	8007564 <_scanf_float+0x1d4>
 800755e:	2d04      	cmp	r5, #4
 8007560:	f47f af48 	bne.w	80073f4 <_scanf_float+0x64>
 8007564:	3501      	adds	r5, #1
 8007566:	b2ed      	uxtb	r5, r5
 8007568:	e7d8      	b.n	800751c <_scanf_float+0x18c>
 800756a:	f1ba 0f01 	cmp.w	sl, #1
 800756e:	f47f af41 	bne.w	80073f4 <_scanf_float+0x64>
 8007572:	f04f 0a02 	mov.w	sl, #2
 8007576:	e7d1      	b.n	800751c <_scanf_float+0x18c>
 8007578:	b97d      	cbnz	r5, 800759a <_scanf_float+0x20a>
 800757a:	f1b9 0f00 	cmp.w	r9, #0
 800757e:	f47f af3c 	bne.w	80073fa <_scanf_float+0x6a>
 8007582:	6822      	ldr	r2, [r4, #0]
 8007584:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8007588:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800758c:	f47f af39 	bne.w	8007402 <_scanf_float+0x72>
 8007590:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8007594:	2501      	movs	r5, #1
 8007596:	6022      	str	r2, [r4, #0]
 8007598:	e7c0      	b.n	800751c <_scanf_float+0x18c>
 800759a:	2d03      	cmp	r5, #3
 800759c:	d0e2      	beq.n	8007564 <_scanf_float+0x1d4>
 800759e:	2d05      	cmp	r5, #5
 80075a0:	e7de      	b.n	8007560 <_scanf_float+0x1d0>
 80075a2:	2d02      	cmp	r5, #2
 80075a4:	f47f af26 	bne.w	80073f4 <_scanf_float+0x64>
 80075a8:	2503      	movs	r5, #3
 80075aa:	e7b7      	b.n	800751c <_scanf_float+0x18c>
 80075ac:	2d06      	cmp	r5, #6
 80075ae:	f47f af21 	bne.w	80073f4 <_scanf_float+0x64>
 80075b2:	2507      	movs	r5, #7
 80075b4:	e7b2      	b.n	800751c <_scanf_float+0x18c>
 80075b6:	6822      	ldr	r2, [r4, #0]
 80075b8:	0591      	lsls	r1, r2, #22
 80075ba:	f57f af1b 	bpl.w	80073f4 <_scanf_float+0x64>
 80075be:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 80075c2:	6022      	str	r2, [r4, #0]
 80075c4:	f8cd 9004 	str.w	r9, [sp, #4]
 80075c8:	e7a8      	b.n	800751c <_scanf_float+0x18c>
 80075ca:	6822      	ldr	r2, [r4, #0]
 80075cc:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 80075d0:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 80075d4:	d006      	beq.n	80075e4 <_scanf_float+0x254>
 80075d6:	0550      	lsls	r0, r2, #21
 80075d8:	f57f af0c 	bpl.w	80073f4 <_scanf_float+0x64>
 80075dc:	f1b9 0f00 	cmp.w	r9, #0
 80075e0:	f43f af0f 	beq.w	8007402 <_scanf_float+0x72>
 80075e4:	0591      	lsls	r1, r2, #22
 80075e6:	bf58      	it	pl
 80075e8:	9901      	ldrpl	r1, [sp, #4]
 80075ea:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 80075ee:	bf58      	it	pl
 80075f0:	eba9 0101 	subpl.w	r1, r9, r1
 80075f4:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 80075f8:	f04f 0900 	mov.w	r9, #0
 80075fc:	bf58      	it	pl
 80075fe:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8007602:	6022      	str	r2, [r4, #0]
 8007604:	e78a      	b.n	800751c <_scanf_float+0x18c>
 8007606:	f04f 0a03 	mov.w	sl, #3
 800760a:	e787      	b.n	800751c <_scanf_float+0x18c>
 800760c:	4639      	mov	r1, r7
 800760e:	4640      	mov	r0, r8
 8007610:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8007614:	4798      	blx	r3
 8007616:	2800      	cmp	r0, #0
 8007618:	f43f aedf 	beq.w	80073da <_scanf_float+0x4a>
 800761c:	e6ea      	b.n	80073f4 <_scanf_float+0x64>
 800761e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8007622:	463a      	mov	r2, r7
 8007624:	4640      	mov	r0, r8
 8007626:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800762a:	4798      	blx	r3
 800762c:	6923      	ldr	r3, [r4, #16]
 800762e:	3b01      	subs	r3, #1
 8007630:	6123      	str	r3, [r4, #16]
 8007632:	e6ec      	b.n	800740e <_scanf_float+0x7e>
 8007634:	1e6b      	subs	r3, r5, #1
 8007636:	2b06      	cmp	r3, #6
 8007638:	d825      	bhi.n	8007686 <_scanf_float+0x2f6>
 800763a:	2d02      	cmp	r5, #2
 800763c:	d836      	bhi.n	80076ac <_scanf_float+0x31c>
 800763e:	455e      	cmp	r6, fp
 8007640:	f67f aee8 	bls.w	8007414 <_scanf_float+0x84>
 8007644:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8007648:	463a      	mov	r2, r7
 800764a:	4640      	mov	r0, r8
 800764c:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8007650:	4798      	blx	r3
 8007652:	6923      	ldr	r3, [r4, #16]
 8007654:	3b01      	subs	r3, #1
 8007656:	6123      	str	r3, [r4, #16]
 8007658:	e7f1      	b.n	800763e <_scanf_float+0x2ae>
 800765a:	9802      	ldr	r0, [sp, #8]
 800765c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8007660:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 8007664:	463a      	mov	r2, r7
 8007666:	9002      	str	r0, [sp, #8]
 8007668:	4640      	mov	r0, r8
 800766a:	4798      	blx	r3
 800766c:	6923      	ldr	r3, [r4, #16]
 800766e:	3b01      	subs	r3, #1
 8007670:	6123      	str	r3, [r4, #16]
 8007672:	f10a 3aff 	add.w	sl, sl, #4294967295
 8007676:	fa5f fa8a 	uxtb.w	sl, sl
 800767a:	f1ba 0f02 	cmp.w	sl, #2
 800767e:	d1ec      	bne.n	800765a <_scanf_float+0x2ca>
 8007680:	3d03      	subs	r5, #3
 8007682:	b2ed      	uxtb	r5, r5
 8007684:	1b76      	subs	r6, r6, r5
 8007686:	6823      	ldr	r3, [r4, #0]
 8007688:	05da      	lsls	r2, r3, #23
 800768a:	d52f      	bpl.n	80076ec <_scanf_float+0x35c>
 800768c:	055b      	lsls	r3, r3, #21
 800768e:	d510      	bpl.n	80076b2 <_scanf_float+0x322>
 8007690:	455e      	cmp	r6, fp
 8007692:	f67f aebf 	bls.w	8007414 <_scanf_float+0x84>
 8007696:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800769a:	463a      	mov	r2, r7
 800769c:	4640      	mov	r0, r8
 800769e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80076a2:	4798      	blx	r3
 80076a4:	6923      	ldr	r3, [r4, #16]
 80076a6:	3b01      	subs	r3, #1
 80076a8:	6123      	str	r3, [r4, #16]
 80076aa:	e7f1      	b.n	8007690 <_scanf_float+0x300>
 80076ac:	46aa      	mov	sl, r5
 80076ae:	9602      	str	r6, [sp, #8]
 80076b0:	e7df      	b.n	8007672 <_scanf_float+0x2e2>
 80076b2:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 80076b6:	6923      	ldr	r3, [r4, #16]
 80076b8:	2965      	cmp	r1, #101	; 0x65
 80076ba:	f103 33ff 	add.w	r3, r3, #4294967295
 80076be:	f106 35ff 	add.w	r5, r6, #4294967295
 80076c2:	6123      	str	r3, [r4, #16]
 80076c4:	d00c      	beq.n	80076e0 <_scanf_float+0x350>
 80076c6:	2945      	cmp	r1, #69	; 0x45
 80076c8:	d00a      	beq.n	80076e0 <_scanf_float+0x350>
 80076ca:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80076ce:	463a      	mov	r2, r7
 80076d0:	4640      	mov	r0, r8
 80076d2:	4798      	blx	r3
 80076d4:	6923      	ldr	r3, [r4, #16]
 80076d6:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 80076da:	3b01      	subs	r3, #1
 80076dc:	1eb5      	subs	r5, r6, #2
 80076de:	6123      	str	r3, [r4, #16]
 80076e0:	463a      	mov	r2, r7
 80076e2:	4640      	mov	r0, r8
 80076e4:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80076e8:	4798      	blx	r3
 80076ea:	462e      	mov	r6, r5
 80076ec:	6825      	ldr	r5, [r4, #0]
 80076ee:	f015 0510 	ands.w	r5, r5, #16
 80076f2:	d155      	bne.n	80077a0 <_scanf_float+0x410>
 80076f4:	7035      	strb	r5, [r6, #0]
 80076f6:	6823      	ldr	r3, [r4, #0]
 80076f8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80076fc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007700:	d11b      	bne.n	800773a <_scanf_float+0x3aa>
 8007702:	9b01      	ldr	r3, [sp, #4]
 8007704:	454b      	cmp	r3, r9
 8007706:	eba3 0209 	sub.w	r2, r3, r9
 800770a:	d123      	bne.n	8007754 <_scanf_float+0x3c4>
 800770c:	2200      	movs	r2, #0
 800770e:	4659      	mov	r1, fp
 8007710:	4640      	mov	r0, r8
 8007712:	f000 fe91 	bl	8008438 <_strtod_r>
 8007716:	6822      	ldr	r2, [r4, #0]
 8007718:	9b03      	ldr	r3, [sp, #12]
 800771a:	f012 0f02 	tst.w	r2, #2
 800771e:	4606      	mov	r6, r0
 8007720:	460f      	mov	r7, r1
 8007722:	681b      	ldr	r3, [r3, #0]
 8007724:	d021      	beq.n	800776a <_scanf_float+0x3da>
 8007726:	1d1a      	adds	r2, r3, #4
 8007728:	9903      	ldr	r1, [sp, #12]
 800772a:	600a      	str	r2, [r1, #0]
 800772c:	681b      	ldr	r3, [r3, #0]
 800772e:	e9c3 6700 	strd	r6, r7, [r3]
 8007732:	68e3      	ldr	r3, [r4, #12]
 8007734:	3301      	adds	r3, #1
 8007736:	60e3      	str	r3, [r4, #12]
 8007738:	e66d      	b.n	8007416 <_scanf_float+0x86>
 800773a:	9b04      	ldr	r3, [sp, #16]
 800773c:	2b00      	cmp	r3, #0
 800773e:	d0e5      	beq.n	800770c <_scanf_float+0x37c>
 8007740:	9905      	ldr	r1, [sp, #20]
 8007742:	230a      	movs	r3, #10
 8007744:	462a      	mov	r2, r5
 8007746:	4640      	mov	r0, r8
 8007748:	3101      	adds	r1, #1
 800774a:	f000 fef7 	bl	800853c <_strtol_r>
 800774e:	9b04      	ldr	r3, [sp, #16]
 8007750:	9e05      	ldr	r6, [sp, #20]
 8007752:	1ac2      	subs	r2, r0, r3
 8007754:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8007758:	429e      	cmp	r6, r3
 800775a:	bf28      	it	cs
 800775c:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 8007760:	4630      	mov	r0, r6
 8007762:	4910      	ldr	r1, [pc, #64]	; (80077a4 <_scanf_float+0x414>)
 8007764:	f000 f83e 	bl	80077e4 <siprintf>
 8007768:	e7d0      	b.n	800770c <_scanf_float+0x37c>
 800776a:	f012 0f04 	tst.w	r2, #4
 800776e:	f103 0204 	add.w	r2, r3, #4
 8007772:	d1d9      	bne.n	8007728 <_scanf_float+0x398>
 8007774:	f8dd c00c 	ldr.w	ip, [sp, #12]
 8007778:	f8cc 2000 	str.w	r2, [ip]
 800777c:	f8d3 8000 	ldr.w	r8, [r3]
 8007780:	4602      	mov	r2, r0
 8007782:	460b      	mov	r3, r1
 8007784:	f7f9 f942 	bl	8000a0c <__aeabi_dcmpun>
 8007788:	b128      	cbz	r0, 8007796 <_scanf_float+0x406>
 800778a:	4807      	ldr	r0, [pc, #28]	; (80077a8 <_scanf_float+0x418>)
 800778c:	f000 f826 	bl	80077dc <nanf>
 8007790:	f8c8 0000 	str.w	r0, [r8]
 8007794:	e7cd      	b.n	8007732 <_scanf_float+0x3a2>
 8007796:	4630      	mov	r0, r6
 8007798:	4639      	mov	r1, r7
 800779a:	f7f9 f995 	bl	8000ac8 <__aeabi_d2f>
 800779e:	e7f7      	b.n	8007790 <_scanf_float+0x400>
 80077a0:	2500      	movs	r5, #0
 80077a2:	e638      	b.n	8007416 <_scanf_float+0x86>
 80077a4:	0800b940 	.word	0x0800b940
 80077a8:	0800bdb0 	.word	0x0800bdb0

080077ac <iprintf>:
 80077ac:	b40f      	push	{r0, r1, r2, r3}
 80077ae:	4b0a      	ldr	r3, [pc, #40]	; (80077d8 <iprintf+0x2c>)
 80077b0:	b513      	push	{r0, r1, r4, lr}
 80077b2:	681c      	ldr	r4, [r3, #0]
 80077b4:	b124      	cbz	r4, 80077c0 <iprintf+0x14>
 80077b6:	69a3      	ldr	r3, [r4, #24]
 80077b8:	b913      	cbnz	r3, 80077c0 <iprintf+0x14>
 80077ba:	4620      	mov	r0, r4
 80077bc:	f001 fd92 	bl	80092e4 <__sinit>
 80077c0:	ab05      	add	r3, sp, #20
 80077c2:	4620      	mov	r0, r4
 80077c4:	9a04      	ldr	r2, [sp, #16]
 80077c6:	68a1      	ldr	r1, [r4, #8]
 80077c8:	9301      	str	r3, [sp, #4]
 80077ca:	f003 f8f9 	bl	800a9c0 <_vfiprintf_r>
 80077ce:	b002      	add	sp, #8
 80077d0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80077d4:	b004      	add	sp, #16
 80077d6:	4770      	bx	lr
 80077d8:	20000010 	.word	0x20000010

080077dc <nanf>:
 80077dc:	4800      	ldr	r0, [pc, #0]	; (80077e0 <nanf+0x4>)
 80077de:	4770      	bx	lr
 80077e0:	7fc00000 	.word	0x7fc00000

080077e4 <siprintf>:
 80077e4:	b40e      	push	{r1, r2, r3}
 80077e6:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80077ea:	b500      	push	{lr}
 80077ec:	b09c      	sub	sp, #112	; 0x70
 80077ee:	ab1d      	add	r3, sp, #116	; 0x74
 80077f0:	9002      	str	r0, [sp, #8]
 80077f2:	9006      	str	r0, [sp, #24]
 80077f4:	9107      	str	r1, [sp, #28]
 80077f6:	9104      	str	r1, [sp, #16]
 80077f8:	4808      	ldr	r0, [pc, #32]	; (800781c <siprintf+0x38>)
 80077fa:	4909      	ldr	r1, [pc, #36]	; (8007820 <siprintf+0x3c>)
 80077fc:	f853 2b04 	ldr.w	r2, [r3], #4
 8007800:	9105      	str	r1, [sp, #20]
 8007802:	6800      	ldr	r0, [r0, #0]
 8007804:	a902      	add	r1, sp, #8
 8007806:	9301      	str	r3, [sp, #4]
 8007808:	f002 ffb2 	bl	800a770 <_svfiprintf_r>
 800780c:	2200      	movs	r2, #0
 800780e:	9b02      	ldr	r3, [sp, #8]
 8007810:	701a      	strb	r2, [r3, #0]
 8007812:	b01c      	add	sp, #112	; 0x70
 8007814:	f85d eb04 	ldr.w	lr, [sp], #4
 8007818:	b003      	add	sp, #12
 800781a:	4770      	bx	lr
 800781c:	20000010 	.word	0x20000010
 8007820:	ffff0208 	.word	0xffff0208

08007824 <sulp>:
 8007824:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007828:	460f      	mov	r7, r1
 800782a:	4690      	mov	r8, r2
 800782c:	f002 fd0c 	bl	800a248 <__ulp>
 8007830:	4604      	mov	r4, r0
 8007832:	460d      	mov	r5, r1
 8007834:	f1b8 0f00 	cmp.w	r8, #0
 8007838:	d011      	beq.n	800785e <sulp+0x3a>
 800783a:	f3c7 530a 	ubfx	r3, r7, #20, #11
 800783e:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8007842:	2b00      	cmp	r3, #0
 8007844:	dd0b      	ble.n	800785e <sulp+0x3a>
 8007846:	2400      	movs	r4, #0
 8007848:	051b      	lsls	r3, r3, #20
 800784a:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 800784e:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8007852:	4622      	mov	r2, r4
 8007854:	462b      	mov	r3, r5
 8007856:	f7f8 fe3f 	bl	80004d8 <__aeabi_dmul>
 800785a:	4604      	mov	r4, r0
 800785c:	460d      	mov	r5, r1
 800785e:	4620      	mov	r0, r4
 8007860:	4629      	mov	r1, r5
 8007862:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

08007868 <_strtod_l>:
 8007868:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800786c:	469b      	mov	fp, r3
 800786e:	2300      	movs	r3, #0
 8007870:	b09f      	sub	sp, #124	; 0x7c
 8007872:	931a      	str	r3, [sp, #104]	; 0x68
 8007874:	4b9e      	ldr	r3, [pc, #632]	; (8007af0 <_strtod_l+0x288>)
 8007876:	4682      	mov	sl, r0
 8007878:	681f      	ldr	r7, [r3, #0]
 800787a:	460e      	mov	r6, r1
 800787c:	4638      	mov	r0, r7
 800787e:	9215      	str	r2, [sp, #84]	; 0x54
 8007880:	f7f8 fc66 	bl	8000150 <strlen>
 8007884:	f04f 0800 	mov.w	r8, #0
 8007888:	4604      	mov	r4, r0
 800788a:	f04f 0900 	mov.w	r9, #0
 800788e:	9619      	str	r6, [sp, #100]	; 0x64
 8007890:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8007892:	781a      	ldrb	r2, [r3, #0]
 8007894:	2a2b      	cmp	r2, #43	; 0x2b
 8007896:	d04c      	beq.n	8007932 <_strtod_l+0xca>
 8007898:	d83a      	bhi.n	8007910 <_strtod_l+0xa8>
 800789a:	2a0d      	cmp	r2, #13
 800789c:	d833      	bhi.n	8007906 <_strtod_l+0x9e>
 800789e:	2a08      	cmp	r2, #8
 80078a0:	d833      	bhi.n	800790a <_strtod_l+0xa2>
 80078a2:	2a00      	cmp	r2, #0
 80078a4:	d03d      	beq.n	8007922 <_strtod_l+0xba>
 80078a6:	2300      	movs	r3, #0
 80078a8:	930a      	str	r3, [sp, #40]	; 0x28
 80078aa:	9d19      	ldr	r5, [sp, #100]	; 0x64
 80078ac:	782b      	ldrb	r3, [r5, #0]
 80078ae:	2b30      	cmp	r3, #48	; 0x30
 80078b0:	f040 80aa 	bne.w	8007a08 <_strtod_l+0x1a0>
 80078b4:	786b      	ldrb	r3, [r5, #1]
 80078b6:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 80078ba:	2b58      	cmp	r3, #88	; 0x58
 80078bc:	d166      	bne.n	800798c <_strtod_l+0x124>
 80078be:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80078c0:	4650      	mov	r0, sl
 80078c2:	9301      	str	r3, [sp, #4]
 80078c4:	ab1a      	add	r3, sp, #104	; 0x68
 80078c6:	9300      	str	r3, [sp, #0]
 80078c8:	4a8a      	ldr	r2, [pc, #552]	; (8007af4 <_strtod_l+0x28c>)
 80078ca:	f8cd b008 	str.w	fp, [sp, #8]
 80078ce:	ab1b      	add	r3, sp, #108	; 0x6c
 80078d0:	a919      	add	r1, sp, #100	; 0x64
 80078d2:	f001 fe0d 	bl	80094f0 <__gethex>
 80078d6:	f010 0607 	ands.w	r6, r0, #7
 80078da:	4604      	mov	r4, r0
 80078dc:	d005      	beq.n	80078ea <_strtod_l+0x82>
 80078de:	2e06      	cmp	r6, #6
 80078e0:	d129      	bne.n	8007936 <_strtod_l+0xce>
 80078e2:	2300      	movs	r3, #0
 80078e4:	3501      	adds	r5, #1
 80078e6:	9519      	str	r5, [sp, #100]	; 0x64
 80078e8:	930a      	str	r3, [sp, #40]	; 0x28
 80078ea:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80078ec:	2b00      	cmp	r3, #0
 80078ee:	f040 858a 	bne.w	8008406 <_strtod_l+0xb9e>
 80078f2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80078f4:	b1d3      	cbz	r3, 800792c <_strtod_l+0xc4>
 80078f6:	4642      	mov	r2, r8
 80078f8:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 80078fc:	4610      	mov	r0, r2
 80078fe:	4619      	mov	r1, r3
 8007900:	b01f      	add	sp, #124	; 0x7c
 8007902:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007906:	2a20      	cmp	r2, #32
 8007908:	d1cd      	bne.n	80078a6 <_strtod_l+0x3e>
 800790a:	3301      	adds	r3, #1
 800790c:	9319      	str	r3, [sp, #100]	; 0x64
 800790e:	e7bf      	b.n	8007890 <_strtod_l+0x28>
 8007910:	2a2d      	cmp	r2, #45	; 0x2d
 8007912:	d1c8      	bne.n	80078a6 <_strtod_l+0x3e>
 8007914:	2201      	movs	r2, #1
 8007916:	920a      	str	r2, [sp, #40]	; 0x28
 8007918:	1c5a      	adds	r2, r3, #1
 800791a:	9219      	str	r2, [sp, #100]	; 0x64
 800791c:	785b      	ldrb	r3, [r3, #1]
 800791e:	2b00      	cmp	r3, #0
 8007920:	d1c3      	bne.n	80078aa <_strtod_l+0x42>
 8007922:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8007924:	9619      	str	r6, [sp, #100]	; 0x64
 8007926:	2b00      	cmp	r3, #0
 8007928:	f040 856b 	bne.w	8008402 <_strtod_l+0xb9a>
 800792c:	4642      	mov	r2, r8
 800792e:	464b      	mov	r3, r9
 8007930:	e7e4      	b.n	80078fc <_strtod_l+0x94>
 8007932:	2200      	movs	r2, #0
 8007934:	e7ef      	b.n	8007916 <_strtod_l+0xae>
 8007936:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8007938:	b13a      	cbz	r2, 800794a <_strtod_l+0xe2>
 800793a:	2135      	movs	r1, #53	; 0x35
 800793c:	a81c      	add	r0, sp, #112	; 0x70
 800793e:	f002 fd87 	bl	800a450 <__copybits>
 8007942:	4650      	mov	r0, sl
 8007944:	991a      	ldr	r1, [sp, #104]	; 0x68
 8007946:	f002 f94f 	bl	8009be8 <_Bfree>
 800794a:	3e01      	subs	r6, #1
 800794c:	2e04      	cmp	r6, #4
 800794e:	d806      	bhi.n	800795e <_strtod_l+0xf6>
 8007950:	e8df f006 	tbb	[pc, r6]
 8007954:	1714030a 	.word	0x1714030a
 8007958:	0a          	.byte	0x0a
 8007959:	00          	.byte	0x00
 800795a:	e9dd 891c 	ldrd	r8, r9, [sp, #112]	; 0x70
 800795e:	0721      	lsls	r1, r4, #28
 8007960:	d5c3      	bpl.n	80078ea <_strtod_l+0x82>
 8007962:	f049 4900 	orr.w	r9, r9, #2147483648	; 0x80000000
 8007966:	e7c0      	b.n	80078ea <_strtod_l+0x82>
 8007968:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 800796a:	e9dd 831c 	ldrd	r8, r3, [sp, #112]	; 0x70
 800796e:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8007972:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8007976:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 800797a:	e7f0      	b.n	800795e <_strtod_l+0xf6>
 800797c:	f8df 9178 	ldr.w	r9, [pc, #376]	; 8007af8 <_strtod_l+0x290>
 8007980:	e7ed      	b.n	800795e <_strtod_l+0xf6>
 8007982:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 8007986:	f04f 38ff 	mov.w	r8, #4294967295
 800798a:	e7e8      	b.n	800795e <_strtod_l+0xf6>
 800798c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800798e:	1c5a      	adds	r2, r3, #1
 8007990:	9219      	str	r2, [sp, #100]	; 0x64
 8007992:	785b      	ldrb	r3, [r3, #1]
 8007994:	2b30      	cmp	r3, #48	; 0x30
 8007996:	d0f9      	beq.n	800798c <_strtod_l+0x124>
 8007998:	2b00      	cmp	r3, #0
 800799a:	d0a6      	beq.n	80078ea <_strtod_l+0x82>
 800799c:	2301      	movs	r3, #1
 800799e:	9307      	str	r3, [sp, #28]
 80079a0:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80079a2:	220a      	movs	r2, #10
 80079a4:	9308      	str	r3, [sp, #32]
 80079a6:	2300      	movs	r3, #0
 80079a8:	469b      	mov	fp, r3
 80079aa:	e9cd 3305 	strd	r3, r3, [sp, #20]
 80079ae:	9819      	ldr	r0, [sp, #100]	; 0x64
 80079b0:	7805      	ldrb	r5, [r0, #0]
 80079b2:	f1a5 0330 	sub.w	r3, r5, #48	; 0x30
 80079b6:	b2d9      	uxtb	r1, r3
 80079b8:	2909      	cmp	r1, #9
 80079ba:	d927      	bls.n	8007a0c <_strtod_l+0x1a4>
 80079bc:	4622      	mov	r2, r4
 80079be:	4639      	mov	r1, r7
 80079c0:	f003 f987 	bl	800acd2 <strncmp>
 80079c4:	2800      	cmp	r0, #0
 80079c6:	d033      	beq.n	8007a30 <_strtod_l+0x1c8>
 80079c8:	2000      	movs	r0, #0
 80079ca:	462a      	mov	r2, r5
 80079cc:	465c      	mov	r4, fp
 80079ce:	4603      	mov	r3, r0
 80079d0:	9004      	str	r0, [sp, #16]
 80079d2:	2a65      	cmp	r2, #101	; 0x65
 80079d4:	d001      	beq.n	80079da <_strtod_l+0x172>
 80079d6:	2a45      	cmp	r2, #69	; 0x45
 80079d8:	d114      	bne.n	8007a04 <_strtod_l+0x19c>
 80079da:	b91c      	cbnz	r4, 80079e4 <_strtod_l+0x17c>
 80079dc:	9a07      	ldr	r2, [sp, #28]
 80079de:	4302      	orrs	r2, r0
 80079e0:	d09f      	beq.n	8007922 <_strtod_l+0xba>
 80079e2:	2400      	movs	r4, #0
 80079e4:	9e19      	ldr	r6, [sp, #100]	; 0x64
 80079e6:	1c72      	adds	r2, r6, #1
 80079e8:	9219      	str	r2, [sp, #100]	; 0x64
 80079ea:	7872      	ldrb	r2, [r6, #1]
 80079ec:	2a2b      	cmp	r2, #43	; 0x2b
 80079ee:	d079      	beq.n	8007ae4 <_strtod_l+0x27c>
 80079f0:	2a2d      	cmp	r2, #45	; 0x2d
 80079f2:	f000 8083 	beq.w	8007afc <_strtod_l+0x294>
 80079f6:	2700      	movs	r7, #0
 80079f8:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 80079fc:	2909      	cmp	r1, #9
 80079fe:	f240 8083 	bls.w	8007b08 <_strtod_l+0x2a0>
 8007a02:	9619      	str	r6, [sp, #100]	; 0x64
 8007a04:	2500      	movs	r5, #0
 8007a06:	e09f      	b.n	8007b48 <_strtod_l+0x2e0>
 8007a08:	2300      	movs	r3, #0
 8007a0a:	e7c8      	b.n	800799e <_strtod_l+0x136>
 8007a0c:	f1bb 0f08 	cmp.w	fp, #8
 8007a10:	bfd5      	itete	le
 8007a12:	9906      	ldrle	r1, [sp, #24]
 8007a14:	9905      	ldrgt	r1, [sp, #20]
 8007a16:	fb02 3301 	mlale	r3, r2, r1, r3
 8007a1a:	fb02 3301 	mlagt	r3, r2, r1, r3
 8007a1e:	f100 0001 	add.w	r0, r0, #1
 8007a22:	bfd4      	ite	le
 8007a24:	9306      	strle	r3, [sp, #24]
 8007a26:	9305      	strgt	r3, [sp, #20]
 8007a28:	f10b 0b01 	add.w	fp, fp, #1
 8007a2c:	9019      	str	r0, [sp, #100]	; 0x64
 8007a2e:	e7be      	b.n	80079ae <_strtod_l+0x146>
 8007a30:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8007a32:	191a      	adds	r2, r3, r4
 8007a34:	9219      	str	r2, [sp, #100]	; 0x64
 8007a36:	5d1a      	ldrb	r2, [r3, r4]
 8007a38:	f1bb 0f00 	cmp.w	fp, #0
 8007a3c:	d036      	beq.n	8007aac <_strtod_l+0x244>
 8007a3e:	465c      	mov	r4, fp
 8007a40:	9004      	str	r0, [sp, #16]
 8007a42:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 8007a46:	2b09      	cmp	r3, #9
 8007a48:	d912      	bls.n	8007a70 <_strtod_l+0x208>
 8007a4a:	2301      	movs	r3, #1
 8007a4c:	e7c1      	b.n	80079d2 <_strtod_l+0x16a>
 8007a4e:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8007a50:	3001      	adds	r0, #1
 8007a52:	1c5a      	adds	r2, r3, #1
 8007a54:	9219      	str	r2, [sp, #100]	; 0x64
 8007a56:	785a      	ldrb	r2, [r3, #1]
 8007a58:	2a30      	cmp	r2, #48	; 0x30
 8007a5a:	d0f8      	beq.n	8007a4e <_strtod_l+0x1e6>
 8007a5c:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 8007a60:	2b08      	cmp	r3, #8
 8007a62:	f200 84d5 	bhi.w	8008410 <_strtod_l+0xba8>
 8007a66:	9004      	str	r0, [sp, #16]
 8007a68:	2000      	movs	r0, #0
 8007a6a:	4604      	mov	r4, r0
 8007a6c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8007a6e:	9308      	str	r3, [sp, #32]
 8007a70:	3a30      	subs	r2, #48	; 0x30
 8007a72:	f100 0301 	add.w	r3, r0, #1
 8007a76:	d013      	beq.n	8007aa0 <_strtod_l+0x238>
 8007a78:	9904      	ldr	r1, [sp, #16]
 8007a7a:	1905      	adds	r5, r0, r4
 8007a7c:	4419      	add	r1, r3
 8007a7e:	9104      	str	r1, [sp, #16]
 8007a80:	4623      	mov	r3, r4
 8007a82:	210a      	movs	r1, #10
 8007a84:	42ab      	cmp	r3, r5
 8007a86:	d113      	bne.n	8007ab0 <_strtod_l+0x248>
 8007a88:	1823      	adds	r3, r4, r0
 8007a8a:	2b08      	cmp	r3, #8
 8007a8c:	f104 0401 	add.w	r4, r4, #1
 8007a90:	4404      	add	r4, r0
 8007a92:	dc1b      	bgt.n	8007acc <_strtod_l+0x264>
 8007a94:	230a      	movs	r3, #10
 8007a96:	9906      	ldr	r1, [sp, #24]
 8007a98:	fb03 2301 	mla	r3, r3, r1, r2
 8007a9c:	9306      	str	r3, [sp, #24]
 8007a9e:	2300      	movs	r3, #0
 8007aa0:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8007aa2:	4618      	mov	r0, r3
 8007aa4:	1c51      	adds	r1, r2, #1
 8007aa6:	9119      	str	r1, [sp, #100]	; 0x64
 8007aa8:	7852      	ldrb	r2, [r2, #1]
 8007aaa:	e7ca      	b.n	8007a42 <_strtod_l+0x1da>
 8007aac:	4658      	mov	r0, fp
 8007aae:	e7d3      	b.n	8007a58 <_strtod_l+0x1f0>
 8007ab0:	2b08      	cmp	r3, #8
 8007ab2:	dc04      	bgt.n	8007abe <_strtod_l+0x256>
 8007ab4:	9f06      	ldr	r7, [sp, #24]
 8007ab6:	434f      	muls	r7, r1
 8007ab8:	9706      	str	r7, [sp, #24]
 8007aba:	3301      	adds	r3, #1
 8007abc:	e7e2      	b.n	8007a84 <_strtod_l+0x21c>
 8007abe:	1c5f      	adds	r7, r3, #1
 8007ac0:	2f10      	cmp	r7, #16
 8007ac2:	bfde      	ittt	le
 8007ac4:	9f05      	ldrle	r7, [sp, #20]
 8007ac6:	434f      	mulle	r7, r1
 8007ac8:	9705      	strle	r7, [sp, #20]
 8007aca:	e7f6      	b.n	8007aba <_strtod_l+0x252>
 8007acc:	2c10      	cmp	r4, #16
 8007ace:	bfdf      	itttt	le
 8007ad0:	230a      	movle	r3, #10
 8007ad2:	9905      	ldrle	r1, [sp, #20]
 8007ad4:	fb03 2301 	mlale	r3, r3, r1, r2
 8007ad8:	9305      	strle	r3, [sp, #20]
 8007ada:	e7e0      	b.n	8007a9e <_strtod_l+0x236>
 8007adc:	2300      	movs	r3, #0
 8007ade:	9304      	str	r3, [sp, #16]
 8007ae0:	2301      	movs	r3, #1
 8007ae2:	e77b      	b.n	80079dc <_strtod_l+0x174>
 8007ae4:	2700      	movs	r7, #0
 8007ae6:	1cb2      	adds	r2, r6, #2
 8007ae8:	9219      	str	r2, [sp, #100]	; 0x64
 8007aea:	78b2      	ldrb	r2, [r6, #2]
 8007aec:	e784      	b.n	80079f8 <_strtod_l+0x190>
 8007aee:	bf00      	nop
 8007af0:	0800bbf4 	.word	0x0800bbf4
 8007af4:	0800b948 	.word	0x0800b948
 8007af8:	7ff00000 	.word	0x7ff00000
 8007afc:	2701      	movs	r7, #1
 8007afe:	e7f2      	b.n	8007ae6 <_strtod_l+0x27e>
 8007b00:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8007b02:	1c51      	adds	r1, r2, #1
 8007b04:	9119      	str	r1, [sp, #100]	; 0x64
 8007b06:	7852      	ldrb	r2, [r2, #1]
 8007b08:	2a30      	cmp	r2, #48	; 0x30
 8007b0a:	d0f9      	beq.n	8007b00 <_strtod_l+0x298>
 8007b0c:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 8007b10:	2908      	cmp	r1, #8
 8007b12:	f63f af77 	bhi.w	8007a04 <_strtod_l+0x19c>
 8007b16:	f04f 0e0a 	mov.w	lr, #10
 8007b1a:	f1a2 0c30 	sub.w	ip, r2, #48	; 0x30
 8007b1e:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8007b20:	9209      	str	r2, [sp, #36]	; 0x24
 8007b22:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8007b24:	1c51      	adds	r1, r2, #1
 8007b26:	9119      	str	r1, [sp, #100]	; 0x64
 8007b28:	7852      	ldrb	r2, [r2, #1]
 8007b2a:	f1a2 0530 	sub.w	r5, r2, #48	; 0x30
 8007b2e:	2d09      	cmp	r5, #9
 8007b30:	d935      	bls.n	8007b9e <_strtod_l+0x336>
 8007b32:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8007b34:	1b49      	subs	r1, r1, r5
 8007b36:	2908      	cmp	r1, #8
 8007b38:	f644 651f 	movw	r5, #19999	; 0x4e1f
 8007b3c:	dc02      	bgt.n	8007b44 <_strtod_l+0x2dc>
 8007b3e:	4565      	cmp	r5, ip
 8007b40:	bfa8      	it	ge
 8007b42:	4665      	movge	r5, ip
 8007b44:	b107      	cbz	r7, 8007b48 <_strtod_l+0x2e0>
 8007b46:	426d      	negs	r5, r5
 8007b48:	2c00      	cmp	r4, #0
 8007b4a:	d14c      	bne.n	8007be6 <_strtod_l+0x37e>
 8007b4c:	9907      	ldr	r1, [sp, #28]
 8007b4e:	4301      	orrs	r1, r0
 8007b50:	f47f aecb 	bne.w	80078ea <_strtod_l+0x82>
 8007b54:	2b00      	cmp	r3, #0
 8007b56:	f47f aee4 	bne.w	8007922 <_strtod_l+0xba>
 8007b5a:	2a69      	cmp	r2, #105	; 0x69
 8007b5c:	d026      	beq.n	8007bac <_strtod_l+0x344>
 8007b5e:	dc23      	bgt.n	8007ba8 <_strtod_l+0x340>
 8007b60:	2a49      	cmp	r2, #73	; 0x49
 8007b62:	d023      	beq.n	8007bac <_strtod_l+0x344>
 8007b64:	2a4e      	cmp	r2, #78	; 0x4e
 8007b66:	f47f aedc 	bne.w	8007922 <_strtod_l+0xba>
 8007b6a:	499d      	ldr	r1, [pc, #628]	; (8007de0 <_strtod_l+0x578>)
 8007b6c:	a819      	add	r0, sp, #100	; 0x64
 8007b6e:	f001 ff0d 	bl	800998c <__match>
 8007b72:	2800      	cmp	r0, #0
 8007b74:	f43f aed5 	beq.w	8007922 <_strtod_l+0xba>
 8007b78:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8007b7a:	781b      	ldrb	r3, [r3, #0]
 8007b7c:	2b28      	cmp	r3, #40	; 0x28
 8007b7e:	d12c      	bne.n	8007bda <_strtod_l+0x372>
 8007b80:	4998      	ldr	r1, [pc, #608]	; (8007de4 <_strtod_l+0x57c>)
 8007b82:	aa1c      	add	r2, sp, #112	; 0x70
 8007b84:	a819      	add	r0, sp, #100	; 0x64
 8007b86:	f001 ff15 	bl	80099b4 <__hexnan>
 8007b8a:	2805      	cmp	r0, #5
 8007b8c:	d125      	bne.n	8007bda <_strtod_l+0x372>
 8007b8e:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8007b90:	f8dd 8070 	ldr.w	r8, [sp, #112]	; 0x70
 8007b94:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 8007b98:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 8007b9c:	e6a5      	b.n	80078ea <_strtod_l+0x82>
 8007b9e:	fb0e 2c0c 	mla	ip, lr, ip, r2
 8007ba2:	f1ac 0c30 	sub.w	ip, ip, #48	; 0x30
 8007ba6:	e7bc      	b.n	8007b22 <_strtod_l+0x2ba>
 8007ba8:	2a6e      	cmp	r2, #110	; 0x6e
 8007baa:	e7dc      	b.n	8007b66 <_strtod_l+0x2fe>
 8007bac:	498e      	ldr	r1, [pc, #568]	; (8007de8 <_strtod_l+0x580>)
 8007bae:	a819      	add	r0, sp, #100	; 0x64
 8007bb0:	f001 feec 	bl	800998c <__match>
 8007bb4:	2800      	cmp	r0, #0
 8007bb6:	f43f aeb4 	beq.w	8007922 <_strtod_l+0xba>
 8007bba:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8007bbc:	498b      	ldr	r1, [pc, #556]	; (8007dec <_strtod_l+0x584>)
 8007bbe:	3b01      	subs	r3, #1
 8007bc0:	a819      	add	r0, sp, #100	; 0x64
 8007bc2:	9319      	str	r3, [sp, #100]	; 0x64
 8007bc4:	f001 fee2 	bl	800998c <__match>
 8007bc8:	b910      	cbnz	r0, 8007bd0 <_strtod_l+0x368>
 8007bca:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8007bcc:	3301      	adds	r3, #1
 8007bce:	9319      	str	r3, [sp, #100]	; 0x64
 8007bd0:	f04f 0800 	mov.w	r8, #0
 8007bd4:	f8df 9218 	ldr.w	r9, [pc, #536]	; 8007df0 <_strtod_l+0x588>
 8007bd8:	e687      	b.n	80078ea <_strtod_l+0x82>
 8007bda:	4886      	ldr	r0, [pc, #536]	; (8007df4 <_strtod_l+0x58c>)
 8007bdc:	f003 f820 	bl	800ac20 <nan>
 8007be0:	4680      	mov	r8, r0
 8007be2:	4689      	mov	r9, r1
 8007be4:	e681      	b.n	80078ea <_strtod_l+0x82>
 8007be6:	9b04      	ldr	r3, [sp, #16]
 8007be8:	f1bb 0f00 	cmp.w	fp, #0
 8007bec:	bf08      	it	eq
 8007bee:	46a3      	moveq	fp, r4
 8007bf0:	1aeb      	subs	r3, r5, r3
 8007bf2:	2c10      	cmp	r4, #16
 8007bf4:	9806      	ldr	r0, [sp, #24]
 8007bf6:	4626      	mov	r6, r4
 8007bf8:	9307      	str	r3, [sp, #28]
 8007bfa:	bfa8      	it	ge
 8007bfc:	2610      	movge	r6, #16
 8007bfe:	f7f8 fbf1 	bl	80003e4 <__aeabi_ui2d>
 8007c02:	2c09      	cmp	r4, #9
 8007c04:	4680      	mov	r8, r0
 8007c06:	4689      	mov	r9, r1
 8007c08:	dd13      	ble.n	8007c32 <_strtod_l+0x3ca>
 8007c0a:	4b7b      	ldr	r3, [pc, #492]	; (8007df8 <_strtod_l+0x590>)
 8007c0c:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8007c10:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8007c14:	f7f8 fc60 	bl	80004d8 <__aeabi_dmul>
 8007c18:	4680      	mov	r8, r0
 8007c1a:	9805      	ldr	r0, [sp, #20]
 8007c1c:	4689      	mov	r9, r1
 8007c1e:	f7f8 fbe1 	bl	80003e4 <__aeabi_ui2d>
 8007c22:	4602      	mov	r2, r0
 8007c24:	460b      	mov	r3, r1
 8007c26:	4640      	mov	r0, r8
 8007c28:	4649      	mov	r1, r9
 8007c2a:	f7f8 fa9f 	bl	800016c <__adddf3>
 8007c2e:	4680      	mov	r8, r0
 8007c30:	4689      	mov	r9, r1
 8007c32:	2c0f      	cmp	r4, #15
 8007c34:	dc36      	bgt.n	8007ca4 <_strtod_l+0x43c>
 8007c36:	9b07      	ldr	r3, [sp, #28]
 8007c38:	2b00      	cmp	r3, #0
 8007c3a:	f43f ae56 	beq.w	80078ea <_strtod_l+0x82>
 8007c3e:	dd22      	ble.n	8007c86 <_strtod_l+0x41e>
 8007c40:	2b16      	cmp	r3, #22
 8007c42:	dc09      	bgt.n	8007c58 <_strtod_l+0x3f0>
 8007c44:	496c      	ldr	r1, [pc, #432]	; (8007df8 <_strtod_l+0x590>)
 8007c46:	4642      	mov	r2, r8
 8007c48:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8007c4c:	464b      	mov	r3, r9
 8007c4e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007c52:	f7f8 fc41 	bl	80004d8 <__aeabi_dmul>
 8007c56:	e7c3      	b.n	8007be0 <_strtod_l+0x378>
 8007c58:	9a07      	ldr	r2, [sp, #28]
 8007c5a:	f1c4 0325 	rsb	r3, r4, #37	; 0x25
 8007c5e:	4293      	cmp	r3, r2
 8007c60:	db20      	blt.n	8007ca4 <_strtod_l+0x43c>
 8007c62:	4d65      	ldr	r5, [pc, #404]	; (8007df8 <_strtod_l+0x590>)
 8007c64:	f1c4 040f 	rsb	r4, r4, #15
 8007c68:	eb05 01c4 	add.w	r1, r5, r4, lsl #3
 8007c6c:	4642      	mov	r2, r8
 8007c6e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007c72:	464b      	mov	r3, r9
 8007c74:	f7f8 fc30 	bl	80004d8 <__aeabi_dmul>
 8007c78:	9b07      	ldr	r3, [sp, #28]
 8007c7a:	1b1c      	subs	r4, r3, r4
 8007c7c:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
 8007c80:	e9d5 2300 	ldrd	r2, r3, [r5]
 8007c84:	e7e5      	b.n	8007c52 <_strtod_l+0x3ea>
 8007c86:	9b07      	ldr	r3, [sp, #28]
 8007c88:	3316      	adds	r3, #22
 8007c8a:	db0b      	blt.n	8007ca4 <_strtod_l+0x43c>
 8007c8c:	9b04      	ldr	r3, [sp, #16]
 8007c8e:	4640      	mov	r0, r8
 8007c90:	1b5d      	subs	r5, r3, r5
 8007c92:	4b59      	ldr	r3, [pc, #356]	; (8007df8 <_strtod_l+0x590>)
 8007c94:	4649      	mov	r1, r9
 8007c96:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 8007c9a:	e9d5 2300 	ldrd	r2, r3, [r5]
 8007c9e:	f7f8 fd45 	bl	800072c <__aeabi_ddiv>
 8007ca2:	e79d      	b.n	8007be0 <_strtod_l+0x378>
 8007ca4:	9b07      	ldr	r3, [sp, #28]
 8007ca6:	1ba6      	subs	r6, r4, r6
 8007ca8:	441e      	add	r6, r3
 8007caa:	2e00      	cmp	r6, #0
 8007cac:	dd74      	ble.n	8007d98 <_strtod_l+0x530>
 8007cae:	f016 030f 	ands.w	r3, r6, #15
 8007cb2:	d00a      	beq.n	8007cca <_strtod_l+0x462>
 8007cb4:	4950      	ldr	r1, [pc, #320]	; (8007df8 <_strtod_l+0x590>)
 8007cb6:	4642      	mov	r2, r8
 8007cb8:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8007cbc:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007cc0:	464b      	mov	r3, r9
 8007cc2:	f7f8 fc09 	bl	80004d8 <__aeabi_dmul>
 8007cc6:	4680      	mov	r8, r0
 8007cc8:	4689      	mov	r9, r1
 8007cca:	f036 060f 	bics.w	r6, r6, #15
 8007cce:	d052      	beq.n	8007d76 <_strtod_l+0x50e>
 8007cd0:	f5b6 7f9a 	cmp.w	r6, #308	; 0x134
 8007cd4:	dd27      	ble.n	8007d26 <_strtod_l+0x4be>
 8007cd6:	f04f 0b00 	mov.w	fp, #0
 8007cda:	f8cd b010 	str.w	fp, [sp, #16]
 8007cde:	f8cd b020 	str.w	fp, [sp, #32]
 8007ce2:	f8cd b018 	str.w	fp, [sp, #24]
 8007ce6:	2322      	movs	r3, #34	; 0x22
 8007ce8:	f04f 0800 	mov.w	r8, #0
 8007cec:	f8df 9100 	ldr.w	r9, [pc, #256]	; 8007df0 <_strtod_l+0x588>
 8007cf0:	f8ca 3000 	str.w	r3, [sl]
 8007cf4:	9b08      	ldr	r3, [sp, #32]
 8007cf6:	2b00      	cmp	r3, #0
 8007cf8:	f43f adf7 	beq.w	80078ea <_strtod_l+0x82>
 8007cfc:	4650      	mov	r0, sl
 8007cfe:	991a      	ldr	r1, [sp, #104]	; 0x68
 8007d00:	f001 ff72 	bl	8009be8 <_Bfree>
 8007d04:	4650      	mov	r0, sl
 8007d06:	9906      	ldr	r1, [sp, #24]
 8007d08:	f001 ff6e 	bl	8009be8 <_Bfree>
 8007d0c:	4650      	mov	r0, sl
 8007d0e:	9904      	ldr	r1, [sp, #16]
 8007d10:	f001 ff6a 	bl	8009be8 <_Bfree>
 8007d14:	4650      	mov	r0, sl
 8007d16:	9908      	ldr	r1, [sp, #32]
 8007d18:	f001 ff66 	bl	8009be8 <_Bfree>
 8007d1c:	4659      	mov	r1, fp
 8007d1e:	4650      	mov	r0, sl
 8007d20:	f001 ff62 	bl	8009be8 <_Bfree>
 8007d24:	e5e1      	b.n	80078ea <_strtod_l+0x82>
 8007d26:	4b35      	ldr	r3, [pc, #212]	; (8007dfc <_strtod_l+0x594>)
 8007d28:	4640      	mov	r0, r8
 8007d2a:	9305      	str	r3, [sp, #20]
 8007d2c:	2300      	movs	r3, #0
 8007d2e:	4649      	mov	r1, r9
 8007d30:	461f      	mov	r7, r3
 8007d32:	1136      	asrs	r6, r6, #4
 8007d34:	2e01      	cmp	r6, #1
 8007d36:	dc21      	bgt.n	8007d7c <_strtod_l+0x514>
 8007d38:	b10b      	cbz	r3, 8007d3e <_strtod_l+0x4d6>
 8007d3a:	4680      	mov	r8, r0
 8007d3c:	4689      	mov	r9, r1
 8007d3e:	4b2f      	ldr	r3, [pc, #188]	; (8007dfc <_strtod_l+0x594>)
 8007d40:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 8007d44:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 8007d48:	4642      	mov	r2, r8
 8007d4a:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007d4e:	464b      	mov	r3, r9
 8007d50:	f7f8 fbc2 	bl	80004d8 <__aeabi_dmul>
 8007d54:	4b26      	ldr	r3, [pc, #152]	; (8007df0 <_strtod_l+0x588>)
 8007d56:	460a      	mov	r2, r1
 8007d58:	400b      	ands	r3, r1
 8007d5a:	4929      	ldr	r1, [pc, #164]	; (8007e00 <_strtod_l+0x598>)
 8007d5c:	4680      	mov	r8, r0
 8007d5e:	428b      	cmp	r3, r1
 8007d60:	d8b9      	bhi.n	8007cd6 <_strtod_l+0x46e>
 8007d62:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8007d66:	428b      	cmp	r3, r1
 8007d68:	bf86      	itte	hi
 8007d6a:	f04f 38ff 	movhi.w	r8, #4294967295
 8007d6e:	f8df 9094 	ldrhi.w	r9, [pc, #148]	; 8007e04 <_strtod_l+0x59c>
 8007d72:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
 8007d76:	2300      	movs	r3, #0
 8007d78:	9305      	str	r3, [sp, #20]
 8007d7a:	e07f      	b.n	8007e7c <_strtod_l+0x614>
 8007d7c:	07f2      	lsls	r2, r6, #31
 8007d7e:	d505      	bpl.n	8007d8c <_strtod_l+0x524>
 8007d80:	9b05      	ldr	r3, [sp, #20]
 8007d82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d86:	f7f8 fba7 	bl	80004d8 <__aeabi_dmul>
 8007d8a:	2301      	movs	r3, #1
 8007d8c:	9a05      	ldr	r2, [sp, #20]
 8007d8e:	3701      	adds	r7, #1
 8007d90:	3208      	adds	r2, #8
 8007d92:	1076      	asrs	r6, r6, #1
 8007d94:	9205      	str	r2, [sp, #20]
 8007d96:	e7cd      	b.n	8007d34 <_strtod_l+0x4cc>
 8007d98:	d0ed      	beq.n	8007d76 <_strtod_l+0x50e>
 8007d9a:	4276      	negs	r6, r6
 8007d9c:	f016 020f 	ands.w	r2, r6, #15
 8007da0:	d00a      	beq.n	8007db8 <_strtod_l+0x550>
 8007da2:	4b15      	ldr	r3, [pc, #84]	; (8007df8 <_strtod_l+0x590>)
 8007da4:	4640      	mov	r0, r8
 8007da6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007daa:	4649      	mov	r1, r9
 8007dac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007db0:	f7f8 fcbc 	bl	800072c <__aeabi_ddiv>
 8007db4:	4680      	mov	r8, r0
 8007db6:	4689      	mov	r9, r1
 8007db8:	1136      	asrs	r6, r6, #4
 8007dba:	d0dc      	beq.n	8007d76 <_strtod_l+0x50e>
 8007dbc:	2e1f      	cmp	r6, #31
 8007dbe:	dd23      	ble.n	8007e08 <_strtod_l+0x5a0>
 8007dc0:	f04f 0b00 	mov.w	fp, #0
 8007dc4:	f8cd b010 	str.w	fp, [sp, #16]
 8007dc8:	f8cd b020 	str.w	fp, [sp, #32]
 8007dcc:	f8cd b018 	str.w	fp, [sp, #24]
 8007dd0:	2322      	movs	r3, #34	; 0x22
 8007dd2:	f04f 0800 	mov.w	r8, #0
 8007dd6:	f04f 0900 	mov.w	r9, #0
 8007dda:	f8ca 3000 	str.w	r3, [sl]
 8007dde:	e789      	b.n	8007cf4 <_strtod_l+0x48c>
 8007de0:	0800b919 	.word	0x0800b919
 8007de4:	0800b95c 	.word	0x0800b95c
 8007de8:	0800b911 	.word	0x0800b911
 8007dec:	0800ba9c 	.word	0x0800ba9c
 8007df0:	7ff00000 	.word	0x7ff00000
 8007df4:	0800bdb0 	.word	0x0800bdb0
 8007df8:	0800bc90 	.word	0x0800bc90
 8007dfc:	0800bc68 	.word	0x0800bc68
 8007e00:	7ca00000 	.word	0x7ca00000
 8007e04:	7fefffff 	.word	0x7fefffff
 8007e08:	f016 0310 	ands.w	r3, r6, #16
 8007e0c:	bf18      	it	ne
 8007e0e:	236a      	movne	r3, #106	; 0x6a
 8007e10:	4640      	mov	r0, r8
 8007e12:	9305      	str	r3, [sp, #20]
 8007e14:	4649      	mov	r1, r9
 8007e16:	2300      	movs	r3, #0
 8007e18:	4fb0      	ldr	r7, [pc, #704]	; (80080dc <_strtod_l+0x874>)
 8007e1a:	07f2      	lsls	r2, r6, #31
 8007e1c:	d504      	bpl.n	8007e28 <_strtod_l+0x5c0>
 8007e1e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007e22:	f7f8 fb59 	bl	80004d8 <__aeabi_dmul>
 8007e26:	2301      	movs	r3, #1
 8007e28:	1076      	asrs	r6, r6, #1
 8007e2a:	f107 0708 	add.w	r7, r7, #8
 8007e2e:	d1f4      	bne.n	8007e1a <_strtod_l+0x5b2>
 8007e30:	b10b      	cbz	r3, 8007e36 <_strtod_l+0x5ce>
 8007e32:	4680      	mov	r8, r0
 8007e34:	4689      	mov	r9, r1
 8007e36:	9b05      	ldr	r3, [sp, #20]
 8007e38:	b1c3      	cbz	r3, 8007e6c <_strtod_l+0x604>
 8007e3a:	f3c9 520a 	ubfx	r2, r9, #20, #11
 8007e3e:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8007e42:	2b00      	cmp	r3, #0
 8007e44:	4649      	mov	r1, r9
 8007e46:	dd11      	ble.n	8007e6c <_strtod_l+0x604>
 8007e48:	2b1f      	cmp	r3, #31
 8007e4a:	f340 8127 	ble.w	800809c <_strtod_l+0x834>
 8007e4e:	2b34      	cmp	r3, #52	; 0x34
 8007e50:	bfd8      	it	le
 8007e52:	f04f 33ff 	movle.w	r3, #4294967295
 8007e56:	f04f 0800 	mov.w	r8, #0
 8007e5a:	bfcf      	iteee	gt
 8007e5c:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 8007e60:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 8007e64:	fa03 f202 	lslle.w	r2, r3, r2
 8007e68:	ea02 0901 	andle.w	r9, r2, r1
 8007e6c:	2200      	movs	r2, #0
 8007e6e:	2300      	movs	r3, #0
 8007e70:	4640      	mov	r0, r8
 8007e72:	4649      	mov	r1, r9
 8007e74:	f7f8 fd98 	bl	80009a8 <__aeabi_dcmpeq>
 8007e78:	2800      	cmp	r0, #0
 8007e7a:	d1a1      	bne.n	8007dc0 <_strtod_l+0x558>
 8007e7c:	9b06      	ldr	r3, [sp, #24]
 8007e7e:	465a      	mov	r2, fp
 8007e80:	9300      	str	r3, [sp, #0]
 8007e82:	4650      	mov	r0, sl
 8007e84:	4623      	mov	r3, r4
 8007e86:	9908      	ldr	r1, [sp, #32]
 8007e88:	f001 ff16 	bl	8009cb8 <__s2b>
 8007e8c:	9008      	str	r0, [sp, #32]
 8007e8e:	2800      	cmp	r0, #0
 8007e90:	f43f af21 	beq.w	8007cd6 <_strtod_l+0x46e>
 8007e94:	9b04      	ldr	r3, [sp, #16]
 8007e96:	f04f 0b00 	mov.w	fp, #0
 8007e9a:	1b5d      	subs	r5, r3, r5
 8007e9c:	9b07      	ldr	r3, [sp, #28]
 8007e9e:	f8cd b010 	str.w	fp, [sp, #16]
 8007ea2:	2b00      	cmp	r3, #0
 8007ea4:	bfb4      	ite	lt
 8007ea6:	462b      	movlt	r3, r5
 8007ea8:	2300      	movge	r3, #0
 8007eaa:	930e      	str	r3, [sp, #56]	; 0x38
 8007eac:	9b07      	ldr	r3, [sp, #28]
 8007eae:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8007eb2:	9314      	str	r3, [sp, #80]	; 0x50
 8007eb4:	9b08      	ldr	r3, [sp, #32]
 8007eb6:	4650      	mov	r0, sl
 8007eb8:	6859      	ldr	r1, [r3, #4]
 8007eba:	f001 fe55 	bl	8009b68 <_Balloc>
 8007ebe:	9006      	str	r0, [sp, #24]
 8007ec0:	2800      	cmp	r0, #0
 8007ec2:	f43f af10 	beq.w	8007ce6 <_strtod_l+0x47e>
 8007ec6:	9b08      	ldr	r3, [sp, #32]
 8007ec8:	300c      	adds	r0, #12
 8007eca:	691a      	ldr	r2, [r3, #16]
 8007ecc:	f103 010c 	add.w	r1, r3, #12
 8007ed0:	3202      	adds	r2, #2
 8007ed2:	0092      	lsls	r2, r2, #2
 8007ed4:	f001 fe3a 	bl	8009b4c <memcpy>
 8007ed8:	ab1c      	add	r3, sp, #112	; 0x70
 8007eda:	9301      	str	r3, [sp, #4]
 8007edc:	ab1b      	add	r3, sp, #108	; 0x6c
 8007ede:	9300      	str	r3, [sp, #0]
 8007ee0:	4642      	mov	r2, r8
 8007ee2:	464b      	mov	r3, r9
 8007ee4:	4650      	mov	r0, sl
 8007ee6:	e9cd 890c 	strd	r8, r9, [sp, #48]	; 0x30
 8007eea:	f002 fa27 	bl	800a33c <__d2b>
 8007eee:	901a      	str	r0, [sp, #104]	; 0x68
 8007ef0:	2800      	cmp	r0, #0
 8007ef2:	f43f aef8 	beq.w	8007ce6 <_strtod_l+0x47e>
 8007ef6:	2101      	movs	r1, #1
 8007ef8:	4650      	mov	r0, sl
 8007efa:	f001 ff75 	bl	8009de8 <__i2b>
 8007efe:	4603      	mov	r3, r0
 8007f00:	9004      	str	r0, [sp, #16]
 8007f02:	2800      	cmp	r0, #0
 8007f04:	f43f aeef 	beq.w	8007ce6 <_strtod_l+0x47e>
 8007f08:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 8007f0a:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8007f0c:	2d00      	cmp	r5, #0
 8007f0e:	bfab      	itete	ge
 8007f10:	9b0e      	ldrge	r3, [sp, #56]	; 0x38
 8007f12:	9b14      	ldrlt	r3, [sp, #80]	; 0x50
 8007f14:	18ee      	addge	r6, r5, r3
 8007f16:	1b5c      	sublt	r4, r3, r5
 8007f18:	9b05      	ldr	r3, [sp, #20]
 8007f1a:	bfa8      	it	ge
 8007f1c:	9c14      	ldrge	r4, [sp, #80]	; 0x50
 8007f1e:	eba5 0503 	sub.w	r5, r5, r3
 8007f22:	4415      	add	r5, r2
 8007f24:	4b6e      	ldr	r3, [pc, #440]	; (80080e0 <_strtod_l+0x878>)
 8007f26:	f105 35ff 	add.w	r5, r5, #4294967295
 8007f2a:	bfb8      	it	lt
 8007f2c:	9e0e      	ldrlt	r6, [sp, #56]	; 0x38
 8007f2e:	429d      	cmp	r5, r3
 8007f30:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8007f34:	f280 80c4 	bge.w	80080c0 <_strtod_l+0x858>
 8007f38:	1b5b      	subs	r3, r3, r5
 8007f3a:	2b1f      	cmp	r3, #31
 8007f3c:	f04f 0701 	mov.w	r7, #1
 8007f40:	eba2 0203 	sub.w	r2, r2, r3
 8007f44:	f300 80b1 	bgt.w	80080aa <_strtod_l+0x842>
 8007f48:	2500      	movs	r5, #0
 8007f4a:	fa07 f303 	lsl.w	r3, r7, r3
 8007f4e:	930f      	str	r3, [sp, #60]	; 0x3c
 8007f50:	18b7      	adds	r7, r6, r2
 8007f52:	9b05      	ldr	r3, [sp, #20]
 8007f54:	42be      	cmp	r6, r7
 8007f56:	4414      	add	r4, r2
 8007f58:	441c      	add	r4, r3
 8007f5a:	4633      	mov	r3, r6
 8007f5c:	bfa8      	it	ge
 8007f5e:	463b      	movge	r3, r7
 8007f60:	42a3      	cmp	r3, r4
 8007f62:	bfa8      	it	ge
 8007f64:	4623      	movge	r3, r4
 8007f66:	2b00      	cmp	r3, #0
 8007f68:	bfc2      	ittt	gt
 8007f6a:	1aff      	subgt	r7, r7, r3
 8007f6c:	1ae4      	subgt	r4, r4, r3
 8007f6e:	1af6      	subgt	r6, r6, r3
 8007f70:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007f72:	2b00      	cmp	r3, #0
 8007f74:	dd17      	ble.n	8007fa6 <_strtod_l+0x73e>
 8007f76:	461a      	mov	r2, r3
 8007f78:	4650      	mov	r0, sl
 8007f7a:	9904      	ldr	r1, [sp, #16]
 8007f7c:	f001 fff2 	bl	8009f64 <__pow5mult>
 8007f80:	9004      	str	r0, [sp, #16]
 8007f82:	2800      	cmp	r0, #0
 8007f84:	f43f aeaf 	beq.w	8007ce6 <_strtod_l+0x47e>
 8007f88:	4601      	mov	r1, r0
 8007f8a:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8007f8c:	4650      	mov	r0, sl
 8007f8e:	f001 ff41 	bl	8009e14 <__multiply>
 8007f92:	9009      	str	r0, [sp, #36]	; 0x24
 8007f94:	2800      	cmp	r0, #0
 8007f96:	f43f aea6 	beq.w	8007ce6 <_strtod_l+0x47e>
 8007f9a:	4650      	mov	r0, sl
 8007f9c:	991a      	ldr	r1, [sp, #104]	; 0x68
 8007f9e:	f001 fe23 	bl	8009be8 <_Bfree>
 8007fa2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007fa4:	931a      	str	r3, [sp, #104]	; 0x68
 8007fa6:	2f00      	cmp	r7, #0
 8007fa8:	f300 808e 	bgt.w	80080c8 <_strtod_l+0x860>
 8007fac:	9b07      	ldr	r3, [sp, #28]
 8007fae:	2b00      	cmp	r3, #0
 8007fb0:	dd08      	ble.n	8007fc4 <_strtod_l+0x75c>
 8007fb2:	4650      	mov	r0, sl
 8007fb4:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8007fb6:	9906      	ldr	r1, [sp, #24]
 8007fb8:	f001 ffd4 	bl	8009f64 <__pow5mult>
 8007fbc:	9006      	str	r0, [sp, #24]
 8007fbe:	2800      	cmp	r0, #0
 8007fc0:	f43f ae91 	beq.w	8007ce6 <_strtod_l+0x47e>
 8007fc4:	2c00      	cmp	r4, #0
 8007fc6:	dd08      	ble.n	8007fda <_strtod_l+0x772>
 8007fc8:	4622      	mov	r2, r4
 8007fca:	4650      	mov	r0, sl
 8007fcc:	9906      	ldr	r1, [sp, #24]
 8007fce:	f002 f823 	bl	800a018 <__lshift>
 8007fd2:	9006      	str	r0, [sp, #24]
 8007fd4:	2800      	cmp	r0, #0
 8007fd6:	f43f ae86 	beq.w	8007ce6 <_strtod_l+0x47e>
 8007fda:	2e00      	cmp	r6, #0
 8007fdc:	dd08      	ble.n	8007ff0 <_strtod_l+0x788>
 8007fde:	4632      	mov	r2, r6
 8007fe0:	4650      	mov	r0, sl
 8007fe2:	9904      	ldr	r1, [sp, #16]
 8007fe4:	f002 f818 	bl	800a018 <__lshift>
 8007fe8:	9004      	str	r0, [sp, #16]
 8007fea:	2800      	cmp	r0, #0
 8007fec:	f43f ae7b 	beq.w	8007ce6 <_strtod_l+0x47e>
 8007ff0:	4650      	mov	r0, sl
 8007ff2:	9a06      	ldr	r2, [sp, #24]
 8007ff4:	991a      	ldr	r1, [sp, #104]	; 0x68
 8007ff6:	f002 f89b 	bl	800a130 <__mdiff>
 8007ffa:	4683      	mov	fp, r0
 8007ffc:	2800      	cmp	r0, #0
 8007ffe:	f43f ae72 	beq.w	8007ce6 <_strtod_l+0x47e>
 8008002:	2400      	movs	r4, #0
 8008004:	68c3      	ldr	r3, [r0, #12]
 8008006:	9904      	ldr	r1, [sp, #16]
 8008008:	60c4      	str	r4, [r0, #12]
 800800a:	930b      	str	r3, [sp, #44]	; 0x2c
 800800c:	f002 f874 	bl	800a0f8 <__mcmp>
 8008010:	42a0      	cmp	r0, r4
 8008012:	da6b      	bge.n	80080ec <_strtod_l+0x884>
 8008014:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008016:	ea53 0308 	orrs.w	r3, r3, r8
 800801a:	f040 8091 	bne.w	8008140 <_strtod_l+0x8d8>
 800801e:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8008022:	2b00      	cmp	r3, #0
 8008024:	f040 808c 	bne.w	8008140 <_strtod_l+0x8d8>
 8008028:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800802c:	0d1b      	lsrs	r3, r3, #20
 800802e:	051b      	lsls	r3, r3, #20
 8008030:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8008034:	f240 8084 	bls.w	8008140 <_strtod_l+0x8d8>
 8008038:	f8db 3014 	ldr.w	r3, [fp, #20]
 800803c:	b91b      	cbnz	r3, 8008046 <_strtod_l+0x7de>
 800803e:	f8db 3010 	ldr.w	r3, [fp, #16]
 8008042:	2b01      	cmp	r3, #1
 8008044:	dd7c      	ble.n	8008140 <_strtod_l+0x8d8>
 8008046:	4659      	mov	r1, fp
 8008048:	2201      	movs	r2, #1
 800804a:	4650      	mov	r0, sl
 800804c:	f001 ffe4 	bl	800a018 <__lshift>
 8008050:	9904      	ldr	r1, [sp, #16]
 8008052:	4683      	mov	fp, r0
 8008054:	f002 f850 	bl	800a0f8 <__mcmp>
 8008058:	2800      	cmp	r0, #0
 800805a:	dd71      	ble.n	8008140 <_strtod_l+0x8d8>
 800805c:	9905      	ldr	r1, [sp, #20]
 800805e:	464b      	mov	r3, r9
 8008060:	4a20      	ldr	r2, [pc, #128]	; (80080e4 <_strtod_l+0x87c>)
 8008062:	2900      	cmp	r1, #0
 8008064:	f000 808c 	beq.w	8008180 <_strtod_l+0x918>
 8008068:	ea02 0109 	and.w	r1, r2, r9
 800806c:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8008070:	f300 8086 	bgt.w	8008180 <_strtod_l+0x918>
 8008074:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8008078:	f77f aeaa 	ble.w	8007dd0 <_strtod_l+0x568>
 800807c:	4640      	mov	r0, r8
 800807e:	4649      	mov	r1, r9
 8008080:	4b19      	ldr	r3, [pc, #100]	; (80080e8 <_strtod_l+0x880>)
 8008082:	2200      	movs	r2, #0
 8008084:	f7f8 fa28 	bl	80004d8 <__aeabi_dmul>
 8008088:	460b      	mov	r3, r1
 800808a:	4303      	orrs	r3, r0
 800808c:	bf08      	it	eq
 800808e:	2322      	moveq	r3, #34	; 0x22
 8008090:	4680      	mov	r8, r0
 8008092:	4689      	mov	r9, r1
 8008094:	bf08      	it	eq
 8008096:	f8ca 3000 	streq.w	r3, [sl]
 800809a:	e62f      	b.n	8007cfc <_strtod_l+0x494>
 800809c:	f04f 32ff 	mov.w	r2, #4294967295
 80080a0:	fa02 f303 	lsl.w	r3, r2, r3
 80080a4:	ea03 0808 	and.w	r8, r3, r8
 80080a8:	e6e0      	b.n	8007e6c <_strtod_l+0x604>
 80080aa:	f1c5 457f 	rsb	r5, r5, #4278190080	; 0xff000000
 80080ae:	f505 057f 	add.w	r5, r5, #16711680	; 0xff0000
 80080b2:	f505 457b 	add.w	r5, r5, #64256	; 0xfb00
 80080b6:	35e2      	adds	r5, #226	; 0xe2
 80080b8:	fa07 f505 	lsl.w	r5, r7, r5
 80080bc:	970f      	str	r7, [sp, #60]	; 0x3c
 80080be:	e747      	b.n	8007f50 <_strtod_l+0x6e8>
 80080c0:	2301      	movs	r3, #1
 80080c2:	2500      	movs	r5, #0
 80080c4:	930f      	str	r3, [sp, #60]	; 0x3c
 80080c6:	e743      	b.n	8007f50 <_strtod_l+0x6e8>
 80080c8:	463a      	mov	r2, r7
 80080ca:	4650      	mov	r0, sl
 80080cc:	991a      	ldr	r1, [sp, #104]	; 0x68
 80080ce:	f001 ffa3 	bl	800a018 <__lshift>
 80080d2:	901a      	str	r0, [sp, #104]	; 0x68
 80080d4:	2800      	cmp	r0, #0
 80080d6:	f47f af69 	bne.w	8007fac <_strtod_l+0x744>
 80080da:	e604      	b.n	8007ce6 <_strtod_l+0x47e>
 80080dc:	0800b970 	.word	0x0800b970
 80080e0:	fffffc02 	.word	0xfffffc02
 80080e4:	7ff00000 	.word	0x7ff00000
 80080e8:	39500000 	.word	0x39500000
 80080ec:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 80080f0:	d165      	bne.n	80081be <_strtod_l+0x956>
 80080f2:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80080f4:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80080f8:	b35a      	cbz	r2, 8008152 <_strtod_l+0x8ea>
 80080fa:	4a99      	ldr	r2, [pc, #612]	; (8008360 <_strtod_l+0xaf8>)
 80080fc:	4293      	cmp	r3, r2
 80080fe:	d12b      	bne.n	8008158 <_strtod_l+0x8f0>
 8008100:	9b05      	ldr	r3, [sp, #20]
 8008102:	4641      	mov	r1, r8
 8008104:	b303      	cbz	r3, 8008148 <_strtod_l+0x8e0>
 8008106:	464a      	mov	r2, r9
 8008108:	4b96      	ldr	r3, [pc, #600]	; (8008364 <_strtod_l+0xafc>)
 800810a:	4013      	ands	r3, r2
 800810c:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8008110:	f04f 32ff 	mov.w	r2, #4294967295
 8008114:	d81b      	bhi.n	800814e <_strtod_l+0x8e6>
 8008116:	0d1b      	lsrs	r3, r3, #20
 8008118:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800811c:	fa02 f303 	lsl.w	r3, r2, r3
 8008120:	4299      	cmp	r1, r3
 8008122:	d119      	bne.n	8008158 <_strtod_l+0x8f0>
 8008124:	4b90      	ldr	r3, [pc, #576]	; (8008368 <_strtod_l+0xb00>)
 8008126:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008128:	429a      	cmp	r2, r3
 800812a:	d102      	bne.n	8008132 <_strtod_l+0x8ca>
 800812c:	3101      	adds	r1, #1
 800812e:	f43f adda 	beq.w	8007ce6 <_strtod_l+0x47e>
 8008132:	f04f 0800 	mov.w	r8, #0
 8008136:	4b8b      	ldr	r3, [pc, #556]	; (8008364 <_strtod_l+0xafc>)
 8008138:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800813a:	401a      	ands	r2, r3
 800813c:	f502 1980 	add.w	r9, r2, #1048576	; 0x100000
 8008140:	9b05      	ldr	r3, [sp, #20]
 8008142:	2b00      	cmp	r3, #0
 8008144:	d19a      	bne.n	800807c <_strtod_l+0x814>
 8008146:	e5d9      	b.n	8007cfc <_strtod_l+0x494>
 8008148:	f04f 33ff 	mov.w	r3, #4294967295
 800814c:	e7e8      	b.n	8008120 <_strtod_l+0x8b8>
 800814e:	4613      	mov	r3, r2
 8008150:	e7e6      	b.n	8008120 <_strtod_l+0x8b8>
 8008152:	ea53 0308 	orrs.w	r3, r3, r8
 8008156:	d081      	beq.n	800805c <_strtod_l+0x7f4>
 8008158:	b1e5      	cbz	r5, 8008194 <_strtod_l+0x92c>
 800815a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800815c:	421d      	tst	r5, r3
 800815e:	d0ef      	beq.n	8008140 <_strtod_l+0x8d8>
 8008160:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008162:	4640      	mov	r0, r8
 8008164:	4649      	mov	r1, r9
 8008166:	9a05      	ldr	r2, [sp, #20]
 8008168:	b1c3      	cbz	r3, 800819c <_strtod_l+0x934>
 800816a:	f7ff fb5b 	bl	8007824 <sulp>
 800816e:	4602      	mov	r2, r0
 8008170:	460b      	mov	r3, r1
 8008172:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8008176:	f7f7 fff9 	bl	800016c <__adddf3>
 800817a:	4680      	mov	r8, r0
 800817c:	4689      	mov	r9, r1
 800817e:	e7df      	b.n	8008140 <_strtod_l+0x8d8>
 8008180:	4013      	ands	r3, r2
 8008182:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8008186:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 800818a:	f04f 38ff 	mov.w	r8, #4294967295
 800818e:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 8008192:	e7d5      	b.n	8008140 <_strtod_l+0x8d8>
 8008194:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008196:	ea13 0f08 	tst.w	r3, r8
 800819a:	e7e0      	b.n	800815e <_strtod_l+0x8f6>
 800819c:	f7ff fb42 	bl	8007824 <sulp>
 80081a0:	4602      	mov	r2, r0
 80081a2:	460b      	mov	r3, r1
 80081a4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80081a8:	f7f7 ffde 	bl	8000168 <__aeabi_dsub>
 80081ac:	2200      	movs	r2, #0
 80081ae:	2300      	movs	r3, #0
 80081b0:	4680      	mov	r8, r0
 80081b2:	4689      	mov	r9, r1
 80081b4:	f7f8 fbf8 	bl	80009a8 <__aeabi_dcmpeq>
 80081b8:	2800      	cmp	r0, #0
 80081ba:	d0c1      	beq.n	8008140 <_strtod_l+0x8d8>
 80081bc:	e608      	b.n	8007dd0 <_strtod_l+0x568>
 80081be:	4658      	mov	r0, fp
 80081c0:	9904      	ldr	r1, [sp, #16]
 80081c2:	f002 f917 	bl	800a3f4 <__ratio>
 80081c6:	2200      	movs	r2, #0
 80081c8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80081cc:	4606      	mov	r6, r0
 80081ce:	460f      	mov	r7, r1
 80081d0:	f7f8 fbfe 	bl	80009d0 <__aeabi_dcmple>
 80081d4:	2800      	cmp	r0, #0
 80081d6:	d070      	beq.n	80082ba <_strtod_l+0xa52>
 80081d8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80081da:	2b00      	cmp	r3, #0
 80081dc:	d042      	beq.n	8008264 <_strtod_l+0x9fc>
 80081de:	2600      	movs	r6, #0
 80081e0:	4f62      	ldr	r7, [pc, #392]	; (800836c <_strtod_l+0xb04>)
 80081e2:	4d62      	ldr	r5, [pc, #392]	; (800836c <_strtod_l+0xb04>)
 80081e4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80081e6:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80081ea:	0d1b      	lsrs	r3, r3, #20
 80081ec:	051b      	lsls	r3, r3, #20
 80081ee:	930f      	str	r3, [sp, #60]	; 0x3c
 80081f0:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80081f2:	4b5f      	ldr	r3, [pc, #380]	; (8008370 <_strtod_l+0xb08>)
 80081f4:	429a      	cmp	r2, r3
 80081f6:	f040 80c3 	bne.w	8008380 <_strtod_l+0xb18>
 80081fa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80081fc:	4640      	mov	r0, r8
 80081fe:	f1a3 7954 	sub.w	r9, r3, #55574528	; 0x3500000
 8008202:	4649      	mov	r1, r9
 8008204:	f002 f820 	bl	800a248 <__ulp>
 8008208:	4602      	mov	r2, r0
 800820a:	460b      	mov	r3, r1
 800820c:	4630      	mov	r0, r6
 800820e:	4639      	mov	r1, r7
 8008210:	f7f8 f962 	bl	80004d8 <__aeabi_dmul>
 8008214:	4642      	mov	r2, r8
 8008216:	464b      	mov	r3, r9
 8008218:	f7f7 ffa8 	bl	800016c <__adddf3>
 800821c:	460b      	mov	r3, r1
 800821e:	4951      	ldr	r1, [pc, #324]	; (8008364 <_strtod_l+0xafc>)
 8008220:	4a54      	ldr	r2, [pc, #336]	; (8008374 <_strtod_l+0xb0c>)
 8008222:	4019      	ands	r1, r3
 8008224:	4291      	cmp	r1, r2
 8008226:	4680      	mov	r8, r0
 8008228:	d95d      	bls.n	80082e6 <_strtod_l+0xa7e>
 800822a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800822c:	4b4e      	ldr	r3, [pc, #312]	; (8008368 <_strtod_l+0xb00>)
 800822e:	429a      	cmp	r2, r3
 8008230:	d103      	bne.n	800823a <_strtod_l+0x9d2>
 8008232:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008234:	3301      	adds	r3, #1
 8008236:	f43f ad56 	beq.w	8007ce6 <_strtod_l+0x47e>
 800823a:	f04f 38ff 	mov.w	r8, #4294967295
 800823e:	f8df 9128 	ldr.w	r9, [pc, #296]	; 8008368 <_strtod_l+0xb00>
 8008242:	4650      	mov	r0, sl
 8008244:	991a      	ldr	r1, [sp, #104]	; 0x68
 8008246:	f001 fccf 	bl	8009be8 <_Bfree>
 800824a:	4650      	mov	r0, sl
 800824c:	9906      	ldr	r1, [sp, #24]
 800824e:	f001 fccb 	bl	8009be8 <_Bfree>
 8008252:	4650      	mov	r0, sl
 8008254:	9904      	ldr	r1, [sp, #16]
 8008256:	f001 fcc7 	bl	8009be8 <_Bfree>
 800825a:	4659      	mov	r1, fp
 800825c:	4650      	mov	r0, sl
 800825e:	f001 fcc3 	bl	8009be8 <_Bfree>
 8008262:	e627      	b.n	8007eb4 <_strtod_l+0x64c>
 8008264:	f1b8 0f00 	cmp.w	r8, #0
 8008268:	d119      	bne.n	800829e <_strtod_l+0xa36>
 800826a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800826c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008270:	b9e3      	cbnz	r3, 80082ac <_strtod_l+0xa44>
 8008272:	2200      	movs	r2, #0
 8008274:	4630      	mov	r0, r6
 8008276:	4639      	mov	r1, r7
 8008278:	4b3c      	ldr	r3, [pc, #240]	; (800836c <_strtod_l+0xb04>)
 800827a:	f7f8 fb9f 	bl	80009bc <__aeabi_dcmplt>
 800827e:	b9c8      	cbnz	r0, 80082b4 <_strtod_l+0xa4c>
 8008280:	2200      	movs	r2, #0
 8008282:	4630      	mov	r0, r6
 8008284:	4639      	mov	r1, r7
 8008286:	4b3c      	ldr	r3, [pc, #240]	; (8008378 <_strtod_l+0xb10>)
 8008288:	f7f8 f926 	bl	80004d8 <__aeabi_dmul>
 800828c:	4604      	mov	r4, r0
 800828e:	460d      	mov	r5, r1
 8008290:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 8008294:	9416      	str	r4, [sp, #88]	; 0x58
 8008296:	9317      	str	r3, [sp, #92]	; 0x5c
 8008298:	e9dd 6716 	ldrd	r6, r7, [sp, #88]	; 0x58
 800829c:	e7a2      	b.n	80081e4 <_strtod_l+0x97c>
 800829e:	f1b8 0f01 	cmp.w	r8, #1
 80082a2:	d103      	bne.n	80082ac <_strtod_l+0xa44>
 80082a4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80082a6:	2b00      	cmp	r3, #0
 80082a8:	f43f ad92 	beq.w	8007dd0 <_strtod_l+0x568>
 80082ac:	2600      	movs	r6, #0
 80082ae:	2400      	movs	r4, #0
 80082b0:	4f32      	ldr	r7, [pc, #200]	; (800837c <_strtod_l+0xb14>)
 80082b2:	e796      	b.n	80081e2 <_strtod_l+0x97a>
 80082b4:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 80082b6:	4d30      	ldr	r5, [pc, #192]	; (8008378 <_strtod_l+0xb10>)
 80082b8:	e7ea      	b.n	8008290 <_strtod_l+0xa28>
 80082ba:	4b2f      	ldr	r3, [pc, #188]	; (8008378 <_strtod_l+0xb10>)
 80082bc:	2200      	movs	r2, #0
 80082be:	4630      	mov	r0, r6
 80082c0:	4639      	mov	r1, r7
 80082c2:	f7f8 f909 	bl	80004d8 <__aeabi_dmul>
 80082c6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80082c8:	4604      	mov	r4, r0
 80082ca:	460d      	mov	r5, r1
 80082cc:	b933      	cbnz	r3, 80082dc <_strtod_l+0xa74>
 80082ce:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80082d2:	9010      	str	r0, [sp, #64]	; 0x40
 80082d4:	9311      	str	r3, [sp, #68]	; 0x44
 80082d6:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 80082da:	e783      	b.n	80081e4 <_strtod_l+0x97c>
 80082dc:	4602      	mov	r2, r0
 80082de:	460b      	mov	r3, r1
 80082e0:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 80082e4:	e7f7      	b.n	80082d6 <_strtod_l+0xa6e>
 80082e6:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 80082ea:	9b05      	ldr	r3, [sp, #20]
 80082ec:	2b00      	cmp	r3, #0
 80082ee:	d1a8      	bne.n	8008242 <_strtod_l+0x9da>
 80082f0:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80082f4:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80082f6:	0d1b      	lsrs	r3, r3, #20
 80082f8:	051b      	lsls	r3, r3, #20
 80082fa:	429a      	cmp	r2, r3
 80082fc:	d1a1      	bne.n	8008242 <_strtod_l+0x9da>
 80082fe:	4620      	mov	r0, r4
 8008300:	4629      	mov	r1, r5
 8008302:	f7f8 fc31 	bl	8000b68 <__aeabi_d2lz>
 8008306:	f7f8 f8b9 	bl	800047c <__aeabi_l2d>
 800830a:	4602      	mov	r2, r0
 800830c:	460b      	mov	r3, r1
 800830e:	4620      	mov	r0, r4
 8008310:	4629      	mov	r1, r5
 8008312:	f7f7 ff29 	bl	8000168 <__aeabi_dsub>
 8008316:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8008318:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800831c:	ea43 0308 	orr.w	r3, r3, r8
 8008320:	4313      	orrs	r3, r2
 8008322:	4604      	mov	r4, r0
 8008324:	460d      	mov	r5, r1
 8008326:	d066      	beq.n	80083f6 <_strtod_l+0xb8e>
 8008328:	a309      	add	r3, pc, #36	; (adr r3, 8008350 <_strtod_l+0xae8>)
 800832a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800832e:	f7f8 fb45 	bl	80009bc <__aeabi_dcmplt>
 8008332:	2800      	cmp	r0, #0
 8008334:	f47f ace2 	bne.w	8007cfc <_strtod_l+0x494>
 8008338:	a307      	add	r3, pc, #28	; (adr r3, 8008358 <_strtod_l+0xaf0>)
 800833a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800833e:	4620      	mov	r0, r4
 8008340:	4629      	mov	r1, r5
 8008342:	f7f8 fb59 	bl	80009f8 <__aeabi_dcmpgt>
 8008346:	2800      	cmp	r0, #0
 8008348:	f43f af7b 	beq.w	8008242 <_strtod_l+0x9da>
 800834c:	e4d6      	b.n	8007cfc <_strtod_l+0x494>
 800834e:	bf00      	nop
 8008350:	94a03595 	.word	0x94a03595
 8008354:	3fdfffff 	.word	0x3fdfffff
 8008358:	35afe535 	.word	0x35afe535
 800835c:	3fe00000 	.word	0x3fe00000
 8008360:	000fffff 	.word	0x000fffff
 8008364:	7ff00000 	.word	0x7ff00000
 8008368:	7fefffff 	.word	0x7fefffff
 800836c:	3ff00000 	.word	0x3ff00000
 8008370:	7fe00000 	.word	0x7fe00000
 8008374:	7c9fffff 	.word	0x7c9fffff
 8008378:	3fe00000 	.word	0x3fe00000
 800837c:	bff00000 	.word	0xbff00000
 8008380:	9b05      	ldr	r3, [sp, #20]
 8008382:	b313      	cbz	r3, 80083ca <_strtod_l+0xb62>
 8008384:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008386:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800838a:	d81e      	bhi.n	80083ca <_strtod_l+0xb62>
 800838c:	a326      	add	r3, pc, #152	; (adr r3, 8008428 <_strtod_l+0xbc0>)
 800838e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008392:	4620      	mov	r0, r4
 8008394:	4629      	mov	r1, r5
 8008396:	f7f8 fb1b 	bl	80009d0 <__aeabi_dcmple>
 800839a:	b190      	cbz	r0, 80083c2 <_strtod_l+0xb5a>
 800839c:	4629      	mov	r1, r5
 800839e:	4620      	mov	r0, r4
 80083a0:	f7f8 fb72 	bl	8000a88 <__aeabi_d2uiz>
 80083a4:	2801      	cmp	r0, #1
 80083a6:	bf38      	it	cc
 80083a8:	2001      	movcc	r0, #1
 80083aa:	f7f8 f81b 	bl	80003e4 <__aeabi_ui2d>
 80083ae:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80083b0:	4604      	mov	r4, r0
 80083b2:	460d      	mov	r5, r1
 80083b4:	b9d3      	cbnz	r3, 80083ec <_strtod_l+0xb84>
 80083b6:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80083ba:	9012      	str	r0, [sp, #72]	; 0x48
 80083bc:	9313      	str	r3, [sp, #76]	; 0x4c
 80083be:	e9dd 6712 	ldrd	r6, r7, [sp, #72]	; 0x48
 80083c2:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80083c4:	f107 63d6 	add.w	r3, r7, #112197632	; 0x6b00000
 80083c8:	1a9f      	subs	r7, r3, r2
 80083ca:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80083ce:	f001 ff3b 	bl	800a248 <__ulp>
 80083d2:	4602      	mov	r2, r0
 80083d4:	460b      	mov	r3, r1
 80083d6:	4630      	mov	r0, r6
 80083d8:	4639      	mov	r1, r7
 80083da:	f7f8 f87d 	bl	80004d8 <__aeabi_dmul>
 80083de:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 80083e2:	f7f7 fec3 	bl	800016c <__adddf3>
 80083e6:	4680      	mov	r8, r0
 80083e8:	4689      	mov	r9, r1
 80083ea:	e77e      	b.n	80082ea <_strtod_l+0xa82>
 80083ec:	4602      	mov	r2, r0
 80083ee:	460b      	mov	r3, r1
 80083f0:	e9cd 2312 	strd	r2, r3, [sp, #72]	; 0x48
 80083f4:	e7e3      	b.n	80083be <_strtod_l+0xb56>
 80083f6:	a30e      	add	r3, pc, #56	; (adr r3, 8008430 <_strtod_l+0xbc8>)
 80083f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80083fc:	f7f8 fade 	bl	80009bc <__aeabi_dcmplt>
 8008400:	e7a1      	b.n	8008346 <_strtod_l+0xade>
 8008402:	2300      	movs	r3, #0
 8008404:	930a      	str	r3, [sp, #40]	; 0x28
 8008406:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8008408:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800840a:	6013      	str	r3, [r2, #0]
 800840c:	f7ff ba71 	b.w	80078f2 <_strtod_l+0x8a>
 8008410:	2a65      	cmp	r2, #101	; 0x65
 8008412:	f43f ab63 	beq.w	8007adc <_strtod_l+0x274>
 8008416:	2a45      	cmp	r2, #69	; 0x45
 8008418:	f43f ab60 	beq.w	8007adc <_strtod_l+0x274>
 800841c:	2301      	movs	r3, #1
 800841e:	f7ff bb95 	b.w	8007b4c <_strtod_l+0x2e4>
 8008422:	bf00      	nop
 8008424:	f3af 8000 	nop.w
 8008428:	ffc00000 	.word	0xffc00000
 800842c:	41dfffff 	.word	0x41dfffff
 8008430:	94a03595 	.word	0x94a03595
 8008434:	3fcfffff 	.word	0x3fcfffff

08008438 <_strtod_r>:
 8008438:	4b01      	ldr	r3, [pc, #4]	; (8008440 <_strtod_r+0x8>)
 800843a:	f7ff ba15 	b.w	8007868 <_strtod_l>
 800843e:	bf00      	nop
 8008440:	20000078 	.word	0x20000078

08008444 <_strtol_l.constprop.0>:
 8008444:	2b01      	cmp	r3, #1
 8008446:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800844a:	4680      	mov	r8, r0
 800844c:	d001      	beq.n	8008452 <_strtol_l.constprop.0+0xe>
 800844e:	2b24      	cmp	r3, #36	; 0x24
 8008450:	d906      	bls.n	8008460 <_strtol_l.constprop.0+0x1c>
 8008452:	f7fe fb0b 	bl	8006a6c <__errno>
 8008456:	2316      	movs	r3, #22
 8008458:	6003      	str	r3, [r0, #0]
 800845a:	2000      	movs	r0, #0
 800845c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008460:	460d      	mov	r5, r1
 8008462:	4f35      	ldr	r7, [pc, #212]	; (8008538 <_strtol_l.constprop.0+0xf4>)
 8008464:	4628      	mov	r0, r5
 8008466:	f815 4b01 	ldrb.w	r4, [r5], #1
 800846a:	5de6      	ldrb	r6, [r4, r7]
 800846c:	f016 0608 	ands.w	r6, r6, #8
 8008470:	d1f8      	bne.n	8008464 <_strtol_l.constprop.0+0x20>
 8008472:	2c2d      	cmp	r4, #45	; 0x2d
 8008474:	d12f      	bne.n	80084d6 <_strtol_l.constprop.0+0x92>
 8008476:	2601      	movs	r6, #1
 8008478:	782c      	ldrb	r4, [r5, #0]
 800847a:	1c85      	adds	r5, r0, #2
 800847c:	2b00      	cmp	r3, #0
 800847e:	d057      	beq.n	8008530 <_strtol_l.constprop.0+0xec>
 8008480:	2b10      	cmp	r3, #16
 8008482:	d109      	bne.n	8008498 <_strtol_l.constprop.0+0x54>
 8008484:	2c30      	cmp	r4, #48	; 0x30
 8008486:	d107      	bne.n	8008498 <_strtol_l.constprop.0+0x54>
 8008488:	7828      	ldrb	r0, [r5, #0]
 800848a:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 800848e:	2858      	cmp	r0, #88	; 0x58
 8008490:	d149      	bne.n	8008526 <_strtol_l.constprop.0+0xe2>
 8008492:	2310      	movs	r3, #16
 8008494:	786c      	ldrb	r4, [r5, #1]
 8008496:	3502      	adds	r5, #2
 8008498:	2700      	movs	r7, #0
 800849a:	f106 4e00 	add.w	lr, r6, #2147483648	; 0x80000000
 800849e:	f10e 3eff 	add.w	lr, lr, #4294967295
 80084a2:	fbbe f9f3 	udiv	r9, lr, r3
 80084a6:	4638      	mov	r0, r7
 80084a8:	fb03 ea19 	mls	sl, r3, r9, lr
 80084ac:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 80084b0:	f1bc 0f09 	cmp.w	ip, #9
 80084b4:	d814      	bhi.n	80084e0 <_strtol_l.constprop.0+0x9c>
 80084b6:	4664      	mov	r4, ip
 80084b8:	42a3      	cmp	r3, r4
 80084ba:	dd22      	ble.n	8008502 <_strtol_l.constprop.0+0xbe>
 80084bc:	2f00      	cmp	r7, #0
 80084be:	db1d      	blt.n	80084fc <_strtol_l.constprop.0+0xb8>
 80084c0:	4581      	cmp	r9, r0
 80084c2:	d31b      	bcc.n	80084fc <_strtol_l.constprop.0+0xb8>
 80084c4:	d101      	bne.n	80084ca <_strtol_l.constprop.0+0x86>
 80084c6:	45a2      	cmp	sl, r4
 80084c8:	db18      	blt.n	80084fc <_strtol_l.constprop.0+0xb8>
 80084ca:	2701      	movs	r7, #1
 80084cc:	fb00 4003 	mla	r0, r0, r3, r4
 80084d0:	f815 4b01 	ldrb.w	r4, [r5], #1
 80084d4:	e7ea      	b.n	80084ac <_strtol_l.constprop.0+0x68>
 80084d6:	2c2b      	cmp	r4, #43	; 0x2b
 80084d8:	bf04      	itt	eq
 80084da:	782c      	ldrbeq	r4, [r5, #0]
 80084dc:	1c85      	addeq	r5, r0, #2
 80084de:	e7cd      	b.n	800847c <_strtol_l.constprop.0+0x38>
 80084e0:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 80084e4:	f1bc 0f19 	cmp.w	ip, #25
 80084e8:	d801      	bhi.n	80084ee <_strtol_l.constprop.0+0xaa>
 80084ea:	3c37      	subs	r4, #55	; 0x37
 80084ec:	e7e4      	b.n	80084b8 <_strtol_l.constprop.0+0x74>
 80084ee:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 80084f2:	f1bc 0f19 	cmp.w	ip, #25
 80084f6:	d804      	bhi.n	8008502 <_strtol_l.constprop.0+0xbe>
 80084f8:	3c57      	subs	r4, #87	; 0x57
 80084fa:	e7dd      	b.n	80084b8 <_strtol_l.constprop.0+0x74>
 80084fc:	f04f 37ff 	mov.w	r7, #4294967295
 8008500:	e7e6      	b.n	80084d0 <_strtol_l.constprop.0+0x8c>
 8008502:	2f00      	cmp	r7, #0
 8008504:	da07      	bge.n	8008516 <_strtol_l.constprop.0+0xd2>
 8008506:	2322      	movs	r3, #34	; 0x22
 8008508:	4670      	mov	r0, lr
 800850a:	f8c8 3000 	str.w	r3, [r8]
 800850e:	2a00      	cmp	r2, #0
 8008510:	d0a4      	beq.n	800845c <_strtol_l.constprop.0+0x18>
 8008512:	1e69      	subs	r1, r5, #1
 8008514:	e005      	b.n	8008522 <_strtol_l.constprop.0+0xde>
 8008516:	b106      	cbz	r6, 800851a <_strtol_l.constprop.0+0xd6>
 8008518:	4240      	negs	r0, r0
 800851a:	2a00      	cmp	r2, #0
 800851c:	d09e      	beq.n	800845c <_strtol_l.constprop.0+0x18>
 800851e:	2f00      	cmp	r7, #0
 8008520:	d1f7      	bne.n	8008512 <_strtol_l.constprop.0+0xce>
 8008522:	6011      	str	r1, [r2, #0]
 8008524:	e79a      	b.n	800845c <_strtol_l.constprop.0+0x18>
 8008526:	2430      	movs	r4, #48	; 0x30
 8008528:	2b00      	cmp	r3, #0
 800852a:	d1b5      	bne.n	8008498 <_strtol_l.constprop.0+0x54>
 800852c:	2308      	movs	r3, #8
 800852e:	e7b3      	b.n	8008498 <_strtol_l.constprop.0+0x54>
 8008530:	2c30      	cmp	r4, #48	; 0x30
 8008532:	d0a9      	beq.n	8008488 <_strtol_l.constprop.0+0x44>
 8008534:	230a      	movs	r3, #10
 8008536:	e7af      	b.n	8008498 <_strtol_l.constprop.0+0x54>
 8008538:	0800b999 	.word	0x0800b999

0800853c <_strtol_r>:
 800853c:	f7ff bf82 	b.w	8008444 <_strtol_l.constprop.0>

08008540 <quorem>:
 8008540:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008544:	6903      	ldr	r3, [r0, #16]
 8008546:	690c      	ldr	r4, [r1, #16]
 8008548:	4607      	mov	r7, r0
 800854a:	42a3      	cmp	r3, r4
 800854c:	f2c0 8082 	blt.w	8008654 <quorem+0x114>
 8008550:	3c01      	subs	r4, #1
 8008552:	f100 0514 	add.w	r5, r0, #20
 8008556:	f101 0814 	add.w	r8, r1, #20
 800855a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800855e:	9301      	str	r3, [sp, #4]
 8008560:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8008564:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008568:	3301      	adds	r3, #1
 800856a:	429a      	cmp	r2, r3
 800856c:	fbb2 f6f3 	udiv	r6, r2, r3
 8008570:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8008574:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8008578:	d331      	bcc.n	80085de <quorem+0x9e>
 800857a:	f04f 0e00 	mov.w	lr, #0
 800857e:	4640      	mov	r0, r8
 8008580:	46ac      	mov	ip, r5
 8008582:	46f2      	mov	sl, lr
 8008584:	f850 2b04 	ldr.w	r2, [r0], #4
 8008588:	b293      	uxth	r3, r2
 800858a:	fb06 e303 	mla	r3, r6, r3, lr
 800858e:	0c12      	lsrs	r2, r2, #16
 8008590:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8008594:	b29b      	uxth	r3, r3
 8008596:	fb06 e202 	mla	r2, r6, r2, lr
 800859a:	ebaa 0303 	sub.w	r3, sl, r3
 800859e:	f8dc a000 	ldr.w	sl, [ip]
 80085a2:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80085a6:	fa1f fa8a 	uxth.w	sl, sl
 80085aa:	4453      	add	r3, sl
 80085ac:	f8dc a000 	ldr.w	sl, [ip]
 80085b0:	b292      	uxth	r2, r2
 80085b2:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 80085b6:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80085ba:	b29b      	uxth	r3, r3
 80085bc:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80085c0:	4581      	cmp	r9, r0
 80085c2:	ea4f 4a22 	mov.w	sl, r2, asr #16
 80085c6:	f84c 3b04 	str.w	r3, [ip], #4
 80085ca:	d2db      	bcs.n	8008584 <quorem+0x44>
 80085cc:	f855 300b 	ldr.w	r3, [r5, fp]
 80085d0:	b92b      	cbnz	r3, 80085de <quorem+0x9e>
 80085d2:	9b01      	ldr	r3, [sp, #4]
 80085d4:	3b04      	subs	r3, #4
 80085d6:	429d      	cmp	r5, r3
 80085d8:	461a      	mov	r2, r3
 80085da:	d32f      	bcc.n	800863c <quorem+0xfc>
 80085dc:	613c      	str	r4, [r7, #16]
 80085de:	4638      	mov	r0, r7
 80085e0:	f001 fd8a 	bl	800a0f8 <__mcmp>
 80085e4:	2800      	cmp	r0, #0
 80085e6:	db25      	blt.n	8008634 <quorem+0xf4>
 80085e8:	4628      	mov	r0, r5
 80085ea:	f04f 0c00 	mov.w	ip, #0
 80085ee:	3601      	adds	r6, #1
 80085f0:	f858 1b04 	ldr.w	r1, [r8], #4
 80085f4:	f8d0 e000 	ldr.w	lr, [r0]
 80085f8:	b28b      	uxth	r3, r1
 80085fa:	ebac 0303 	sub.w	r3, ip, r3
 80085fe:	fa1f f28e 	uxth.w	r2, lr
 8008602:	4413      	add	r3, r2
 8008604:	0c0a      	lsrs	r2, r1, #16
 8008606:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800860a:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800860e:	b29b      	uxth	r3, r3
 8008610:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008614:	45c1      	cmp	r9, r8
 8008616:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800861a:	f840 3b04 	str.w	r3, [r0], #4
 800861e:	d2e7      	bcs.n	80085f0 <quorem+0xb0>
 8008620:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008624:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8008628:	b922      	cbnz	r2, 8008634 <quorem+0xf4>
 800862a:	3b04      	subs	r3, #4
 800862c:	429d      	cmp	r5, r3
 800862e:	461a      	mov	r2, r3
 8008630:	d30a      	bcc.n	8008648 <quorem+0x108>
 8008632:	613c      	str	r4, [r7, #16]
 8008634:	4630      	mov	r0, r6
 8008636:	b003      	add	sp, #12
 8008638:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800863c:	6812      	ldr	r2, [r2, #0]
 800863e:	3b04      	subs	r3, #4
 8008640:	2a00      	cmp	r2, #0
 8008642:	d1cb      	bne.n	80085dc <quorem+0x9c>
 8008644:	3c01      	subs	r4, #1
 8008646:	e7c6      	b.n	80085d6 <quorem+0x96>
 8008648:	6812      	ldr	r2, [r2, #0]
 800864a:	3b04      	subs	r3, #4
 800864c:	2a00      	cmp	r2, #0
 800864e:	d1f0      	bne.n	8008632 <quorem+0xf2>
 8008650:	3c01      	subs	r4, #1
 8008652:	e7eb      	b.n	800862c <quorem+0xec>
 8008654:	2000      	movs	r0, #0
 8008656:	e7ee      	b.n	8008636 <quorem+0xf6>

08008658 <_dtoa_r>:
 8008658:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800865c:	4616      	mov	r6, r2
 800865e:	461f      	mov	r7, r3
 8008660:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8008662:	b099      	sub	sp, #100	; 0x64
 8008664:	4605      	mov	r5, r0
 8008666:	e9cd 6704 	strd	r6, r7, [sp, #16]
 800866a:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 800866e:	b974      	cbnz	r4, 800868e <_dtoa_r+0x36>
 8008670:	2010      	movs	r0, #16
 8008672:	f001 fa43 	bl	8009afc <malloc>
 8008676:	4602      	mov	r2, r0
 8008678:	6268      	str	r0, [r5, #36]	; 0x24
 800867a:	b920      	cbnz	r0, 8008686 <_dtoa_r+0x2e>
 800867c:	21ea      	movs	r1, #234	; 0xea
 800867e:	4ba8      	ldr	r3, [pc, #672]	; (8008920 <_dtoa_r+0x2c8>)
 8008680:	48a8      	ldr	r0, [pc, #672]	; (8008924 <_dtoa_r+0x2cc>)
 8008682:	f002 fc1b 	bl	800aebc <__assert_func>
 8008686:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800868a:	6004      	str	r4, [r0, #0]
 800868c:	60c4      	str	r4, [r0, #12]
 800868e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8008690:	6819      	ldr	r1, [r3, #0]
 8008692:	b151      	cbz	r1, 80086aa <_dtoa_r+0x52>
 8008694:	685a      	ldr	r2, [r3, #4]
 8008696:	2301      	movs	r3, #1
 8008698:	4093      	lsls	r3, r2
 800869a:	604a      	str	r2, [r1, #4]
 800869c:	608b      	str	r3, [r1, #8]
 800869e:	4628      	mov	r0, r5
 80086a0:	f001 faa2 	bl	8009be8 <_Bfree>
 80086a4:	2200      	movs	r2, #0
 80086a6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80086a8:	601a      	str	r2, [r3, #0]
 80086aa:	1e3b      	subs	r3, r7, #0
 80086ac:	bfaf      	iteee	ge
 80086ae:	2300      	movge	r3, #0
 80086b0:	2201      	movlt	r2, #1
 80086b2:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 80086b6:	9305      	strlt	r3, [sp, #20]
 80086b8:	bfa8      	it	ge
 80086ba:	f8c8 3000 	strge.w	r3, [r8]
 80086be:	f8dd 9014 	ldr.w	r9, [sp, #20]
 80086c2:	4b99      	ldr	r3, [pc, #612]	; (8008928 <_dtoa_r+0x2d0>)
 80086c4:	bfb8      	it	lt
 80086c6:	f8c8 2000 	strlt.w	r2, [r8]
 80086ca:	ea33 0309 	bics.w	r3, r3, r9
 80086ce:	d119      	bne.n	8008704 <_dtoa_r+0xac>
 80086d0:	f242 730f 	movw	r3, #9999	; 0x270f
 80086d4:	9a24      	ldr	r2, [sp, #144]	; 0x90
 80086d6:	6013      	str	r3, [r2, #0]
 80086d8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80086dc:	4333      	orrs	r3, r6
 80086de:	f000 857f 	beq.w	80091e0 <_dtoa_r+0xb88>
 80086e2:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80086e4:	b953      	cbnz	r3, 80086fc <_dtoa_r+0xa4>
 80086e6:	4b91      	ldr	r3, [pc, #580]	; (800892c <_dtoa_r+0x2d4>)
 80086e8:	e022      	b.n	8008730 <_dtoa_r+0xd8>
 80086ea:	4b91      	ldr	r3, [pc, #580]	; (8008930 <_dtoa_r+0x2d8>)
 80086ec:	9303      	str	r3, [sp, #12]
 80086ee:	3308      	adds	r3, #8
 80086f0:	9a26      	ldr	r2, [sp, #152]	; 0x98
 80086f2:	6013      	str	r3, [r2, #0]
 80086f4:	9803      	ldr	r0, [sp, #12]
 80086f6:	b019      	add	sp, #100	; 0x64
 80086f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80086fc:	4b8b      	ldr	r3, [pc, #556]	; (800892c <_dtoa_r+0x2d4>)
 80086fe:	9303      	str	r3, [sp, #12]
 8008700:	3303      	adds	r3, #3
 8008702:	e7f5      	b.n	80086f0 <_dtoa_r+0x98>
 8008704:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8008708:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 800870c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8008710:	2200      	movs	r2, #0
 8008712:	2300      	movs	r3, #0
 8008714:	f7f8 f948 	bl	80009a8 <__aeabi_dcmpeq>
 8008718:	4680      	mov	r8, r0
 800871a:	b158      	cbz	r0, 8008734 <_dtoa_r+0xdc>
 800871c:	2301      	movs	r3, #1
 800871e:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8008720:	6013      	str	r3, [r2, #0]
 8008722:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8008724:	2b00      	cmp	r3, #0
 8008726:	f000 8558 	beq.w	80091da <_dtoa_r+0xb82>
 800872a:	4882      	ldr	r0, [pc, #520]	; (8008934 <_dtoa_r+0x2dc>)
 800872c:	6018      	str	r0, [r3, #0]
 800872e:	1e43      	subs	r3, r0, #1
 8008730:	9303      	str	r3, [sp, #12]
 8008732:	e7df      	b.n	80086f4 <_dtoa_r+0x9c>
 8008734:	ab16      	add	r3, sp, #88	; 0x58
 8008736:	9301      	str	r3, [sp, #4]
 8008738:	ab17      	add	r3, sp, #92	; 0x5c
 800873a:	9300      	str	r3, [sp, #0]
 800873c:	4628      	mov	r0, r5
 800873e:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8008742:	f001 fdfb 	bl	800a33c <__d2b>
 8008746:	f3c9 540a 	ubfx	r4, r9, #20, #11
 800874a:	4683      	mov	fp, r0
 800874c:	2c00      	cmp	r4, #0
 800874e:	d07f      	beq.n	8008850 <_dtoa_r+0x1f8>
 8008750:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8008754:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008756:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 800875a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800875e:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 8008762:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 8008766:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 800876a:	2200      	movs	r2, #0
 800876c:	4b72      	ldr	r3, [pc, #456]	; (8008938 <_dtoa_r+0x2e0>)
 800876e:	f7f7 fcfb 	bl	8000168 <__aeabi_dsub>
 8008772:	a365      	add	r3, pc, #404	; (adr r3, 8008908 <_dtoa_r+0x2b0>)
 8008774:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008778:	f7f7 feae 	bl	80004d8 <__aeabi_dmul>
 800877c:	a364      	add	r3, pc, #400	; (adr r3, 8008910 <_dtoa_r+0x2b8>)
 800877e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008782:	f7f7 fcf3 	bl	800016c <__adddf3>
 8008786:	4606      	mov	r6, r0
 8008788:	4620      	mov	r0, r4
 800878a:	460f      	mov	r7, r1
 800878c:	f7f7 fe3a 	bl	8000404 <__aeabi_i2d>
 8008790:	a361      	add	r3, pc, #388	; (adr r3, 8008918 <_dtoa_r+0x2c0>)
 8008792:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008796:	f7f7 fe9f 	bl	80004d8 <__aeabi_dmul>
 800879a:	4602      	mov	r2, r0
 800879c:	460b      	mov	r3, r1
 800879e:	4630      	mov	r0, r6
 80087a0:	4639      	mov	r1, r7
 80087a2:	f7f7 fce3 	bl	800016c <__adddf3>
 80087a6:	4606      	mov	r6, r0
 80087a8:	460f      	mov	r7, r1
 80087aa:	f7f8 f945 	bl	8000a38 <__aeabi_d2iz>
 80087ae:	2200      	movs	r2, #0
 80087b0:	4682      	mov	sl, r0
 80087b2:	2300      	movs	r3, #0
 80087b4:	4630      	mov	r0, r6
 80087b6:	4639      	mov	r1, r7
 80087b8:	f7f8 f900 	bl	80009bc <__aeabi_dcmplt>
 80087bc:	b148      	cbz	r0, 80087d2 <_dtoa_r+0x17a>
 80087be:	4650      	mov	r0, sl
 80087c0:	f7f7 fe20 	bl	8000404 <__aeabi_i2d>
 80087c4:	4632      	mov	r2, r6
 80087c6:	463b      	mov	r3, r7
 80087c8:	f7f8 f8ee 	bl	80009a8 <__aeabi_dcmpeq>
 80087cc:	b908      	cbnz	r0, 80087d2 <_dtoa_r+0x17a>
 80087ce:	f10a 3aff 	add.w	sl, sl, #4294967295
 80087d2:	f1ba 0f16 	cmp.w	sl, #22
 80087d6:	d858      	bhi.n	800888a <_dtoa_r+0x232>
 80087d8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80087dc:	4b57      	ldr	r3, [pc, #348]	; (800893c <_dtoa_r+0x2e4>)
 80087de:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 80087e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80087e6:	f7f8 f8e9 	bl	80009bc <__aeabi_dcmplt>
 80087ea:	2800      	cmp	r0, #0
 80087ec:	d04f      	beq.n	800888e <_dtoa_r+0x236>
 80087ee:	2300      	movs	r3, #0
 80087f0:	f10a 3aff 	add.w	sl, sl, #4294967295
 80087f4:	930f      	str	r3, [sp, #60]	; 0x3c
 80087f6:	9b16      	ldr	r3, [sp, #88]	; 0x58
 80087f8:	1b1c      	subs	r4, r3, r4
 80087fa:	1e63      	subs	r3, r4, #1
 80087fc:	9309      	str	r3, [sp, #36]	; 0x24
 80087fe:	bf49      	itett	mi
 8008800:	f1c4 0301 	rsbmi	r3, r4, #1
 8008804:	2300      	movpl	r3, #0
 8008806:	9306      	strmi	r3, [sp, #24]
 8008808:	2300      	movmi	r3, #0
 800880a:	bf54      	ite	pl
 800880c:	9306      	strpl	r3, [sp, #24]
 800880e:	9309      	strmi	r3, [sp, #36]	; 0x24
 8008810:	f1ba 0f00 	cmp.w	sl, #0
 8008814:	db3d      	blt.n	8008892 <_dtoa_r+0x23a>
 8008816:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008818:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 800881c:	4453      	add	r3, sl
 800881e:	9309      	str	r3, [sp, #36]	; 0x24
 8008820:	2300      	movs	r3, #0
 8008822:	930a      	str	r3, [sp, #40]	; 0x28
 8008824:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8008826:	2b09      	cmp	r3, #9
 8008828:	f200 808c 	bhi.w	8008944 <_dtoa_r+0x2ec>
 800882c:	2b05      	cmp	r3, #5
 800882e:	bfc4      	itt	gt
 8008830:	3b04      	subgt	r3, #4
 8008832:	9322      	strgt	r3, [sp, #136]	; 0x88
 8008834:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8008836:	bfc8      	it	gt
 8008838:	2400      	movgt	r4, #0
 800883a:	f1a3 0302 	sub.w	r3, r3, #2
 800883e:	bfd8      	it	le
 8008840:	2401      	movle	r4, #1
 8008842:	2b03      	cmp	r3, #3
 8008844:	f200 808a 	bhi.w	800895c <_dtoa_r+0x304>
 8008848:	e8df f003 	tbb	[pc, r3]
 800884c:	5b4d4f2d 	.word	0x5b4d4f2d
 8008850:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 8008854:	441c      	add	r4, r3
 8008856:	f204 4332 	addw	r3, r4, #1074	; 0x432
 800885a:	2b20      	cmp	r3, #32
 800885c:	bfc3      	ittte	gt
 800885e:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8008862:	f204 4012 	addwgt	r0, r4, #1042	; 0x412
 8008866:	fa09 f303 	lslgt.w	r3, r9, r3
 800886a:	f1c3 0320 	rsble	r3, r3, #32
 800886e:	bfc6      	itte	gt
 8008870:	fa26 f000 	lsrgt.w	r0, r6, r0
 8008874:	4318      	orrgt	r0, r3
 8008876:	fa06 f003 	lslle.w	r0, r6, r3
 800887a:	f7f7 fdb3 	bl	80003e4 <__aeabi_ui2d>
 800887e:	2301      	movs	r3, #1
 8008880:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 8008884:	3c01      	subs	r4, #1
 8008886:	9313      	str	r3, [sp, #76]	; 0x4c
 8008888:	e76f      	b.n	800876a <_dtoa_r+0x112>
 800888a:	2301      	movs	r3, #1
 800888c:	e7b2      	b.n	80087f4 <_dtoa_r+0x19c>
 800888e:	900f      	str	r0, [sp, #60]	; 0x3c
 8008890:	e7b1      	b.n	80087f6 <_dtoa_r+0x19e>
 8008892:	9b06      	ldr	r3, [sp, #24]
 8008894:	eba3 030a 	sub.w	r3, r3, sl
 8008898:	9306      	str	r3, [sp, #24]
 800889a:	f1ca 0300 	rsb	r3, sl, #0
 800889e:	930a      	str	r3, [sp, #40]	; 0x28
 80088a0:	2300      	movs	r3, #0
 80088a2:	930e      	str	r3, [sp, #56]	; 0x38
 80088a4:	e7be      	b.n	8008824 <_dtoa_r+0x1cc>
 80088a6:	2300      	movs	r3, #0
 80088a8:	930b      	str	r3, [sp, #44]	; 0x2c
 80088aa:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80088ac:	2b00      	cmp	r3, #0
 80088ae:	dc58      	bgt.n	8008962 <_dtoa_r+0x30a>
 80088b0:	f04f 0901 	mov.w	r9, #1
 80088b4:	464b      	mov	r3, r9
 80088b6:	f8cd 9020 	str.w	r9, [sp, #32]
 80088ba:	f8cd 908c 	str.w	r9, [sp, #140]	; 0x8c
 80088be:	2200      	movs	r2, #0
 80088c0:	6a68      	ldr	r0, [r5, #36]	; 0x24
 80088c2:	6042      	str	r2, [r0, #4]
 80088c4:	2204      	movs	r2, #4
 80088c6:	f102 0614 	add.w	r6, r2, #20
 80088ca:	429e      	cmp	r6, r3
 80088cc:	6841      	ldr	r1, [r0, #4]
 80088ce:	d94e      	bls.n	800896e <_dtoa_r+0x316>
 80088d0:	4628      	mov	r0, r5
 80088d2:	f001 f949 	bl	8009b68 <_Balloc>
 80088d6:	9003      	str	r0, [sp, #12]
 80088d8:	2800      	cmp	r0, #0
 80088da:	d14c      	bne.n	8008976 <_dtoa_r+0x31e>
 80088dc:	4602      	mov	r2, r0
 80088de:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 80088e2:	4b17      	ldr	r3, [pc, #92]	; (8008940 <_dtoa_r+0x2e8>)
 80088e4:	e6cc      	b.n	8008680 <_dtoa_r+0x28>
 80088e6:	2301      	movs	r3, #1
 80088e8:	e7de      	b.n	80088a8 <_dtoa_r+0x250>
 80088ea:	2300      	movs	r3, #0
 80088ec:	930b      	str	r3, [sp, #44]	; 0x2c
 80088ee:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80088f0:	eb0a 0903 	add.w	r9, sl, r3
 80088f4:	f109 0301 	add.w	r3, r9, #1
 80088f8:	2b01      	cmp	r3, #1
 80088fa:	9308      	str	r3, [sp, #32]
 80088fc:	bfb8      	it	lt
 80088fe:	2301      	movlt	r3, #1
 8008900:	e7dd      	b.n	80088be <_dtoa_r+0x266>
 8008902:	2301      	movs	r3, #1
 8008904:	e7f2      	b.n	80088ec <_dtoa_r+0x294>
 8008906:	bf00      	nop
 8008908:	636f4361 	.word	0x636f4361
 800890c:	3fd287a7 	.word	0x3fd287a7
 8008910:	8b60c8b3 	.word	0x8b60c8b3
 8008914:	3fc68a28 	.word	0x3fc68a28
 8008918:	509f79fb 	.word	0x509f79fb
 800891c:	3fd34413 	.word	0x3fd34413
 8008920:	0800baa6 	.word	0x0800baa6
 8008924:	0800babd 	.word	0x0800babd
 8008928:	7ff00000 	.word	0x7ff00000
 800892c:	0800baa2 	.word	0x0800baa2
 8008930:	0800ba99 	.word	0x0800ba99
 8008934:	0800b91d 	.word	0x0800b91d
 8008938:	3ff80000 	.word	0x3ff80000
 800893c:	0800bc90 	.word	0x0800bc90
 8008940:	0800bb18 	.word	0x0800bb18
 8008944:	2401      	movs	r4, #1
 8008946:	2300      	movs	r3, #0
 8008948:	940b      	str	r4, [sp, #44]	; 0x2c
 800894a:	9322      	str	r3, [sp, #136]	; 0x88
 800894c:	f04f 39ff 	mov.w	r9, #4294967295
 8008950:	2200      	movs	r2, #0
 8008952:	2312      	movs	r3, #18
 8008954:	f8cd 9020 	str.w	r9, [sp, #32]
 8008958:	9223      	str	r2, [sp, #140]	; 0x8c
 800895a:	e7b0      	b.n	80088be <_dtoa_r+0x266>
 800895c:	2301      	movs	r3, #1
 800895e:	930b      	str	r3, [sp, #44]	; 0x2c
 8008960:	e7f4      	b.n	800894c <_dtoa_r+0x2f4>
 8008962:	f8dd 908c 	ldr.w	r9, [sp, #140]	; 0x8c
 8008966:	464b      	mov	r3, r9
 8008968:	f8cd 9020 	str.w	r9, [sp, #32]
 800896c:	e7a7      	b.n	80088be <_dtoa_r+0x266>
 800896e:	3101      	adds	r1, #1
 8008970:	6041      	str	r1, [r0, #4]
 8008972:	0052      	lsls	r2, r2, #1
 8008974:	e7a7      	b.n	80088c6 <_dtoa_r+0x26e>
 8008976:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8008978:	9a03      	ldr	r2, [sp, #12]
 800897a:	601a      	str	r2, [r3, #0]
 800897c:	9b08      	ldr	r3, [sp, #32]
 800897e:	2b0e      	cmp	r3, #14
 8008980:	f200 80a8 	bhi.w	8008ad4 <_dtoa_r+0x47c>
 8008984:	2c00      	cmp	r4, #0
 8008986:	f000 80a5 	beq.w	8008ad4 <_dtoa_r+0x47c>
 800898a:	f1ba 0f00 	cmp.w	sl, #0
 800898e:	dd34      	ble.n	80089fa <_dtoa_r+0x3a2>
 8008990:	4a9a      	ldr	r2, [pc, #616]	; (8008bfc <_dtoa_r+0x5a4>)
 8008992:	f00a 030f 	and.w	r3, sl, #15
 8008996:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800899a:	f41a 7f80 	tst.w	sl, #256	; 0x100
 800899e:	e9d3 3400 	ldrd	r3, r4, [r3]
 80089a2:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 80089a6:	ea4f 142a 	mov.w	r4, sl, asr #4
 80089aa:	d016      	beq.n	80089da <_dtoa_r+0x382>
 80089ac:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80089b0:	4b93      	ldr	r3, [pc, #588]	; (8008c00 <_dtoa_r+0x5a8>)
 80089b2:	2703      	movs	r7, #3
 80089b4:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80089b8:	f7f7 feb8 	bl	800072c <__aeabi_ddiv>
 80089bc:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80089c0:	f004 040f 	and.w	r4, r4, #15
 80089c4:	4e8e      	ldr	r6, [pc, #568]	; (8008c00 <_dtoa_r+0x5a8>)
 80089c6:	b954      	cbnz	r4, 80089de <_dtoa_r+0x386>
 80089c8:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80089cc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80089d0:	f7f7 feac 	bl	800072c <__aeabi_ddiv>
 80089d4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80089d8:	e029      	b.n	8008a2e <_dtoa_r+0x3d6>
 80089da:	2702      	movs	r7, #2
 80089dc:	e7f2      	b.n	80089c4 <_dtoa_r+0x36c>
 80089de:	07e1      	lsls	r1, r4, #31
 80089e0:	d508      	bpl.n	80089f4 <_dtoa_r+0x39c>
 80089e2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80089e6:	e9d6 2300 	ldrd	r2, r3, [r6]
 80089ea:	f7f7 fd75 	bl	80004d8 <__aeabi_dmul>
 80089ee:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80089f2:	3701      	adds	r7, #1
 80089f4:	1064      	asrs	r4, r4, #1
 80089f6:	3608      	adds	r6, #8
 80089f8:	e7e5      	b.n	80089c6 <_dtoa_r+0x36e>
 80089fa:	f000 80a5 	beq.w	8008b48 <_dtoa_r+0x4f0>
 80089fe:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8008a02:	f1ca 0400 	rsb	r4, sl, #0
 8008a06:	4b7d      	ldr	r3, [pc, #500]	; (8008bfc <_dtoa_r+0x5a4>)
 8008a08:	f004 020f 	and.w	r2, r4, #15
 8008a0c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008a10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a14:	f7f7 fd60 	bl	80004d8 <__aeabi_dmul>
 8008a18:	2702      	movs	r7, #2
 8008a1a:	2300      	movs	r3, #0
 8008a1c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8008a20:	4e77      	ldr	r6, [pc, #476]	; (8008c00 <_dtoa_r+0x5a8>)
 8008a22:	1124      	asrs	r4, r4, #4
 8008a24:	2c00      	cmp	r4, #0
 8008a26:	f040 8084 	bne.w	8008b32 <_dtoa_r+0x4da>
 8008a2a:	2b00      	cmp	r3, #0
 8008a2c:	d1d2      	bne.n	80089d4 <_dtoa_r+0x37c>
 8008a2e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008a30:	2b00      	cmp	r3, #0
 8008a32:	f000 808b 	beq.w	8008b4c <_dtoa_r+0x4f4>
 8008a36:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8008a3a:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8008a3e:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8008a42:	2200      	movs	r2, #0
 8008a44:	4b6f      	ldr	r3, [pc, #444]	; (8008c04 <_dtoa_r+0x5ac>)
 8008a46:	f7f7 ffb9 	bl	80009bc <__aeabi_dcmplt>
 8008a4a:	2800      	cmp	r0, #0
 8008a4c:	d07e      	beq.n	8008b4c <_dtoa_r+0x4f4>
 8008a4e:	9b08      	ldr	r3, [sp, #32]
 8008a50:	2b00      	cmp	r3, #0
 8008a52:	d07b      	beq.n	8008b4c <_dtoa_r+0x4f4>
 8008a54:	f1b9 0f00 	cmp.w	r9, #0
 8008a58:	dd38      	ble.n	8008acc <_dtoa_r+0x474>
 8008a5a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8008a5e:	2200      	movs	r2, #0
 8008a60:	4b69      	ldr	r3, [pc, #420]	; (8008c08 <_dtoa_r+0x5b0>)
 8008a62:	f7f7 fd39 	bl	80004d8 <__aeabi_dmul>
 8008a66:	464c      	mov	r4, r9
 8008a68:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8008a6c:	f10a 38ff 	add.w	r8, sl, #4294967295
 8008a70:	3701      	adds	r7, #1
 8008a72:	4638      	mov	r0, r7
 8008a74:	f7f7 fcc6 	bl	8000404 <__aeabi_i2d>
 8008a78:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008a7c:	f7f7 fd2c 	bl	80004d8 <__aeabi_dmul>
 8008a80:	2200      	movs	r2, #0
 8008a82:	4b62      	ldr	r3, [pc, #392]	; (8008c0c <_dtoa_r+0x5b4>)
 8008a84:	f7f7 fb72 	bl	800016c <__adddf3>
 8008a88:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 8008a8c:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8008a90:	9611      	str	r6, [sp, #68]	; 0x44
 8008a92:	2c00      	cmp	r4, #0
 8008a94:	d15d      	bne.n	8008b52 <_dtoa_r+0x4fa>
 8008a96:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008a9a:	2200      	movs	r2, #0
 8008a9c:	4b5c      	ldr	r3, [pc, #368]	; (8008c10 <_dtoa_r+0x5b8>)
 8008a9e:	f7f7 fb63 	bl	8000168 <__aeabi_dsub>
 8008aa2:	4602      	mov	r2, r0
 8008aa4:	460b      	mov	r3, r1
 8008aa6:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8008aaa:	4633      	mov	r3, r6
 8008aac:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8008aae:	f7f7 ffa3 	bl	80009f8 <__aeabi_dcmpgt>
 8008ab2:	2800      	cmp	r0, #0
 8008ab4:	f040 829c 	bne.w	8008ff0 <_dtoa_r+0x998>
 8008ab8:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008abc:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8008abe:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8008ac2:	f7f7 ff7b 	bl	80009bc <__aeabi_dcmplt>
 8008ac6:	2800      	cmp	r0, #0
 8008ac8:	f040 8290 	bne.w	8008fec <_dtoa_r+0x994>
 8008acc:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 8008ad0:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8008ad4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8008ad6:	2b00      	cmp	r3, #0
 8008ad8:	f2c0 8152 	blt.w	8008d80 <_dtoa_r+0x728>
 8008adc:	f1ba 0f0e 	cmp.w	sl, #14
 8008ae0:	f300 814e 	bgt.w	8008d80 <_dtoa_r+0x728>
 8008ae4:	4b45      	ldr	r3, [pc, #276]	; (8008bfc <_dtoa_r+0x5a4>)
 8008ae6:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8008aea:	e9d3 3400 	ldrd	r3, r4, [r3]
 8008aee:	e9cd 3406 	strd	r3, r4, [sp, #24]
 8008af2:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8008af4:	2b00      	cmp	r3, #0
 8008af6:	f280 80db 	bge.w	8008cb0 <_dtoa_r+0x658>
 8008afa:	9b08      	ldr	r3, [sp, #32]
 8008afc:	2b00      	cmp	r3, #0
 8008afe:	f300 80d7 	bgt.w	8008cb0 <_dtoa_r+0x658>
 8008b02:	f040 8272 	bne.w	8008fea <_dtoa_r+0x992>
 8008b06:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008b0a:	2200      	movs	r2, #0
 8008b0c:	4b40      	ldr	r3, [pc, #256]	; (8008c10 <_dtoa_r+0x5b8>)
 8008b0e:	f7f7 fce3 	bl	80004d8 <__aeabi_dmul>
 8008b12:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008b16:	f7f7 ff65 	bl	80009e4 <__aeabi_dcmpge>
 8008b1a:	9c08      	ldr	r4, [sp, #32]
 8008b1c:	4626      	mov	r6, r4
 8008b1e:	2800      	cmp	r0, #0
 8008b20:	f040 8248 	bne.w	8008fb4 <_dtoa_r+0x95c>
 8008b24:	2331      	movs	r3, #49	; 0x31
 8008b26:	9f03      	ldr	r7, [sp, #12]
 8008b28:	f10a 0a01 	add.w	sl, sl, #1
 8008b2c:	f807 3b01 	strb.w	r3, [r7], #1
 8008b30:	e244      	b.n	8008fbc <_dtoa_r+0x964>
 8008b32:	07e2      	lsls	r2, r4, #31
 8008b34:	d505      	bpl.n	8008b42 <_dtoa_r+0x4ea>
 8008b36:	e9d6 2300 	ldrd	r2, r3, [r6]
 8008b3a:	f7f7 fccd 	bl	80004d8 <__aeabi_dmul>
 8008b3e:	2301      	movs	r3, #1
 8008b40:	3701      	adds	r7, #1
 8008b42:	1064      	asrs	r4, r4, #1
 8008b44:	3608      	adds	r6, #8
 8008b46:	e76d      	b.n	8008a24 <_dtoa_r+0x3cc>
 8008b48:	2702      	movs	r7, #2
 8008b4a:	e770      	b.n	8008a2e <_dtoa_r+0x3d6>
 8008b4c:	46d0      	mov	r8, sl
 8008b4e:	9c08      	ldr	r4, [sp, #32]
 8008b50:	e78f      	b.n	8008a72 <_dtoa_r+0x41a>
 8008b52:	9903      	ldr	r1, [sp, #12]
 8008b54:	4b29      	ldr	r3, [pc, #164]	; (8008bfc <_dtoa_r+0x5a4>)
 8008b56:	4421      	add	r1, r4
 8008b58:	9112      	str	r1, [sp, #72]	; 0x48
 8008b5a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8008b5c:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8008b60:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 8008b64:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8008b68:	2900      	cmp	r1, #0
 8008b6a:	d055      	beq.n	8008c18 <_dtoa_r+0x5c0>
 8008b6c:	2000      	movs	r0, #0
 8008b6e:	4929      	ldr	r1, [pc, #164]	; (8008c14 <_dtoa_r+0x5bc>)
 8008b70:	f7f7 fddc 	bl	800072c <__aeabi_ddiv>
 8008b74:	463b      	mov	r3, r7
 8008b76:	4632      	mov	r2, r6
 8008b78:	f7f7 faf6 	bl	8000168 <__aeabi_dsub>
 8008b7c:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8008b80:	9f03      	ldr	r7, [sp, #12]
 8008b82:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008b86:	f7f7 ff57 	bl	8000a38 <__aeabi_d2iz>
 8008b8a:	4604      	mov	r4, r0
 8008b8c:	f7f7 fc3a 	bl	8000404 <__aeabi_i2d>
 8008b90:	4602      	mov	r2, r0
 8008b92:	460b      	mov	r3, r1
 8008b94:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008b98:	f7f7 fae6 	bl	8000168 <__aeabi_dsub>
 8008b9c:	4602      	mov	r2, r0
 8008b9e:	460b      	mov	r3, r1
 8008ba0:	3430      	adds	r4, #48	; 0x30
 8008ba2:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8008ba6:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8008baa:	f807 4b01 	strb.w	r4, [r7], #1
 8008bae:	f7f7 ff05 	bl	80009bc <__aeabi_dcmplt>
 8008bb2:	2800      	cmp	r0, #0
 8008bb4:	d174      	bne.n	8008ca0 <_dtoa_r+0x648>
 8008bb6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008bba:	2000      	movs	r0, #0
 8008bbc:	4911      	ldr	r1, [pc, #68]	; (8008c04 <_dtoa_r+0x5ac>)
 8008bbe:	f7f7 fad3 	bl	8000168 <__aeabi_dsub>
 8008bc2:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8008bc6:	f7f7 fef9 	bl	80009bc <__aeabi_dcmplt>
 8008bca:	2800      	cmp	r0, #0
 8008bcc:	f040 80b7 	bne.w	8008d3e <_dtoa_r+0x6e6>
 8008bd0:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8008bd2:	429f      	cmp	r7, r3
 8008bd4:	f43f af7a 	beq.w	8008acc <_dtoa_r+0x474>
 8008bd8:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8008bdc:	2200      	movs	r2, #0
 8008bde:	4b0a      	ldr	r3, [pc, #40]	; (8008c08 <_dtoa_r+0x5b0>)
 8008be0:	f7f7 fc7a 	bl	80004d8 <__aeabi_dmul>
 8008be4:	2200      	movs	r2, #0
 8008be6:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8008bea:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008bee:	4b06      	ldr	r3, [pc, #24]	; (8008c08 <_dtoa_r+0x5b0>)
 8008bf0:	f7f7 fc72 	bl	80004d8 <__aeabi_dmul>
 8008bf4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8008bf8:	e7c3      	b.n	8008b82 <_dtoa_r+0x52a>
 8008bfa:	bf00      	nop
 8008bfc:	0800bc90 	.word	0x0800bc90
 8008c00:	0800bc68 	.word	0x0800bc68
 8008c04:	3ff00000 	.word	0x3ff00000
 8008c08:	40240000 	.word	0x40240000
 8008c0c:	401c0000 	.word	0x401c0000
 8008c10:	40140000 	.word	0x40140000
 8008c14:	3fe00000 	.word	0x3fe00000
 8008c18:	4630      	mov	r0, r6
 8008c1a:	4639      	mov	r1, r7
 8008c1c:	f7f7 fc5c 	bl	80004d8 <__aeabi_dmul>
 8008c20:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8008c22:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8008c26:	9c03      	ldr	r4, [sp, #12]
 8008c28:	9314      	str	r3, [sp, #80]	; 0x50
 8008c2a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008c2e:	f7f7 ff03 	bl	8000a38 <__aeabi_d2iz>
 8008c32:	9015      	str	r0, [sp, #84]	; 0x54
 8008c34:	f7f7 fbe6 	bl	8000404 <__aeabi_i2d>
 8008c38:	4602      	mov	r2, r0
 8008c3a:	460b      	mov	r3, r1
 8008c3c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008c40:	f7f7 fa92 	bl	8000168 <__aeabi_dsub>
 8008c44:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008c46:	4606      	mov	r6, r0
 8008c48:	3330      	adds	r3, #48	; 0x30
 8008c4a:	f804 3b01 	strb.w	r3, [r4], #1
 8008c4e:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8008c50:	460f      	mov	r7, r1
 8008c52:	429c      	cmp	r4, r3
 8008c54:	f04f 0200 	mov.w	r2, #0
 8008c58:	d124      	bne.n	8008ca4 <_dtoa_r+0x64c>
 8008c5a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8008c5e:	4bb0      	ldr	r3, [pc, #704]	; (8008f20 <_dtoa_r+0x8c8>)
 8008c60:	f7f7 fa84 	bl	800016c <__adddf3>
 8008c64:	4602      	mov	r2, r0
 8008c66:	460b      	mov	r3, r1
 8008c68:	4630      	mov	r0, r6
 8008c6a:	4639      	mov	r1, r7
 8008c6c:	f7f7 fec4 	bl	80009f8 <__aeabi_dcmpgt>
 8008c70:	2800      	cmp	r0, #0
 8008c72:	d163      	bne.n	8008d3c <_dtoa_r+0x6e4>
 8008c74:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8008c78:	2000      	movs	r0, #0
 8008c7a:	49a9      	ldr	r1, [pc, #676]	; (8008f20 <_dtoa_r+0x8c8>)
 8008c7c:	f7f7 fa74 	bl	8000168 <__aeabi_dsub>
 8008c80:	4602      	mov	r2, r0
 8008c82:	460b      	mov	r3, r1
 8008c84:	4630      	mov	r0, r6
 8008c86:	4639      	mov	r1, r7
 8008c88:	f7f7 fe98 	bl	80009bc <__aeabi_dcmplt>
 8008c8c:	2800      	cmp	r0, #0
 8008c8e:	f43f af1d 	beq.w	8008acc <_dtoa_r+0x474>
 8008c92:	9f14      	ldr	r7, [sp, #80]	; 0x50
 8008c94:	1e7b      	subs	r3, r7, #1
 8008c96:	9314      	str	r3, [sp, #80]	; 0x50
 8008c98:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 8008c9c:	2b30      	cmp	r3, #48	; 0x30
 8008c9e:	d0f8      	beq.n	8008c92 <_dtoa_r+0x63a>
 8008ca0:	46c2      	mov	sl, r8
 8008ca2:	e03b      	b.n	8008d1c <_dtoa_r+0x6c4>
 8008ca4:	4b9f      	ldr	r3, [pc, #636]	; (8008f24 <_dtoa_r+0x8cc>)
 8008ca6:	f7f7 fc17 	bl	80004d8 <__aeabi_dmul>
 8008caa:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8008cae:	e7bc      	b.n	8008c2a <_dtoa_r+0x5d2>
 8008cb0:	9f03      	ldr	r7, [sp, #12]
 8008cb2:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 8008cb6:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8008cba:	4640      	mov	r0, r8
 8008cbc:	4649      	mov	r1, r9
 8008cbe:	f7f7 fd35 	bl	800072c <__aeabi_ddiv>
 8008cc2:	f7f7 feb9 	bl	8000a38 <__aeabi_d2iz>
 8008cc6:	4604      	mov	r4, r0
 8008cc8:	f7f7 fb9c 	bl	8000404 <__aeabi_i2d>
 8008ccc:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8008cd0:	f7f7 fc02 	bl	80004d8 <__aeabi_dmul>
 8008cd4:	4602      	mov	r2, r0
 8008cd6:	460b      	mov	r3, r1
 8008cd8:	4640      	mov	r0, r8
 8008cda:	4649      	mov	r1, r9
 8008cdc:	f7f7 fa44 	bl	8000168 <__aeabi_dsub>
 8008ce0:	f104 0630 	add.w	r6, r4, #48	; 0x30
 8008ce4:	f807 6b01 	strb.w	r6, [r7], #1
 8008ce8:	9e03      	ldr	r6, [sp, #12]
 8008cea:	f8dd c020 	ldr.w	ip, [sp, #32]
 8008cee:	1bbe      	subs	r6, r7, r6
 8008cf0:	45b4      	cmp	ip, r6
 8008cf2:	4602      	mov	r2, r0
 8008cf4:	460b      	mov	r3, r1
 8008cf6:	d136      	bne.n	8008d66 <_dtoa_r+0x70e>
 8008cf8:	f7f7 fa38 	bl	800016c <__adddf3>
 8008cfc:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8008d00:	4680      	mov	r8, r0
 8008d02:	4689      	mov	r9, r1
 8008d04:	f7f7 fe78 	bl	80009f8 <__aeabi_dcmpgt>
 8008d08:	bb58      	cbnz	r0, 8008d62 <_dtoa_r+0x70a>
 8008d0a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8008d0e:	4640      	mov	r0, r8
 8008d10:	4649      	mov	r1, r9
 8008d12:	f7f7 fe49 	bl	80009a8 <__aeabi_dcmpeq>
 8008d16:	b108      	cbz	r0, 8008d1c <_dtoa_r+0x6c4>
 8008d18:	07e1      	lsls	r1, r4, #31
 8008d1a:	d422      	bmi.n	8008d62 <_dtoa_r+0x70a>
 8008d1c:	4628      	mov	r0, r5
 8008d1e:	4659      	mov	r1, fp
 8008d20:	f000 ff62 	bl	8009be8 <_Bfree>
 8008d24:	2300      	movs	r3, #0
 8008d26:	703b      	strb	r3, [r7, #0]
 8008d28:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8008d2a:	f10a 0001 	add.w	r0, sl, #1
 8008d2e:	6018      	str	r0, [r3, #0]
 8008d30:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8008d32:	2b00      	cmp	r3, #0
 8008d34:	f43f acde 	beq.w	80086f4 <_dtoa_r+0x9c>
 8008d38:	601f      	str	r7, [r3, #0]
 8008d3a:	e4db      	b.n	80086f4 <_dtoa_r+0x9c>
 8008d3c:	4627      	mov	r7, r4
 8008d3e:	463b      	mov	r3, r7
 8008d40:	461f      	mov	r7, r3
 8008d42:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008d46:	2a39      	cmp	r2, #57	; 0x39
 8008d48:	d107      	bne.n	8008d5a <_dtoa_r+0x702>
 8008d4a:	9a03      	ldr	r2, [sp, #12]
 8008d4c:	429a      	cmp	r2, r3
 8008d4e:	d1f7      	bne.n	8008d40 <_dtoa_r+0x6e8>
 8008d50:	2230      	movs	r2, #48	; 0x30
 8008d52:	9903      	ldr	r1, [sp, #12]
 8008d54:	f108 0801 	add.w	r8, r8, #1
 8008d58:	700a      	strb	r2, [r1, #0]
 8008d5a:	781a      	ldrb	r2, [r3, #0]
 8008d5c:	3201      	adds	r2, #1
 8008d5e:	701a      	strb	r2, [r3, #0]
 8008d60:	e79e      	b.n	8008ca0 <_dtoa_r+0x648>
 8008d62:	46d0      	mov	r8, sl
 8008d64:	e7eb      	b.n	8008d3e <_dtoa_r+0x6e6>
 8008d66:	2200      	movs	r2, #0
 8008d68:	4b6e      	ldr	r3, [pc, #440]	; (8008f24 <_dtoa_r+0x8cc>)
 8008d6a:	f7f7 fbb5 	bl	80004d8 <__aeabi_dmul>
 8008d6e:	2200      	movs	r2, #0
 8008d70:	2300      	movs	r3, #0
 8008d72:	4680      	mov	r8, r0
 8008d74:	4689      	mov	r9, r1
 8008d76:	f7f7 fe17 	bl	80009a8 <__aeabi_dcmpeq>
 8008d7a:	2800      	cmp	r0, #0
 8008d7c:	d09b      	beq.n	8008cb6 <_dtoa_r+0x65e>
 8008d7e:	e7cd      	b.n	8008d1c <_dtoa_r+0x6c4>
 8008d80:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8008d82:	2a00      	cmp	r2, #0
 8008d84:	f000 80d0 	beq.w	8008f28 <_dtoa_r+0x8d0>
 8008d88:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8008d8a:	2a01      	cmp	r2, #1
 8008d8c:	f300 80ae 	bgt.w	8008eec <_dtoa_r+0x894>
 8008d90:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8008d92:	2a00      	cmp	r2, #0
 8008d94:	f000 80a6 	beq.w	8008ee4 <_dtoa_r+0x88c>
 8008d98:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8008d9c:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8008d9e:	9f06      	ldr	r7, [sp, #24]
 8008da0:	9a06      	ldr	r2, [sp, #24]
 8008da2:	2101      	movs	r1, #1
 8008da4:	441a      	add	r2, r3
 8008da6:	9206      	str	r2, [sp, #24]
 8008da8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008daa:	4628      	mov	r0, r5
 8008dac:	441a      	add	r2, r3
 8008dae:	9209      	str	r2, [sp, #36]	; 0x24
 8008db0:	f001 f81a 	bl	8009de8 <__i2b>
 8008db4:	4606      	mov	r6, r0
 8008db6:	2f00      	cmp	r7, #0
 8008db8:	dd0c      	ble.n	8008dd4 <_dtoa_r+0x77c>
 8008dba:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008dbc:	2b00      	cmp	r3, #0
 8008dbe:	dd09      	ble.n	8008dd4 <_dtoa_r+0x77c>
 8008dc0:	42bb      	cmp	r3, r7
 8008dc2:	bfa8      	it	ge
 8008dc4:	463b      	movge	r3, r7
 8008dc6:	9a06      	ldr	r2, [sp, #24]
 8008dc8:	1aff      	subs	r7, r7, r3
 8008dca:	1ad2      	subs	r2, r2, r3
 8008dcc:	9206      	str	r2, [sp, #24]
 8008dce:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008dd0:	1ad3      	subs	r3, r2, r3
 8008dd2:	9309      	str	r3, [sp, #36]	; 0x24
 8008dd4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008dd6:	b1f3      	cbz	r3, 8008e16 <_dtoa_r+0x7be>
 8008dd8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008dda:	2b00      	cmp	r3, #0
 8008ddc:	f000 80a8 	beq.w	8008f30 <_dtoa_r+0x8d8>
 8008de0:	2c00      	cmp	r4, #0
 8008de2:	dd10      	ble.n	8008e06 <_dtoa_r+0x7ae>
 8008de4:	4631      	mov	r1, r6
 8008de6:	4622      	mov	r2, r4
 8008de8:	4628      	mov	r0, r5
 8008dea:	f001 f8bb 	bl	8009f64 <__pow5mult>
 8008dee:	465a      	mov	r2, fp
 8008df0:	4601      	mov	r1, r0
 8008df2:	4606      	mov	r6, r0
 8008df4:	4628      	mov	r0, r5
 8008df6:	f001 f80d 	bl	8009e14 <__multiply>
 8008dfa:	4680      	mov	r8, r0
 8008dfc:	4659      	mov	r1, fp
 8008dfe:	4628      	mov	r0, r5
 8008e00:	f000 fef2 	bl	8009be8 <_Bfree>
 8008e04:	46c3      	mov	fp, r8
 8008e06:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008e08:	1b1a      	subs	r2, r3, r4
 8008e0a:	d004      	beq.n	8008e16 <_dtoa_r+0x7be>
 8008e0c:	4659      	mov	r1, fp
 8008e0e:	4628      	mov	r0, r5
 8008e10:	f001 f8a8 	bl	8009f64 <__pow5mult>
 8008e14:	4683      	mov	fp, r0
 8008e16:	2101      	movs	r1, #1
 8008e18:	4628      	mov	r0, r5
 8008e1a:	f000 ffe5 	bl	8009de8 <__i2b>
 8008e1e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008e20:	4604      	mov	r4, r0
 8008e22:	2b00      	cmp	r3, #0
 8008e24:	f340 8086 	ble.w	8008f34 <_dtoa_r+0x8dc>
 8008e28:	461a      	mov	r2, r3
 8008e2a:	4601      	mov	r1, r0
 8008e2c:	4628      	mov	r0, r5
 8008e2e:	f001 f899 	bl	8009f64 <__pow5mult>
 8008e32:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8008e34:	4604      	mov	r4, r0
 8008e36:	2b01      	cmp	r3, #1
 8008e38:	dd7f      	ble.n	8008f3a <_dtoa_r+0x8e2>
 8008e3a:	f04f 0800 	mov.w	r8, #0
 8008e3e:	6923      	ldr	r3, [r4, #16]
 8008e40:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8008e44:	6918      	ldr	r0, [r3, #16]
 8008e46:	f000 ff81 	bl	8009d4c <__hi0bits>
 8008e4a:	f1c0 0020 	rsb	r0, r0, #32
 8008e4e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008e50:	4418      	add	r0, r3
 8008e52:	f010 001f 	ands.w	r0, r0, #31
 8008e56:	f000 8092 	beq.w	8008f7e <_dtoa_r+0x926>
 8008e5a:	f1c0 0320 	rsb	r3, r0, #32
 8008e5e:	2b04      	cmp	r3, #4
 8008e60:	f340 808a 	ble.w	8008f78 <_dtoa_r+0x920>
 8008e64:	f1c0 001c 	rsb	r0, r0, #28
 8008e68:	9b06      	ldr	r3, [sp, #24]
 8008e6a:	4407      	add	r7, r0
 8008e6c:	4403      	add	r3, r0
 8008e6e:	9306      	str	r3, [sp, #24]
 8008e70:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008e72:	4403      	add	r3, r0
 8008e74:	9309      	str	r3, [sp, #36]	; 0x24
 8008e76:	9b06      	ldr	r3, [sp, #24]
 8008e78:	2b00      	cmp	r3, #0
 8008e7a:	dd05      	ble.n	8008e88 <_dtoa_r+0x830>
 8008e7c:	4659      	mov	r1, fp
 8008e7e:	461a      	mov	r2, r3
 8008e80:	4628      	mov	r0, r5
 8008e82:	f001 f8c9 	bl	800a018 <__lshift>
 8008e86:	4683      	mov	fp, r0
 8008e88:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008e8a:	2b00      	cmp	r3, #0
 8008e8c:	dd05      	ble.n	8008e9a <_dtoa_r+0x842>
 8008e8e:	4621      	mov	r1, r4
 8008e90:	461a      	mov	r2, r3
 8008e92:	4628      	mov	r0, r5
 8008e94:	f001 f8c0 	bl	800a018 <__lshift>
 8008e98:	4604      	mov	r4, r0
 8008e9a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008e9c:	2b00      	cmp	r3, #0
 8008e9e:	d070      	beq.n	8008f82 <_dtoa_r+0x92a>
 8008ea0:	4621      	mov	r1, r4
 8008ea2:	4658      	mov	r0, fp
 8008ea4:	f001 f928 	bl	800a0f8 <__mcmp>
 8008ea8:	2800      	cmp	r0, #0
 8008eaa:	da6a      	bge.n	8008f82 <_dtoa_r+0x92a>
 8008eac:	2300      	movs	r3, #0
 8008eae:	4659      	mov	r1, fp
 8008eb0:	220a      	movs	r2, #10
 8008eb2:	4628      	mov	r0, r5
 8008eb4:	f000 feba 	bl	8009c2c <__multadd>
 8008eb8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008eba:	4683      	mov	fp, r0
 8008ebc:	f10a 3aff 	add.w	sl, sl, #4294967295
 8008ec0:	2b00      	cmp	r3, #0
 8008ec2:	f000 8194 	beq.w	80091ee <_dtoa_r+0xb96>
 8008ec6:	4631      	mov	r1, r6
 8008ec8:	2300      	movs	r3, #0
 8008eca:	220a      	movs	r2, #10
 8008ecc:	4628      	mov	r0, r5
 8008ece:	f000 fead 	bl	8009c2c <__multadd>
 8008ed2:	f1b9 0f00 	cmp.w	r9, #0
 8008ed6:	4606      	mov	r6, r0
 8008ed8:	f300 8093 	bgt.w	8009002 <_dtoa_r+0x9aa>
 8008edc:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8008ede:	2b02      	cmp	r3, #2
 8008ee0:	dc57      	bgt.n	8008f92 <_dtoa_r+0x93a>
 8008ee2:	e08e      	b.n	8009002 <_dtoa_r+0x9aa>
 8008ee4:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8008ee6:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8008eea:	e757      	b.n	8008d9c <_dtoa_r+0x744>
 8008eec:	9b08      	ldr	r3, [sp, #32]
 8008eee:	1e5c      	subs	r4, r3, #1
 8008ef0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008ef2:	42a3      	cmp	r3, r4
 8008ef4:	bfb7      	itett	lt
 8008ef6:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8008ef8:	1b1c      	subge	r4, r3, r4
 8008efa:	1ae2      	sublt	r2, r4, r3
 8008efc:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 8008efe:	bfbe      	ittt	lt
 8008f00:	940a      	strlt	r4, [sp, #40]	; 0x28
 8008f02:	189b      	addlt	r3, r3, r2
 8008f04:	930e      	strlt	r3, [sp, #56]	; 0x38
 8008f06:	9b08      	ldr	r3, [sp, #32]
 8008f08:	bfb8      	it	lt
 8008f0a:	2400      	movlt	r4, #0
 8008f0c:	2b00      	cmp	r3, #0
 8008f0e:	bfbb      	ittet	lt
 8008f10:	9b06      	ldrlt	r3, [sp, #24]
 8008f12:	9a08      	ldrlt	r2, [sp, #32]
 8008f14:	9f06      	ldrge	r7, [sp, #24]
 8008f16:	1a9f      	sublt	r7, r3, r2
 8008f18:	bfac      	ite	ge
 8008f1a:	9b08      	ldrge	r3, [sp, #32]
 8008f1c:	2300      	movlt	r3, #0
 8008f1e:	e73f      	b.n	8008da0 <_dtoa_r+0x748>
 8008f20:	3fe00000 	.word	0x3fe00000
 8008f24:	40240000 	.word	0x40240000
 8008f28:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8008f2a:	9f06      	ldr	r7, [sp, #24]
 8008f2c:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 8008f2e:	e742      	b.n	8008db6 <_dtoa_r+0x75e>
 8008f30:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008f32:	e76b      	b.n	8008e0c <_dtoa_r+0x7b4>
 8008f34:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8008f36:	2b01      	cmp	r3, #1
 8008f38:	dc19      	bgt.n	8008f6e <_dtoa_r+0x916>
 8008f3a:	9b04      	ldr	r3, [sp, #16]
 8008f3c:	b9bb      	cbnz	r3, 8008f6e <_dtoa_r+0x916>
 8008f3e:	9b05      	ldr	r3, [sp, #20]
 8008f40:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008f44:	b99b      	cbnz	r3, 8008f6e <_dtoa_r+0x916>
 8008f46:	9b05      	ldr	r3, [sp, #20]
 8008f48:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8008f4c:	0d1b      	lsrs	r3, r3, #20
 8008f4e:	051b      	lsls	r3, r3, #20
 8008f50:	b183      	cbz	r3, 8008f74 <_dtoa_r+0x91c>
 8008f52:	f04f 0801 	mov.w	r8, #1
 8008f56:	9b06      	ldr	r3, [sp, #24]
 8008f58:	3301      	adds	r3, #1
 8008f5a:	9306      	str	r3, [sp, #24]
 8008f5c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008f5e:	3301      	adds	r3, #1
 8008f60:	9309      	str	r3, [sp, #36]	; 0x24
 8008f62:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008f64:	2b00      	cmp	r3, #0
 8008f66:	f47f af6a 	bne.w	8008e3e <_dtoa_r+0x7e6>
 8008f6a:	2001      	movs	r0, #1
 8008f6c:	e76f      	b.n	8008e4e <_dtoa_r+0x7f6>
 8008f6e:	f04f 0800 	mov.w	r8, #0
 8008f72:	e7f6      	b.n	8008f62 <_dtoa_r+0x90a>
 8008f74:	4698      	mov	r8, r3
 8008f76:	e7f4      	b.n	8008f62 <_dtoa_r+0x90a>
 8008f78:	f43f af7d 	beq.w	8008e76 <_dtoa_r+0x81e>
 8008f7c:	4618      	mov	r0, r3
 8008f7e:	301c      	adds	r0, #28
 8008f80:	e772      	b.n	8008e68 <_dtoa_r+0x810>
 8008f82:	9b08      	ldr	r3, [sp, #32]
 8008f84:	2b00      	cmp	r3, #0
 8008f86:	dc36      	bgt.n	8008ff6 <_dtoa_r+0x99e>
 8008f88:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8008f8a:	2b02      	cmp	r3, #2
 8008f8c:	dd33      	ble.n	8008ff6 <_dtoa_r+0x99e>
 8008f8e:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8008f92:	f1b9 0f00 	cmp.w	r9, #0
 8008f96:	d10d      	bne.n	8008fb4 <_dtoa_r+0x95c>
 8008f98:	4621      	mov	r1, r4
 8008f9a:	464b      	mov	r3, r9
 8008f9c:	2205      	movs	r2, #5
 8008f9e:	4628      	mov	r0, r5
 8008fa0:	f000 fe44 	bl	8009c2c <__multadd>
 8008fa4:	4601      	mov	r1, r0
 8008fa6:	4604      	mov	r4, r0
 8008fa8:	4658      	mov	r0, fp
 8008faa:	f001 f8a5 	bl	800a0f8 <__mcmp>
 8008fae:	2800      	cmp	r0, #0
 8008fb0:	f73f adb8 	bgt.w	8008b24 <_dtoa_r+0x4cc>
 8008fb4:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8008fb6:	9f03      	ldr	r7, [sp, #12]
 8008fb8:	ea6f 0a03 	mvn.w	sl, r3
 8008fbc:	f04f 0800 	mov.w	r8, #0
 8008fc0:	4621      	mov	r1, r4
 8008fc2:	4628      	mov	r0, r5
 8008fc4:	f000 fe10 	bl	8009be8 <_Bfree>
 8008fc8:	2e00      	cmp	r6, #0
 8008fca:	f43f aea7 	beq.w	8008d1c <_dtoa_r+0x6c4>
 8008fce:	f1b8 0f00 	cmp.w	r8, #0
 8008fd2:	d005      	beq.n	8008fe0 <_dtoa_r+0x988>
 8008fd4:	45b0      	cmp	r8, r6
 8008fd6:	d003      	beq.n	8008fe0 <_dtoa_r+0x988>
 8008fd8:	4641      	mov	r1, r8
 8008fda:	4628      	mov	r0, r5
 8008fdc:	f000 fe04 	bl	8009be8 <_Bfree>
 8008fe0:	4631      	mov	r1, r6
 8008fe2:	4628      	mov	r0, r5
 8008fe4:	f000 fe00 	bl	8009be8 <_Bfree>
 8008fe8:	e698      	b.n	8008d1c <_dtoa_r+0x6c4>
 8008fea:	2400      	movs	r4, #0
 8008fec:	4626      	mov	r6, r4
 8008fee:	e7e1      	b.n	8008fb4 <_dtoa_r+0x95c>
 8008ff0:	46c2      	mov	sl, r8
 8008ff2:	4626      	mov	r6, r4
 8008ff4:	e596      	b.n	8008b24 <_dtoa_r+0x4cc>
 8008ff6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008ff8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8008ffc:	2b00      	cmp	r3, #0
 8008ffe:	f000 80fd 	beq.w	80091fc <_dtoa_r+0xba4>
 8009002:	2f00      	cmp	r7, #0
 8009004:	dd05      	ble.n	8009012 <_dtoa_r+0x9ba>
 8009006:	4631      	mov	r1, r6
 8009008:	463a      	mov	r2, r7
 800900a:	4628      	mov	r0, r5
 800900c:	f001 f804 	bl	800a018 <__lshift>
 8009010:	4606      	mov	r6, r0
 8009012:	f1b8 0f00 	cmp.w	r8, #0
 8009016:	d05c      	beq.n	80090d2 <_dtoa_r+0xa7a>
 8009018:	4628      	mov	r0, r5
 800901a:	6871      	ldr	r1, [r6, #4]
 800901c:	f000 fda4 	bl	8009b68 <_Balloc>
 8009020:	4607      	mov	r7, r0
 8009022:	b928      	cbnz	r0, 8009030 <_dtoa_r+0x9d8>
 8009024:	4602      	mov	r2, r0
 8009026:	f240 21ea 	movw	r1, #746	; 0x2ea
 800902a:	4b7f      	ldr	r3, [pc, #508]	; (8009228 <_dtoa_r+0xbd0>)
 800902c:	f7ff bb28 	b.w	8008680 <_dtoa_r+0x28>
 8009030:	6932      	ldr	r2, [r6, #16]
 8009032:	f106 010c 	add.w	r1, r6, #12
 8009036:	3202      	adds	r2, #2
 8009038:	0092      	lsls	r2, r2, #2
 800903a:	300c      	adds	r0, #12
 800903c:	f000 fd86 	bl	8009b4c <memcpy>
 8009040:	2201      	movs	r2, #1
 8009042:	4639      	mov	r1, r7
 8009044:	4628      	mov	r0, r5
 8009046:	f000 ffe7 	bl	800a018 <__lshift>
 800904a:	46b0      	mov	r8, r6
 800904c:	4606      	mov	r6, r0
 800904e:	9b03      	ldr	r3, [sp, #12]
 8009050:	3301      	adds	r3, #1
 8009052:	9308      	str	r3, [sp, #32]
 8009054:	9b03      	ldr	r3, [sp, #12]
 8009056:	444b      	add	r3, r9
 8009058:	930a      	str	r3, [sp, #40]	; 0x28
 800905a:	9b04      	ldr	r3, [sp, #16]
 800905c:	f003 0301 	and.w	r3, r3, #1
 8009060:	9309      	str	r3, [sp, #36]	; 0x24
 8009062:	9b08      	ldr	r3, [sp, #32]
 8009064:	4621      	mov	r1, r4
 8009066:	3b01      	subs	r3, #1
 8009068:	4658      	mov	r0, fp
 800906a:	9304      	str	r3, [sp, #16]
 800906c:	f7ff fa68 	bl	8008540 <quorem>
 8009070:	4603      	mov	r3, r0
 8009072:	4641      	mov	r1, r8
 8009074:	3330      	adds	r3, #48	; 0x30
 8009076:	9006      	str	r0, [sp, #24]
 8009078:	4658      	mov	r0, fp
 800907a:	930b      	str	r3, [sp, #44]	; 0x2c
 800907c:	f001 f83c 	bl	800a0f8 <__mcmp>
 8009080:	4632      	mov	r2, r6
 8009082:	4681      	mov	r9, r0
 8009084:	4621      	mov	r1, r4
 8009086:	4628      	mov	r0, r5
 8009088:	f001 f852 	bl	800a130 <__mdiff>
 800908c:	68c2      	ldr	r2, [r0, #12]
 800908e:	4607      	mov	r7, r0
 8009090:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009092:	bb02      	cbnz	r2, 80090d6 <_dtoa_r+0xa7e>
 8009094:	4601      	mov	r1, r0
 8009096:	4658      	mov	r0, fp
 8009098:	f001 f82e 	bl	800a0f8 <__mcmp>
 800909c:	4602      	mov	r2, r0
 800909e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80090a0:	4639      	mov	r1, r7
 80090a2:	4628      	mov	r0, r5
 80090a4:	e9cd 320b 	strd	r3, r2, [sp, #44]	; 0x2c
 80090a8:	f000 fd9e 	bl	8009be8 <_Bfree>
 80090ac:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80090ae:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80090b0:	9f08      	ldr	r7, [sp, #32]
 80090b2:	ea43 0102 	orr.w	r1, r3, r2
 80090b6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80090b8:	430b      	orrs	r3, r1
 80090ba:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80090bc:	d10d      	bne.n	80090da <_dtoa_r+0xa82>
 80090be:	2b39      	cmp	r3, #57	; 0x39
 80090c0:	d029      	beq.n	8009116 <_dtoa_r+0xabe>
 80090c2:	f1b9 0f00 	cmp.w	r9, #0
 80090c6:	dd01      	ble.n	80090cc <_dtoa_r+0xa74>
 80090c8:	9b06      	ldr	r3, [sp, #24]
 80090ca:	3331      	adds	r3, #49	; 0x31
 80090cc:	9a04      	ldr	r2, [sp, #16]
 80090ce:	7013      	strb	r3, [r2, #0]
 80090d0:	e776      	b.n	8008fc0 <_dtoa_r+0x968>
 80090d2:	4630      	mov	r0, r6
 80090d4:	e7b9      	b.n	800904a <_dtoa_r+0x9f2>
 80090d6:	2201      	movs	r2, #1
 80090d8:	e7e2      	b.n	80090a0 <_dtoa_r+0xa48>
 80090da:	f1b9 0f00 	cmp.w	r9, #0
 80090de:	db06      	blt.n	80090ee <_dtoa_r+0xa96>
 80090e0:	9922      	ldr	r1, [sp, #136]	; 0x88
 80090e2:	ea41 0909 	orr.w	r9, r1, r9
 80090e6:	9909      	ldr	r1, [sp, #36]	; 0x24
 80090e8:	ea59 0101 	orrs.w	r1, r9, r1
 80090ec:	d120      	bne.n	8009130 <_dtoa_r+0xad8>
 80090ee:	2a00      	cmp	r2, #0
 80090f0:	ddec      	ble.n	80090cc <_dtoa_r+0xa74>
 80090f2:	4659      	mov	r1, fp
 80090f4:	2201      	movs	r2, #1
 80090f6:	4628      	mov	r0, r5
 80090f8:	9308      	str	r3, [sp, #32]
 80090fa:	f000 ff8d 	bl	800a018 <__lshift>
 80090fe:	4621      	mov	r1, r4
 8009100:	4683      	mov	fp, r0
 8009102:	f000 fff9 	bl	800a0f8 <__mcmp>
 8009106:	2800      	cmp	r0, #0
 8009108:	9b08      	ldr	r3, [sp, #32]
 800910a:	dc02      	bgt.n	8009112 <_dtoa_r+0xaba>
 800910c:	d1de      	bne.n	80090cc <_dtoa_r+0xa74>
 800910e:	07da      	lsls	r2, r3, #31
 8009110:	d5dc      	bpl.n	80090cc <_dtoa_r+0xa74>
 8009112:	2b39      	cmp	r3, #57	; 0x39
 8009114:	d1d8      	bne.n	80090c8 <_dtoa_r+0xa70>
 8009116:	2339      	movs	r3, #57	; 0x39
 8009118:	9a04      	ldr	r2, [sp, #16]
 800911a:	7013      	strb	r3, [r2, #0]
 800911c:	463b      	mov	r3, r7
 800911e:	461f      	mov	r7, r3
 8009120:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 8009124:	3b01      	subs	r3, #1
 8009126:	2a39      	cmp	r2, #57	; 0x39
 8009128:	d050      	beq.n	80091cc <_dtoa_r+0xb74>
 800912a:	3201      	adds	r2, #1
 800912c:	701a      	strb	r2, [r3, #0]
 800912e:	e747      	b.n	8008fc0 <_dtoa_r+0x968>
 8009130:	2a00      	cmp	r2, #0
 8009132:	dd03      	ble.n	800913c <_dtoa_r+0xae4>
 8009134:	2b39      	cmp	r3, #57	; 0x39
 8009136:	d0ee      	beq.n	8009116 <_dtoa_r+0xabe>
 8009138:	3301      	adds	r3, #1
 800913a:	e7c7      	b.n	80090cc <_dtoa_r+0xa74>
 800913c:	9a08      	ldr	r2, [sp, #32]
 800913e:	990a      	ldr	r1, [sp, #40]	; 0x28
 8009140:	f802 3c01 	strb.w	r3, [r2, #-1]
 8009144:	428a      	cmp	r2, r1
 8009146:	d02a      	beq.n	800919e <_dtoa_r+0xb46>
 8009148:	4659      	mov	r1, fp
 800914a:	2300      	movs	r3, #0
 800914c:	220a      	movs	r2, #10
 800914e:	4628      	mov	r0, r5
 8009150:	f000 fd6c 	bl	8009c2c <__multadd>
 8009154:	45b0      	cmp	r8, r6
 8009156:	4683      	mov	fp, r0
 8009158:	f04f 0300 	mov.w	r3, #0
 800915c:	f04f 020a 	mov.w	r2, #10
 8009160:	4641      	mov	r1, r8
 8009162:	4628      	mov	r0, r5
 8009164:	d107      	bne.n	8009176 <_dtoa_r+0xb1e>
 8009166:	f000 fd61 	bl	8009c2c <__multadd>
 800916a:	4680      	mov	r8, r0
 800916c:	4606      	mov	r6, r0
 800916e:	9b08      	ldr	r3, [sp, #32]
 8009170:	3301      	adds	r3, #1
 8009172:	9308      	str	r3, [sp, #32]
 8009174:	e775      	b.n	8009062 <_dtoa_r+0xa0a>
 8009176:	f000 fd59 	bl	8009c2c <__multadd>
 800917a:	4631      	mov	r1, r6
 800917c:	4680      	mov	r8, r0
 800917e:	2300      	movs	r3, #0
 8009180:	220a      	movs	r2, #10
 8009182:	4628      	mov	r0, r5
 8009184:	f000 fd52 	bl	8009c2c <__multadd>
 8009188:	4606      	mov	r6, r0
 800918a:	e7f0      	b.n	800916e <_dtoa_r+0xb16>
 800918c:	f1b9 0f00 	cmp.w	r9, #0
 8009190:	bfcc      	ite	gt
 8009192:	464f      	movgt	r7, r9
 8009194:	2701      	movle	r7, #1
 8009196:	f04f 0800 	mov.w	r8, #0
 800919a:	9a03      	ldr	r2, [sp, #12]
 800919c:	4417      	add	r7, r2
 800919e:	4659      	mov	r1, fp
 80091a0:	2201      	movs	r2, #1
 80091a2:	4628      	mov	r0, r5
 80091a4:	9308      	str	r3, [sp, #32]
 80091a6:	f000 ff37 	bl	800a018 <__lshift>
 80091aa:	4621      	mov	r1, r4
 80091ac:	4683      	mov	fp, r0
 80091ae:	f000 ffa3 	bl	800a0f8 <__mcmp>
 80091b2:	2800      	cmp	r0, #0
 80091b4:	dcb2      	bgt.n	800911c <_dtoa_r+0xac4>
 80091b6:	d102      	bne.n	80091be <_dtoa_r+0xb66>
 80091b8:	9b08      	ldr	r3, [sp, #32]
 80091ba:	07db      	lsls	r3, r3, #31
 80091bc:	d4ae      	bmi.n	800911c <_dtoa_r+0xac4>
 80091be:	463b      	mov	r3, r7
 80091c0:	461f      	mov	r7, r3
 80091c2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80091c6:	2a30      	cmp	r2, #48	; 0x30
 80091c8:	d0fa      	beq.n	80091c0 <_dtoa_r+0xb68>
 80091ca:	e6f9      	b.n	8008fc0 <_dtoa_r+0x968>
 80091cc:	9a03      	ldr	r2, [sp, #12]
 80091ce:	429a      	cmp	r2, r3
 80091d0:	d1a5      	bne.n	800911e <_dtoa_r+0xac6>
 80091d2:	2331      	movs	r3, #49	; 0x31
 80091d4:	f10a 0a01 	add.w	sl, sl, #1
 80091d8:	e779      	b.n	80090ce <_dtoa_r+0xa76>
 80091da:	4b14      	ldr	r3, [pc, #80]	; (800922c <_dtoa_r+0xbd4>)
 80091dc:	f7ff baa8 	b.w	8008730 <_dtoa_r+0xd8>
 80091e0:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80091e2:	2b00      	cmp	r3, #0
 80091e4:	f47f aa81 	bne.w	80086ea <_dtoa_r+0x92>
 80091e8:	4b11      	ldr	r3, [pc, #68]	; (8009230 <_dtoa_r+0xbd8>)
 80091ea:	f7ff baa1 	b.w	8008730 <_dtoa_r+0xd8>
 80091ee:	f1b9 0f00 	cmp.w	r9, #0
 80091f2:	dc03      	bgt.n	80091fc <_dtoa_r+0xba4>
 80091f4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80091f6:	2b02      	cmp	r3, #2
 80091f8:	f73f aecb 	bgt.w	8008f92 <_dtoa_r+0x93a>
 80091fc:	9f03      	ldr	r7, [sp, #12]
 80091fe:	4621      	mov	r1, r4
 8009200:	4658      	mov	r0, fp
 8009202:	f7ff f99d 	bl	8008540 <quorem>
 8009206:	9a03      	ldr	r2, [sp, #12]
 8009208:	f100 0330 	add.w	r3, r0, #48	; 0x30
 800920c:	f807 3b01 	strb.w	r3, [r7], #1
 8009210:	1aba      	subs	r2, r7, r2
 8009212:	4591      	cmp	r9, r2
 8009214:	ddba      	ble.n	800918c <_dtoa_r+0xb34>
 8009216:	4659      	mov	r1, fp
 8009218:	2300      	movs	r3, #0
 800921a:	220a      	movs	r2, #10
 800921c:	4628      	mov	r0, r5
 800921e:	f000 fd05 	bl	8009c2c <__multadd>
 8009222:	4683      	mov	fp, r0
 8009224:	e7eb      	b.n	80091fe <_dtoa_r+0xba6>
 8009226:	bf00      	nop
 8009228:	0800bb18 	.word	0x0800bb18
 800922c:	0800b91c 	.word	0x0800b91c
 8009230:	0800ba99 	.word	0x0800ba99

08009234 <std>:
 8009234:	2300      	movs	r3, #0
 8009236:	b510      	push	{r4, lr}
 8009238:	4604      	mov	r4, r0
 800923a:	e9c0 3300 	strd	r3, r3, [r0]
 800923e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8009242:	6083      	str	r3, [r0, #8]
 8009244:	8181      	strh	r1, [r0, #12]
 8009246:	6643      	str	r3, [r0, #100]	; 0x64
 8009248:	81c2      	strh	r2, [r0, #14]
 800924a:	6183      	str	r3, [r0, #24]
 800924c:	4619      	mov	r1, r3
 800924e:	2208      	movs	r2, #8
 8009250:	305c      	adds	r0, #92	; 0x5c
 8009252:	f7fd fc35 	bl	8006ac0 <memset>
 8009256:	4b05      	ldr	r3, [pc, #20]	; (800926c <std+0x38>)
 8009258:	6224      	str	r4, [r4, #32]
 800925a:	6263      	str	r3, [r4, #36]	; 0x24
 800925c:	4b04      	ldr	r3, [pc, #16]	; (8009270 <std+0x3c>)
 800925e:	62a3      	str	r3, [r4, #40]	; 0x28
 8009260:	4b04      	ldr	r3, [pc, #16]	; (8009274 <std+0x40>)
 8009262:	62e3      	str	r3, [r4, #44]	; 0x2c
 8009264:	4b04      	ldr	r3, [pc, #16]	; (8009278 <std+0x44>)
 8009266:	6323      	str	r3, [r4, #48]	; 0x30
 8009268:	bd10      	pop	{r4, pc}
 800926a:	bf00      	nop
 800926c:	0800ac4d 	.word	0x0800ac4d
 8009270:	0800ac6f 	.word	0x0800ac6f
 8009274:	0800aca7 	.word	0x0800aca7
 8009278:	0800accb 	.word	0x0800accb

0800927c <_cleanup_r>:
 800927c:	4901      	ldr	r1, [pc, #4]	; (8009284 <_cleanup_r+0x8>)
 800927e:	f000 b8af 	b.w	80093e0 <_fwalk_reent>
 8009282:	bf00      	nop
 8009284:	0800b01d 	.word	0x0800b01d

08009288 <__sfmoreglue>:
 8009288:	2268      	movs	r2, #104	; 0x68
 800928a:	b570      	push	{r4, r5, r6, lr}
 800928c:	1e4d      	subs	r5, r1, #1
 800928e:	4355      	muls	r5, r2
 8009290:	460e      	mov	r6, r1
 8009292:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8009296:	f001 f99b 	bl	800a5d0 <_malloc_r>
 800929a:	4604      	mov	r4, r0
 800929c:	b140      	cbz	r0, 80092b0 <__sfmoreglue+0x28>
 800929e:	2100      	movs	r1, #0
 80092a0:	e9c0 1600 	strd	r1, r6, [r0]
 80092a4:	300c      	adds	r0, #12
 80092a6:	60a0      	str	r0, [r4, #8]
 80092a8:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80092ac:	f7fd fc08 	bl	8006ac0 <memset>
 80092b0:	4620      	mov	r0, r4
 80092b2:	bd70      	pop	{r4, r5, r6, pc}

080092b4 <__sfp_lock_acquire>:
 80092b4:	4801      	ldr	r0, [pc, #4]	; (80092bc <__sfp_lock_acquire+0x8>)
 80092b6:	f000 bc1e 	b.w	8009af6 <__retarget_lock_acquire_recursive>
 80092ba:	bf00      	nop
 80092bc:	20000655 	.word	0x20000655

080092c0 <__sfp_lock_release>:
 80092c0:	4801      	ldr	r0, [pc, #4]	; (80092c8 <__sfp_lock_release+0x8>)
 80092c2:	f000 bc19 	b.w	8009af8 <__retarget_lock_release_recursive>
 80092c6:	bf00      	nop
 80092c8:	20000655 	.word	0x20000655

080092cc <__sinit_lock_acquire>:
 80092cc:	4801      	ldr	r0, [pc, #4]	; (80092d4 <__sinit_lock_acquire+0x8>)
 80092ce:	f000 bc12 	b.w	8009af6 <__retarget_lock_acquire_recursive>
 80092d2:	bf00      	nop
 80092d4:	20000656 	.word	0x20000656

080092d8 <__sinit_lock_release>:
 80092d8:	4801      	ldr	r0, [pc, #4]	; (80092e0 <__sinit_lock_release+0x8>)
 80092da:	f000 bc0d 	b.w	8009af8 <__retarget_lock_release_recursive>
 80092de:	bf00      	nop
 80092e0:	20000656 	.word	0x20000656

080092e4 <__sinit>:
 80092e4:	b510      	push	{r4, lr}
 80092e6:	4604      	mov	r4, r0
 80092e8:	f7ff fff0 	bl	80092cc <__sinit_lock_acquire>
 80092ec:	69a3      	ldr	r3, [r4, #24]
 80092ee:	b11b      	cbz	r3, 80092f8 <__sinit+0x14>
 80092f0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80092f4:	f7ff bff0 	b.w	80092d8 <__sinit_lock_release>
 80092f8:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80092fc:	6523      	str	r3, [r4, #80]	; 0x50
 80092fe:	4b13      	ldr	r3, [pc, #76]	; (800934c <__sinit+0x68>)
 8009300:	4a13      	ldr	r2, [pc, #76]	; (8009350 <__sinit+0x6c>)
 8009302:	681b      	ldr	r3, [r3, #0]
 8009304:	62a2      	str	r2, [r4, #40]	; 0x28
 8009306:	42a3      	cmp	r3, r4
 8009308:	bf08      	it	eq
 800930a:	2301      	moveq	r3, #1
 800930c:	4620      	mov	r0, r4
 800930e:	bf08      	it	eq
 8009310:	61a3      	streq	r3, [r4, #24]
 8009312:	f000 f81f 	bl	8009354 <__sfp>
 8009316:	6060      	str	r0, [r4, #4]
 8009318:	4620      	mov	r0, r4
 800931a:	f000 f81b 	bl	8009354 <__sfp>
 800931e:	60a0      	str	r0, [r4, #8]
 8009320:	4620      	mov	r0, r4
 8009322:	f000 f817 	bl	8009354 <__sfp>
 8009326:	2200      	movs	r2, #0
 8009328:	2104      	movs	r1, #4
 800932a:	60e0      	str	r0, [r4, #12]
 800932c:	6860      	ldr	r0, [r4, #4]
 800932e:	f7ff ff81 	bl	8009234 <std>
 8009332:	2201      	movs	r2, #1
 8009334:	2109      	movs	r1, #9
 8009336:	68a0      	ldr	r0, [r4, #8]
 8009338:	f7ff ff7c 	bl	8009234 <std>
 800933c:	2202      	movs	r2, #2
 800933e:	2112      	movs	r1, #18
 8009340:	68e0      	ldr	r0, [r4, #12]
 8009342:	f7ff ff77 	bl	8009234 <std>
 8009346:	2301      	movs	r3, #1
 8009348:	61a3      	str	r3, [r4, #24]
 800934a:	e7d1      	b.n	80092f0 <__sinit+0xc>
 800934c:	0800b908 	.word	0x0800b908
 8009350:	0800927d 	.word	0x0800927d

08009354 <__sfp>:
 8009354:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009356:	4607      	mov	r7, r0
 8009358:	f7ff ffac 	bl	80092b4 <__sfp_lock_acquire>
 800935c:	4b1e      	ldr	r3, [pc, #120]	; (80093d8 <__sfp+0x84>)
 800935e:	681e      	ldr	r6, [r3, #0]
 8009360:	69b3      	ldr	r3, [r6, #24]
 8009362:	b913      	cbnz	r3, 800936a <__sfp+0x16>
 8009364:	4630      	mov	r0, r6
 8009366:	f7ff ffbd 	bl	80092e4 <__sinit>
 800936a:	3648      	adds	r6, #72	; 0x48
 800936c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8009370:	3b01      	subs	r3, #1
 8009372:	d503      	bpl.n	800937c <__sfp+0x28>
 8009374:	6833      	ldr	r3, [r6, #0]
 8009376:	b30b      	cbz	r3, 80093bc <__sfp+0x68>
 8009378:	6836      	ldr	r6, [r6, #0]
 800937a:	e7f7      	b.n	800936c <__sfp+0x18>
 800937c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8009380:	b9d5      	cbnz	r5, 80093b8 <__sfp+0x64>
 8009382:	4b16      	ldr	r3, [pc, #88]	; (80093dc <__sfp+0x88>)
 8009384:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8009388:	60e3      	str	r3, [r4, #12]
 800938a:	6665      	str	r5, [r4, #100]	; 0x64
 800938c:	f000 fbb2 	bl	8009af4 <__retarget_lock_init_recursive>
 8009390:	f7ff ff96 	bl	80092c0 <__sfp_lock_release>
 8009394:	2208      	movs	r2, #8
 8009396:	4629      	mov	r1, r5
 8009398:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800939c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80093a0:	6025      	str	r5, [r4, #0]
 80093a2:	61a5      	str	r5, [r4, #24]
 80093a4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80093a8:	f7fd fb8a 	bl	8006ac0 <memset>
 80093ac:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80093b0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80093b4:	4620      	mov	r0, r4
 80093b6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80093b8:	3468      	adds	r4, #104	; 0x68
 80093ba:	e7d9      	b.n	8009370 <__sfp+0x1c>
 80093bc:	2104      	movs	r1, #4
 80093be:	4638      	mov	r0, r7
 80093c0:	f7ff ff62 	bl	8009288 <__sfmoreglue>
 80093c4:	4604      	mov	r4, r0
 80093c6:	6030      	str	r0, [r6, #0]
 80093c8:	2800      	cmp	r0, #0
 80093ca:	d1d5      	bne.n	8009378 <__sfp+0x24>
 80093cc:	f7ff ff78 	bl	80092c0 <__sfp_lock_release>
 80093d0:	230c      	movs	r3, #12
 80093d2:	603b      	str	r3, [r7, #0]
 80093d4:	e7ee      	b.n	80093b4 <__sfp+0x60>
 80093d6:	bf00      	nop
 80093d8:	0800b908 	.word	0x0800b908
 80093dc:	ffff0001 	.word	0xffff0001

080093e0 <_fwalk_reent>:
 80093e0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80093e4:	4606      	mov	r6, r0
 80093e6:	4688      	mov	r8, r1
 80093e8:	2700      	movs	r7, #0
 80093ea:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80093ee:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80093f2:	f1b9 0901 	subs.w	r9, r9, #1
 80093f6:	d505      	bpl.n	8009404 <_fwalk_reent+0x24>
 80093f8:	6824      	ldr	r4, [r4, #0]
 80093fa:	2c00      	cmp	r4, #0
 80093fc:	d1f7      	bne.n	80093ee <_fwalk_reent+0xe>
 80093fe:	4638      	mov	r0, r7
 8009400:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009404:	89ab      	ldrh	r3, [r5, #12]
 8009406:	2b01      	cmp	r3, #1
 8009408:	d907      	bls.n	800941a <_fwalk_reent+0x3a>
 800940a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800940e:	3301      	adds	r3, #1
 8009410:	d003      	beq.n	800941a <_fwalk_reent+0x3a>
 8009412:	4629      	mov	r1, r5
 8009414:	4630      	mov	r0, r6
 8009416:	47c0      	blx	r8
 8009418:	4307      	orrs	r7, r0
 800941a:	3568      	adds	r5, #104	; 0x68
 800941c:	e7e9      	b.n	80093f2 <_fwalk_reent+0x12>

0800941e <rshift>:
 800941e:	6903      	ldr	r3, [r0, #16]
 8009420:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8009424:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8009428:	f100 0414 	add.w	r4, r0, #20
 800942c:	ea4f 1261 	mov.w	r2, r1, asr #5
 8009430:	dd46      	ble.n	80094c0 <rshift+0xa2>
 8009432:	f011 011f 	ands.w	r1, r1, #31
 8009436:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800943a:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800943e:	d10c      	bne.n	800945a <rshift+0x3c>
 8009440:	4629      	mov	r1, r5
 8009442:	f100 0710 	add.w	r7, r0, #16
 8009446:	42b1      	cmp	r1, r6
 8009448:	d335      	bcc.n	80094b6 <rshift+0x98>
 800944a:	1a9b      	subs	r3, r3, r2
 800944c:	009b      	lsls	r3, r3, #2
 800944e:	1eea      	subs	r2, r5, #3
 8009450:	4296      	cmp	r6, r2
 8009452:	bf38      	it	cc
 8009454:	2300      	movcc	r3, #0
 8009456:	4423      	add	r3, r4
 8009458:	e015      	b.n	8009486 <rshift+0x68>
 800945a:	46a1      	mov	r9, r4
 800945c:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8009460:	f1c1 0820 	rsb	r8, r1, #32
 8009464:	40cf      	lsrs	r7, r1
 8009466:	f105 0e04 	add.w	lr, r5, #4
 800946a:	4576      	cmp	r6, lr
 800946c:	46f4      	mov	ip, lr
 800946e:	d816      	bhi.n	800949e <rshift+0x80>
 8009470:	1a9a      	subs	r2, r3, r2
 8009472:	0092      	lsls	r2, r2, #2
 8009474:	3a04      	subs	r2, #4
 8009476:	3501      	adds	r5, #1
 8009478:	42ae      	cmp	r6, r5
 800947a:	bf38      	it	cc
 800947c:	2200      	movcc	r2, #0
 800947e:	18a3      	adds	r3, r4, r2
 8009480:	50a7      	str	r7, [r4, r2]
 8009482:	b107      	cbz	r7, 8009486 <rshift+0x68>
 8009484:	3304      	adds	r3, #4
 8009486:	42a3      	cmp	r3, r4
 8009488:	eba3 0204 	sub.w	r2, r3, r4
 800948c:	bf08      	it	eq
 800948e:	2300      	moveq	r3, #0
 8009490:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8009494:	6102      	str	r2, [r0, #16]
 8009496:	bf08      	it	eq
 8009498:	6143      	streq	r3, [r0, #20]
 800949a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800949e:	f8dc c000 	ldr.w	ip, [ip]
 80094a2:	fa0c fc08 	lsl.w	ip, ip, r8
 80094a6:	ea4c 0707 	orr.w	r7, ip, r7
 80094aa:	f849 7b04 	str.w	r7, [r9], #4
 80094ae:	f85e 7b04 	ldr.w	r7, [lr], #4
 80094b2:	40cf      	lsrs	r7, r1
 80094b4:	e7d9      	b.n	800946a <rshift+0x4c>
 80094b6:	f851 cb04 	ldr.w	ip, [r1], #4
 80094ba:	f847 cf04 	str.w	ip, [r7, #4]!
 80094be:	e7c2      	b.n	8009446 <rshift+0x28>
 80094c0:	4623      	mov	r3, r4
 80094c2:	e7e0      	b.n	8009486 <rshift+0x68>

080094c4 <__hexdig_fun>:
 80094c4:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 80094c8:	2b09      	cmp	r3, #9
 80094ca:	d802      	bhi.n	80094d2 <__hexdig_fun+0xe>
 80094cc:	3820      	subs	r0, #32
 80094ce:	b2c0      	uxtb	r0, r0
 80094d0:	4770      	bx	lr
 80094d2:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 80094d6:	2b05      	cmp	r3, #5
 80094d8:	d801      	bhi.n	80094de <__hexdig_fun+0x1a>
 80094da:	3847      	subs	r0, #71	; 0x47
 80094dc:	e7f7      	b.n	80094ce <__hexdig_fun+0xa>
 80094de:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 80094e2:	2b05      	cmp	r3, #5
 80094e4:	d801      	bhi.n	80094ea <__hexdig_fun+0x26>
 80094e6:	3827      	subs	r0, #39	; 0x27
 80094e8:	e7f1      	b.n	80094ce <__hexdig_fun+0xa>
 80094ea:	2000      	movs	r0, #0
 80094ec:	4770      	bx	lr
	...

080094f0 <__gethex>:
 80094f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80094f4:	b08b      	sub	sp, #44	; 0x2c
 80094f6:	9305      	str	r3, [sp, #20]
 80094f8:	4bb2      	ldr	r3, [pc, #712]	; (80097c4 <__gethex+0x2d4>)
 80094fa:	9002      	str	r0, [sp, #8]
 80094fc:	681b      	ldr	r3, [r3, #0]
 80094fe:	468b      	mov	fp, r1
 8009500:	4618      	mov	r0, r3
 8009502:	4690      	mov	r8, r2
 8009504:	9303      	str	r3, [sp, #12]
 8009506:	f7f6 fe23 	bl	8000150 <strlen>
 800950a:	4682      	mov	sl, r0
 800950c:	9b03      	ldr	r3, [sp, #12]
 800950e:	f8db 2000 	ldr.w	r2, [fp]
 8009512:	4403      	add	r3, r0
 8009514:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8009518:	9306      	str	r3, [sp, #24]
 800951a:	1c93      	adds	r3, r2, #2
 800951c:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 8009520:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 8009524:	32fe      	adds	r2, #254	; 0xfe
 8009526:	18d1      	adds	r1, r2, r3
 8009528:	461f      	mov	r7, r3
 800952a:	f813 0b01 	ldrb.w	r0, [r3], #1
 800952e:	9101      	str	r1, [sp, #4]
 8009530:	2830      	cmp	r0, #48	; 0x30
 8009532:	d0f8      	beq.n	8009526 <__gethex+0x36>
 8009534:	f7ff ffc6 	bl	80094c4 <__hexdig_fun>
 8009538:	4604      	mov	r4, r0
 800953a:	2800      	cmp	r0, #0
 800953c:	d13a      	bne.n	80095b4 <__gethex+0xc4>
 800953e:	4652      	mov	r2, sl
 8009540:	4638      	mov	r0, r7
 8009542:	9903      	ldr	r1, [sp, #12]
 8009544:	f001 fbc5 	bl	800acd2 <strncmp>
 8009548:	4605      	mov	r5, r0
 800954a:	2800      	cmp	r0, #0
 800954c:	d166      	bne.n	800961c <__gethex+0x12c>
 800954e:	f817 000a 	ldrb.w	r0, [r7, sl]
 8009552:	eb07 060a 	add.w	r6, r7, sl
 8009556:	f7ff ffb5 	bl	80094c4 <__hexdig_fun>
 800955a:	2800      	cmp	r0, #0
 800955c:	d060      	beq.n	8009620 <__gethex+0x130>
 800955e:	4633      	mov	r3, r6
 8009560:	7818      	ldrb	r0, [r3, #0]
 8009562:	461f      	mov	r7, r3
 8009564:	2830      	cmp	r0, #48	; 0x30
 8009566:	f103 0301 	add.w	r3, r3, #1
 800956a:	d0f9      	beq.n	8009560 <__gethex+0x70>
 800956c:	f7ff ffaa 	bl	80094c4 <__hexdig_fun>
 8009570:	2301      	movs	r3, #1
 8009572:	fab0 f480 	clz	r4, r0
 8009576:	4635      	mov	r5, r6
 8009578:	0964      	lsrs	r4, r4, #5
 800957a:	9301      	str	r3, [sp, #4]
 800957c:	463a      	mov	r2, r7
 800957e:	4616      	mov	r6, r2
 8009580:	7830      	ldrb	r0, [r6, #0]
 8009582:	3201      	adds	r2, #1
 8009584:	f7ff ff9e 	bl	80094c4 <__hexdig_fun>
 8009588:	2800      	cmp	r0, #0
 800958a:	d1f8      	bne.n	800957e <__gethex+0x8e>
 800958c:	4652      	mov	r2, sl
 800958e:	4630      	mov	r0, r6
 8009590:	9903      	ldr	r1, [sp, #12]
 8009592:	f001 fb9e 	bl	800acd2 <strncmp>
 8009596:	b980      	cbnz	r0, 80095ba <__gethex+0xca>
 8009598:	b94d      	cbnz	r5, 80095ae <__gethex+0xbe>
 800959a:	eb06 050a 	add.w	r5, r6, sl
 800959e:	462a      	mov	r2, r5
 80095a0:	4616      	mov	r6, r2
 80095a2:	7830      	ldrb	r0, [r6, #0]
 80095a4:	3201      	adds	r2, #1
 80095a6:	f7ff ff8d 	bl	80094c4 <__hexdig_fun>
 80095aa:	2800      	cmp	r0, #0
 80095ac:	d1f8      	bne.n	80095a0 <__gethex+0xb0>
 80095ae:	1bad      	subs	r5, r5, r6
 80095b0:	00ad      	lsls	r5, r5, #2
 80095b2:	e004      	b.n	80095be <__gethex+0xce>
 80095b4:	2400      	movs	r4, #0
 80095b6:	4625      	mov	r5, r4
 80095b8:	e7e0      	b.n	800957c <__gethex+0x8c>
 80095ba:	2d00      	cmp	r5, #0
 80095bc:	d1f7      	bne.n	80095ae <__gethex+0xbe>
 80095be:	7833      	ldrb	r3, [r6, #0]
 80095c0:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 80095c4:	2b50      	cmp	r3, #80	; 0x50
 80095c6:	d139      	bne.n	800963c <__gethex+0x14c>
 80095c8:	7873      	ldrb	r3, [r6, #1]
 80095ca:	2b2b      	cmp	r3, #43	; 0x2b
 80095cc:	d02a      	beq.n	8009624 <__gethex+0x134>
 80095ce:	2b2d      	cmp	r3, #45	; 0x2d
 80095d0:	d02c      	beq.n	800962c <__gethex+0x13c>
 80095d2:	f04f 0900 	mov.w	r9, #0
 80095d6:	1c71      	adds	r1, r6, #1
 80095d8:	7808      	ldrb	r0, [r1, #0]
 80095da:	f7ff ff73 	bl	80094c4 <__hexdig_fun>
 80095de:	1e43      	subs	r3, r0, #1
 80095e0:	b2db      	uxtb	r3, r3
 80095e2:	2b18      	cmp	r3, #24
 80095e4:	d82a      	bhi.n	800963c <__gethex+0x14c>
 80095e6:	f1a0 0210 	sub.w	r2, r0, #16
 80095ea:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 80095ee:	f7ff ff69 	bl	80094c4 <__hexdig_fun>
 80095f2:	1e43      	subs	r3, r0, #1
 80095f4:	b2db      	uxtb	r3, r3
 80095f6:	2b18      	cmp	r3, #24
 80095f8:	d91b      	bls.n	8009632 <__gethex+0x142>
 80095fa:	f1b9 0f00 	cmp.w	r9, #0
 80095fe:	d000      	beq.n	8009602 <__gethex+0x112>
 8009600:	4252      	negs	r2, r2
 8009602:	4415      	add	r5, r2
 8009604:	f8cb 1000 	str.w	r1, [fp]
 8009608:	b1d4      	cbz	r4, 8009640 <__gethex+0x150>
 800960a:	9b01      	ldr	r3, [sp, #4]
 800960c:	2b00      	cmp	r3, #0
 800960e:	bf14      	ite	ne
 8009610:	2700      	movne	r7, #0
 8009612:	2706      	moveq	r7, #6
 8009614:	4638      	mov	r0, r7
 8009616:	b00b      	add	sp, #44	; 0x2c
 8009618:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800961c:	463e      	mov	r6, r7
 800961e:	4625      	mov	r5, r4
 8009620:	2401      	movs	r4, #1
 8009622:	e7cc      	b.n	80095be <__gethex+0xce>
 8009624:	f04f 0900 	mov.w	r9, #0
 8009628:	1cb1      	adds	r1, r6, #2
 800962a:	e7d5      	b.n	80095d8 <__gethex+0xe8>
 800962c:	f04f 0901 	mov.w	r9, #1
 8009630:	e7fa      	b.n	8009628 <__gethex+0x138>
 8009632:	230a      	movs	r3, #10
 8009634:	fb03 0202 	mla	r2, r3, r2, r0
 8009638:	3a10      	subs	r2, #16
 800963a:	e7d6      	b.n	80095ea <__gethex+0xfa>
 800963c:	4631      	mov	r1, r6
 800963e:	e7e1      	b.n	8009604 <__gethex+0x114>
 8009640:	4621      	mov	r1, r4
 8009642:	1bf3      	subs	r3, r6, r7
 8009644:	3b01      	subs	r3, #1
 8009646:	2b07      	cmp	r3, #7
 8009648:	dc0a      	bgt.n	8009660 <__gethex+0x170>
 800964a:	9802      	ldr	r0, [sp, #8]
 800964c:	f000 fa8c 	bl	8009b68 <_Balloc>
 8009650:	4604      	mov	r4, r0
 8009652:	b940      	cbnz	r0, 8009666 <__gethex+0x176>
 8009654:	4602      	mov	r2, r0
 8009656:	21de      	movs	r1, #222	; 0xde
 8009658:	4b5b      	ldr	r3, [pc, #364]	; (80097c8 <__gethex+0x2d8>)
 800965a:	485c      	ldr	r0, [pc, #368]	; (80097cc <__gethex+0x2dc>)
 800965c:	f001 fc2e 	bl	800aebc <__assert_func>
 8009660:	3101      	adds	r1, #1
 8009662:	105b      	asrs	r3, r3, #1
 8009664:	e7ef      	b.n	8009646 <__gethex+0x156>
 8009666:	f04f 0b00 	mov.w	fp, #0
 800966a:	f100 0914 	add.w	r9, r0, #20
 800966e:	f1ca 0301 	rsb	r3, sl, #1
 8009672:	f8cd 9010 	str.w	r9, [sp, #16]
 8009676:	f8cd b004 	str.w	fp, [sp, #4]
 800967a:	9308      	str	r3, [sp, #32]
 800967c:	42b7      	cmp	r7, r6
 800967e:	d33f      	bcc.n	8009700 <__gethex+0x210>
 8009680:	9f04      	ldr	r7, [sp, #16]
 8009682:	9b01      	ldr	r3, [sp, #4]
 8009684:	f847 3b04 	str.w	r3, [r7], #4
 8009688:	eba7 0709 	sub.w	r7, r7, r9
 800968c:	10bf      	asrs	r7, r7, #2
 800968e:	6127      	str	r7, [r4, #16]
 8009690:	4618      	mov	r0, r3
 8009692:	f000 fb5b 	bl	8009d4c <__hi0bits>
 8009696:	017f      	lsls	r7, r7, #5
 8009698:	f8d8 6000 	ldr.w	r6, [r8]
 800969c:	1a3f      	subs	r7, r7, r0
 800969e:	42b7      	cmp	r7, r6
 80096a0:	dd62      	ble.n	8009768 <__gethex+0x278>
 80096a2:	1bbf      	subs	r7, r7, r6
 80096a4:	4639      	mov	r1, r7
 80096a6:	4620      	mov	r0, r4
 80096a8:	f000 fef5 	bl	800a496 <__any_on>
 80096ac:	4682      	mov	sl, r0
 80096ae:	b1a8      	cbz	r0, 80096dc <__gethex+0x1ec>
 80096b0:	f04f 0a01 	mov.w	sl, #1
 80096b4:	1e7b      	subs	r3, r7, #1
 80096b6:	1159      	asrs	r1, r3, #5
 80096b8:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 80096bc:	f003 021f 	and.w	r2, r3, #31
 80096c0:	fa0a f202 	lsl.w	r2, sl, r2
 80096c4:	420a      	tst	r2, r1
 80096c6:	d009      	beq.n	80096dc <__gethex+0x1ec>
 80096c8:	4553      	cmp	r3, sl
 80096ca:	dd05      	ble.n	80096d8 <__gethex+0x1e8>
 80096cc:	4620      	mov	r0, r4
 80096ce:	1eb9      	subs	r1, r7, #2
 80096d0:	f000 fee1 	bl	800a496 <__any_on>
 80096d4:	2800      	cmp	r0, #0
 80096d6:	d144      	bne.n	8009762 <__gethex+0x272>
 80096d8:	f04f 0a02 	mov.w	sl, #2
 80096dc:	4639      	mov	r1, r7
 80096de:	4620      	mov	r0, r4
 80096e0:	f7ff fe9d 	bl	800941e <rshift>
 80096e4:	443d      	add	r5, r7
 80096e6:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80096ea:	42ab      	cmp	r3, r5
 80096ec:	da4a      	bge.n	8009784 <__gethex+0x294>
 80096ee:	4621      	mov	r1, r4
 80096f0:	9802      	ldr	r0, [sp, #8]
 80096f2:	f000 fa79 	bl	8009be8 <_Bfree>
 80096f6:	2300      	movs	r3, #0
 80096f8:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80096fa:	27a3      	movs	r7, #163	; 0xa3
 80096fc:	6013      	str	r3, [r2, #0]
 80096fe:	e789      	b.n	8009614 <__gethex+0x124>
 8009700:	1e73      	subs	r3, r6, #1
 8009702:	9a06      	ldr	r2, [sp, #24]
 8009704:	9307      	str	r3, [sp, #28]
 8009706:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800970a:	4293      	cmp	r3, r2
 800970c:	d019      	beq.n	8009742 <__gethex+0x252>
 800970e:	f1bb 0f20 	cmp.w	fp, #32
 8009712:	d107      	bne.n	8009724 <__gethex+0x234>
 8009714:	9b04      	ldr	r3, [sp, #16]
 8009716:	9a01      	ldr	r2, [sp, #4]
 8009718:	f843 2b04 	str.w	r2, [r3], #4
 800971c:	9304      	str	r3, [sp, #16]
 800971e:	2300      	movs	r3, #0
 8009720:	469b      	mov	fp, r3
 8009722:	9301      	str	r3, [sp, #4]
 8009724:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 8009728:	f7ff fecc 	bl	80094c4 <__hexdig_fun>
 800972c:	9b01      	ldr	r3, [sp, #4]
 800972e:	f000 000f 	and.w	r0, r0, #15
 8009732:	fa00 f00b 	lsl.w	r0, r0, fp
 8009736:	4303      	orrs	r3, r0
 8009738:	9301      	str	r3, [sp, #4]
 800973a:	f10b 0b04 	add.w	fp, fp, #4
 800973e:	9b07      	ldr	r3, [sp, #28]
 8009740:	e00d      	b.n	800975e <__gethex+0x26e>
 8009742:	9a08      	ldr	r2, [sp, #32]
 8009744:	1e73      	subs	r3, r6, #1
 8009746:	4413      	add	r3, r2
 8009748:	42bb      	cmp	r3, r7
 800974a:	d3e0      	bcc.n	800970e <__gethex+0x21e>
 800974c:	4618      	mov	r0, r3
 800974e:	4652      	mov	r2, sl
 8009750:	9903      	ldr	r1, [sp, #12]
 8009752:	9309      	str	r3, [sp, #36]	; 0x24
 8009754:	f001 fabd 	bl	800acd2 <strncmp>
 8009758:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800975a:	2800      	cmp	r0, #0
 800975c:	d1d7      	bne.n	800970e <__gethex+0x21e>
 800975e:	461e      	mov	r6, r3
 8009760:	e78c      	b.n	800967c <__gethex+0x18c>
 8009762:	f04f 0a03 	mov.w	sl, #3
 8009766:	e7b9      	b.n	80096dc <__gethex+0x1ec>
 8009768:	da09      	bge.n	800977e <__gethex+0x28e>
 800976a:	1bf7      	subs	r7, r6, r7
 800976c:	4621      	mov	r1, r4
 800976e:	463a      	mov	r2, r7
 8009770:	9802      	ldr	r0, [sp, #8]
 8009772:	f000 fc51 	bl	800a018 <__lshift>
 8009776:	4604      	mov	r4, r0
 8009778:	1bed      	subs	r5, r5, r7
 800977a:	f100 0914 	add.w	r9, r0, #20
 800977e:	f04f 0a00 	mov.w	sl, #0
 8009782:	e7b0      	b.n	80096e6 <__gethex+0x1f6>
 8009784:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8009788:	42a8      	cmp	r0, r5
 800978a:	dd72      	ble.n	8009872 <__gethex+0x382>
 800978c:	1b45      	subs	r5, r0, r5
 800978e:	42ae      	cmp	r6, r5
 8009790:	dc35      	bgt.n	80097fe <__gethex+0x30e>
 8009792:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8009796:	2b02      	cmp	r3, #2
 8009798:	d029      	beq.n	80097ee <__gethex+0x2fe>
 800979a:	2b03      	cmp	r3, #3
 800979c:	d02b      	beq.n	80097f6 <__gethex+0x306>
 800979e:	2b01      	cmp	r3, #1
 80097a0:	d11c      	bne.n	80097dc <__gethex+0x2ec>
 80097a2:	42ae      	cmp	r6, r5
 80097a4:	d11a      	bne.n	80097dc <__gethex+0x2ec>
 80097a6:	2e01      	cmp	r6, #1
 80097a8:	d112      	bne.n	80097d0 <__gethex+0x2e0>
 80097aa:	f8d8 3004 	ldr.w	r3, [r8, #4]
 80097ae:	9a05      	ldr	r2, [sp, #20]
 80097b0:	2762      	movs	r7, #98	; 0x62
 80097b2:	6013      	str	r3, [r2, #0]
 80097b4:	2301      	movs	r3, #1
 80097b6:	6123      	str	r3, [r4, #16]
 80097b8:	f8c9 3000 	str.w	r3, [r9]
 80097bc:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80097be:	601c      	str	r4, [r3, #0]
 80097c0:	e728      	b.n	8009614 <__gethex+0x124>
 80097c2:	bf00      	nop
 80097c4:	0800bbf4 	.word	0x0800bbf4
 80097c8:	0800bb18 	.word	0x0800bb18
 80097cc:	0800bb8c 	.word	0x0800bb8c
 80097d0:	4620      	mov	r0, r4
 80097d2:	1e71      	subs	r1, r6, #1
 80097d4:	f000 fe5f 	bl	800a496 <__any_on>
 80097d8:	2800      	cmp	r0, #0
 80097da:	d1e6      	bne.n	80097aa <__gethex+0x2ba>
 80097dc:	4621      	mov	r1, r4
 80097de:	9802      	ldr	r0, [sp, #8]
 80097e0:	f000 fa02 	bl	8009be8 <_Bfree>
 80097e4:	2300      	movs	r3, #0
 80097e6:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80097e8:	2750      	movs	r7, #80	; 0x50
 80097ea:	6013      	str	r3, [r2, #0]
 80097ec:	e712      	b.n	8009614 <__gethex+0x124>
 80097ee:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80097f0:	2b00      	cmp	r3, #0
 80097f2:	d1f3      	bne.n	80097dc <__gethex+0x2ec>
 80097f4:	e7d9      	b.n	80097aa <__gethex+0x2ba>
 80097f6:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80097f8:	2b00      	cmp	r3, #0
 80097fa:	d1d6      	bne.n	80097aa <__gethex+0x2ba>
 80097fc:	e7ee      	b.n	80097dc <__gethex+0x2ec>
 80097fe:	1e6f      	subs	r7, r5, #1
 8009800:	f1ba 0f00 	cmp.w	sl, #0
 8009804:	d132      	bne.n	800986c <__gethex+0x37c>
 8009806:	b127      	cbz	r7, 8009812 <__gethex+0x322>
 8009808:	4639      	mov	r1, r7
 800980a:	4620      	mov	r0, r4
 800980c:	f000 fe43 	bl	800a496 <__any_on>
 8009810:	4682      	mov	sl, r0
 8009812:	2101      	movs	r1, #1
 8009814:	117b      	asrs	r3, r7, #5
 8009816:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 800981a:	f007 071f 	and.w	r7, r7, #31
 800981e:	fa01 f707 	lsl.w	r7, r1, r7
 8009822:	421f      	tst	r7, r3
 8009824:	f04f 0702 	mov.w	r7, #2
 8009828:	4629      	mov	r1, r5
 800982a:	4620      	mov	r0, r4
 800982c:	bf18      	it	ne
 800982e:	f04a 0a02 	orrne.w	sl, sl, #2
 8009832:	1b76      	subs	r6, r6, r5
 8009834:	f7ff fdf3 	bl	800941e <rshift>
 8009838:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800983c:	f1ba 0f00 	cmp.w	sl, #0
 8009840:	d048      	beq.n	80098d4 <__gethex+0x3e4>
 8009842:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8009846:	2b02      	cmp	r3, #2
 8009848:	d015      	beq.n	8009876 <__gethex+0x386>
 800984a:	2b03      	cmp	r3, #3
 800984c:	d017      	beq.n	800987e <__gethex+0x38e>
 800984e:	2b01      	cmp	r3, #1
 8009850:	d109      	bne.n	8009866 <__gethex+0x376>
 8009852:	f01a 0f02 	tst.w	sl, #2
 8009856:	d006      	beq.n	8009866 <__gethex+0x376>
 8009858:	f8d9 0000 	ldr.w	r0, [r9]
 800985c:	ea4a 0a00 	orr.w	sl, sl, r0
 8009860:	f01a 0f01 	tst.w	sl, #1
 8009864:	d10e      	bne.n	8009884 <__gethex+0x394>
 8009866:	f047 0710 	orr.w	r7, r7, #16
 800986a:	e033      	b.n	80098d4 <__gethex+0x3e4>
 800986c:	f04f 0a01 	mov.w	sl, #1
 8009870:	e7cf      	b.n	8009812 <__gethex+0x322>
 8009872:	2701      	movs	r7, #1
 8009874:	e7e2      	b.n	800983c <__gethex+0x34c>
 8009876:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8009878:	f1c3 0301 	rsb	r3, r3, #1
 800987c:	9315      	str	r3, [sp, #84]	; 0x54
 800987e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8009880:	2b00      	cmp	r3, #0
 8009882:	d0f0      	beq.n	8009866 <__gethex+0x376>
 8009884:	f04f 0c00 	mov.w	ip, #0
 8009888:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800988c:	f104 0314 	add.w	r3, r4, #20
 8009890:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8009894:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8009898:	4618      	mov	r0, r3
 800989a:	f853 2b04 	ldr.w	r2, [r3], #4
 800989e:	f1b2 3fff 	cmp.w	r2, #4294967295
 80098a2:	d01c      	beq.n	80098de <__gethex+0x3ee>
 80098a4:	3201      	adds	r2, #1
 80098a6:	6002      	str	r2, [r0, #0]
 80098a8:	2f02      	cmp	r7, #2
 80098aa:	f104 0314 	add.w	r3, r4, #20
 80098ae:	d13d      	bne.n	800992c <__gethex+0x43c>
 80098b0:	f8d8 2000 	ldr.w	r2, [r8]
 80098b4:	3a01      	subs	r2, #1
 80098b6:	42b2      	cmp	r2, r6
 80098b8:	d10a      	bne.n	80098d0 <__gethex+0x3e0>
 80098ba:	2201      	movs	r2, #1
 80098bc:	1171      	asrs	r1, r6, #5
 80098be:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80098c2:	f006 061f 	and.w	r6, r6, #31
 80098c6:	fa02 f606 	lsl.w	r6, r2, r6
 80098ca:	421e      	tst	r6, r3
 80098cc:	bf18      	it	ne
 80098ce:	4617      	movne	r7, r2
 80098d0:	f047 0720 	orr.w	r7, r7, #32
 80098d4:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80098d6:	601c      	str	r4, [r3, #0]
 80098d8:	9b05      	ldr	r3, [sp, #20]
 80098da:	601d      	str	r5, [r3, #0]
 80098dc:	e69a      	b.n	8009614 <__gethex+0x124>
 80098de:	4299      	cmp	r1, r3
 80098e0:	f843 cc04 	str.w	ip, [r3, #-4]
 80098e4:	d8d8      	bhi.n	8009898 <__gethex+0x3a8>
 80098e6:	68a3      	ldr	r3, [r4, #8]
 80098e8:	459b      	cmp	fp, r3
 80098ea:	db17      	blt.n	800991c <__gethex+0x42c>
 80098ec:	6861      	ldr	r1, [r4, #4]
 80098ee:	9802      	ldr	r0, [sp, #8]
 80098f0:	3101      	adds	r1, #1
 80098f2:	f000 f939 	bl	8009b68 <_Balloc>
 80098f6:	4681      	mov	r9, r0
 80098f8:	b918      	cbnz	r0, 8009902 <__gethex+0x412>
 80098fa:	4602      	mov	r2, r0
 80098fc:	2184      	movs	r1, #132	; 0x84
 80098fe:	4b19      	ldr	r3, [pc, #100]	; (8009964 <__gethex+0x474>)
 8009900:	e6ab      	b.n	800965a <__gethex+0x16a>
 8009902:	6922      	ldr	r2, [r4, #16]
 8009904:	f104 010c 	add.w	r1, r4, #12
 8009908:	3202      	adds	r2, #2
 800990a:	0092      	lsls	r2, r2, #2
 800990c:	300c      	adds	r0, #12
 800990e:	f000 f91d 	bl	8009b4c <memcpy>
 8009912:	4621      	mov	r1, r4
 8009914:	9802      	ldr	r0, [sp, #8]
 8009916:	f000 f967 	bl	8009be8 <_Bfree>
 800991a:	464c      	mov	r4, r9
 800991c:	6923      	ldr	r3, [r4, #16]
 800991e:	1c5a      	adds	r2, r3, #1
 8009920:	6122      	str	r2, [r4, #16]
 8009922:	2201      	movs	r2, #1
 8009924:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8009928:	615a      	str	r2, [r3, #20]
 800992a:	e7bd      	b.n	80098a8 <__gethex+0x3b8>
 800992c:	6922      	ldr	r2, [r4, #16]
 800992e:	455a      	cmp	r2, fp
 8009930:	dd0b      	ble.n	800994a <__gethex+0x45a>
 8009932:	2101      	movs	r1, #1
 8009934:	4620      	mov	r0, r4
 8009936:	f7ff fd72 	bl	800941e <rshift>
 800993a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800993e:	3501      	adds	r5, #1
 8009940:	42ab      	cmp	r3, r5
 8009942:	f6ff aed4 	blt.w	80096ee <__gethex+0x1fe>
 8009946:	2701      	movs	r7, #1
 8009948:	e7c2      	b.n	80098d0 <__gethex+0x3e0>
 800994a:	f016 061f 	ands.w	r6, r6, #31
 800994e:	d0fa      	beq.n	8009946 <__gethex+0x456>
 8009950:	4453      	add	r3, sl
 8009952:	f853 0c04 	ldr.w	r0, [r3, #-4]
 8009956:	f000 f9f9 	bl	8009d4c <__hi0bits>
 800995a:	f1c6 0620 	rsb	r6, r6, #32
 800995e:	42b0      	cmp	r0, r6
 8009960:	dbe7      	blt.n	8009932 <__gethex+0x442>
 8009962:	e7f0      	b.n	8009946 <__gethex+0x456>
 8009964:	0800bb18 	.word	0x0800bb18

08009968 <L_shift>:
 8009968:	f1c2 0208 	rsb	r2, r2, #8
 800996c:	0092      	lsls	r2, r2, #2
 800996e:	b570      	push	{r4, r5, r6, lr}
 8009970:	f1c2 0620 	rsb	r6, r2, #32
 8009974:	6843      	ldr	r3, [r0, #4]
 8009976:	6804      	ldr	r4, [r0, #0]
 8009978:	fa03 f506 	lsl.w	r5, r3, r6
 800997c:	432c      	orrs	r4, r5
 800997e:	40d3      	lsrs	r3, r2
 8009980:	6004      	str	r4, [r0, #0]
 8009982:	f840 3f04 	str.w	r3, [r0, #4]!
 8009986:	4288      	cmp	r0, r1
 8009988:	d3f4      	bcc.n	8009974 <L_shift+0xc>
 800998a:	bd70      	pop	{r4, r5, r6, pc}

0800998c <__match>:
 800998c:	b530      	push	{r4, r5, lr}
 800998e:	6803      	ldr	r3, [r0, #0]
 8009990:	3301      	adds	r3, #1
 8009992:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009996:	b914      	cbnz	r4, 800999e <__match+0x12>
 8009998:	6003      	str	r3, [r0, #0]
 800999a:	2001      	movs	r0, #1
 800999c:	bd30      	pop	{r4, r5, pc}
 800999e:	f813 2b01 	ldrb.w	r2, [r3], #1
 80099a2:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 80099a6:	2d19      	cmp	r5, #25
 80099a8:	bf98      	it	ls
 80099aa:	3220      	addls	r2, #32
 80099ac:	42a2      	cmp	r2, r4
 80099ae:	d0f0      	beq.n	8009992 <__match+0x6>
 80099b0:	2000      	movs	r0, #0
 80099b2:	e7f3      	b.n	800999c <__match+0x10>

080099b4 <__hexnan>:
 80099b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80099b8:	2500      	movs	r5, #0
 80099ba:	680b      	ldr	r3, [r1, #0]
 80099bc:	4682      	mov	sl, r0
 80099be:	115e      	asrs	r6, r3, #5
 80099c0:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 80099c4:	f013 031f 	ands.w	r3, r3, #31
 80099c8:	bf18      	it	ne
 80099ca:	3604      	addne	r6, #4
 80099cc:	1f37      	subs	r7, r6, #4
 80099ce:	46b9      	mov	r9, r7
 80099d0:	463c      	mov	r4, r7
 80099d2:	46ab      	mov	fp, r5
 80099d4:	b087      	sub	sp, #28
 80099d6:	4690      	mov	r8, r2
 80099d8:	6802      	ldr	r2, [r0, #0]
 80099da:	9301      	str	r3, [sp, #4]
 80099dc:	f846 5c04 	str.w	r5, [r6, #-4]
 80099e0:	9502      	str	r5, [sp, #8]
 80099e2:	7851      	ldrb	r1, [r2, #1]
 80099e4:	1c53      	adds	r3, r2, #1
 80099e6:	9303      	str	r3, [sp, #12]
 80099e8:	b341      	cbz	r1, 8009a3c <__hexnan+0x88>
 80099ea:	4608      	mov	r0, r1
 80099ec:	9205      	str	r2, [sp, #20]
 80099ee:	9104      	str	r1, [sp, #16]
 80099f0:	f7ff fd68 	bl	80094c4 <__hexdig_fun>
 80099f4:	2800      	cmp	r0, #0
 80099f6:	d14f      	bne.n	8009a98 <__hexnan+0xe4>
 80099f8:	9904      	ldr	r1, [sp, #16]
 80099fa:	9a05      	ldr	r2, [sp, #20]
 80099fc:	2920      	cmp	r1, #32
 80099fe:	d818      	bhi.n	8009a32 <__hexnan+0x7e>
 8009a00:	9b02      	ldr	r3, [sp, #8]
 8009a02:	459b      	cmp	fp, r3
 8009a04:	dd13      	ble.n	8009a2e <__hexnan+0x7a>
 8009a06:	454c      	cmp	r4, r9
 8009a08:	d206      	bcs.n	8009a18 <__hexnan+0x64>
 8009a0a:	2d07      	cmp	r5, #7
 8009a0c:	dc04      	bgt.n	8009a18 <__hexnan+0x64>
 8009a0e:	462a      	mov	r2, r5
 8009a10:	4649      	mov	r1, r9
 8009a12:	4620      	mov	r0, r4
 8009a14:	f7ff ffa8 	bl	8009968 <L_shift>
 8009a18:	4544      	cmp	r4, r8
 8009a1a:	d950      	bls.n	8009abe <__hexnan+0x10a>
 8009a1c:	2300      	movs	r3, #0
 8009a1e:	f1a4 0904 	sub.w	r9, r4, #4
 8009a22:	f844 3c04 	str.w	r3, [r4, #-4]
 8009a26:	461d      	mov	r5, r3
 8009a28:	464c      	mov	r4, r9
 8009a2a:	f8cd b008 	str.w	fp, [sp, #8]
 8009a2e:	9a03      	ldr	r2, [sp, #12]
 8009a30:	e7d7      	b.n	80099e2 <__hexnan+0x2e>
 8009a32:	2929      	cmp	r1, #41	; 0x29
 8009a34:	d156      	bne.n	8009ae4 <__hexnan+0x130>
 8009a36:	3202      	adds	r2, #2
 8009a38:	f8ca 2000 	str.w	r2, [sl]
 8009a3c:	f1bb 0f00 	cmp.w	fp, #0
 8009a40:	d050      	beq.n	8009ae4 <__hexnan+0x130>
 8009a42:	454c      	cmp	r4, r9
 8009a44:	d206      	bcs.n	8009a54 <__hexnan+0xa0>
 8009a46:	2d07      	cmp	r5, #7
 8009a48:	dc04      	bgt.n	8009a54 <__hexnan+0xa0>
 8009a4a:	462a      	mov	r2, r5
 8009a4c:	4649      	mov	r1, r9
 8009a4e:	4620      	mov	r0, r4
 8009a50:	f7ff ff8a 	bl	8009968 <L_shift>
 8009a54:	4544      	cmp	r4, r8
 8009a56:	d934      	bls.n	8009ac2 <__hexnan+0x10e>
 8009a58:	4623      	mov	r3, r4
 8009a5a:	f1a8 0204 	sub.w	r2, r8, #4
 8009a5e:	f853 1b04 	ldr.w	r1, [r3], #4
 8009a62:	429f      	cmp	r7, r3
 8009a64:	f842 1f04 	str.w	r1, [r2, #4]!
 8009a68:	d2f9      	bcs.n	8009a5e <__hexnan+0xaa>
 8009a6a:	1b3b      	subs	r3, r7, r4
 8009a6c:	f023 0303 	bic.w	r3, r3, #3
 8009a70:	3304      	adds	r3, #4
 8009a72:	3401      	adds	r4, #1
 8009a74:	3e03      	subs	r6, #3
 8009a76:	42b4      	cmp	r4, r6
 8009a78:	bf88      	it	hi
 8009a7a:	2304      	movhi	r3, #4
 8009a7c:	2200      	movs	r2, #0
 8009a7e:	4443      	add	r3, r8
 8009a80:	f843 2b04 	str.w	r2, [r3], #4
 8009a84:	429f      	cmp	r7, r3
 8009a86:	d2fb      	bcs.n	8009a80 <__hexnan+0xcc>
 8009a88:	683b      	ldr	r3, [r7, #0]
 8009a8a:	b91b      	cbnz	r3, 8009a94 <__hexnan+0xe0>
 8009a8c:	4547      	cmp	r7, r8
 8009a8e:	d127      	bne.n	8009ae0 <__hexnan+0x12c>
 8009a90:	2301      	movs	r3, #1
 8009a92:	603b      	str	r3, [r7, #0]
 8009a94:	2005      	movs	r0, #5
 8009a96:	e026      	b.n	8009ae6 <__hexnan+0x132>
 8009a98:	3501      	adds	r5, #1
 8009a9a:	2d08      	cmp	r5, #8
 8009a9c:	f10b 0b01 	add.w	fp, fp, #1
 8009aa0:	dd06      	ble.n	8009ab0 <__hexnan+0xfc>
 8009aa2:	4544      	cmp	r4, r8
 8009aa4:	d9c3      	bls.n	8009a2e <__hexnan+0x7a>
 8009aa6:	2300      	movs	r3, #0
 8009aa8:	2501      	movs	r5, #1
 8009aaa:	f844 3c04 	str.w	r3, [r4, #-4]
 8009aae:	3c04      	subs	r4, #4
 8009ab0:	6822      	ldr	r2, [r4, #0]
 8009ab2:	f000 000f 	and.w	r0, r0, #15
 8009ab6:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 8009aba:	6022      	str	r2, [r4, #0]
 8009abc:	e7b7      	b.n	8009a2e <__hexnan+0x7a>
 8009abe:	2508      	movs	r5, #8
 8009ac0:	e7b5      	b.n	8009a2e <__hexnan+0x7a>
 8009ac2:	9b01      	ldr	r3, [sp, #4]
 8009ac4:	2b00      	cmp	r3, #0
 8009ac6:	d0df      	beq.n	8009a88 <__hexnan+0xd4>
 8009ac8:	f04f 32ff 	mov.w	r2, #4294967295
 8009acc:	f1c3 0320 	rsb	r3, r3, #32
 8009ad0:	fa22 f303 	lsr.w	r3, r2, r3
 8009ad4:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8009ad8:	401a      	ands	r2, r3
 8009ada:	f846 2c04 	str.w	r2, [r6, #-4]
 8009ade:	e7d3      	b.n	8009a88 <__hexnan+0xd4>
 8009ae0:	3f04      	subs	r7, #4
 8009ae2:	e7d1      	b.n	8009a88 <__hexnan+0xd4>
 8009ae4:	2004      	movs	r0, #4
 8009ae6:	b007      	add	sp, #28
 8009ae8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08009aec <_localeconv_r>:
 8009aec:	4800      	ldr	r0, [pc, #0]	; (8009af0 <_localeconv_r+0x4>)
 8009aee:	4770      	bx	lr
 8009af0:	20000168 	.word	0x20000168

08009af4 <__retarget_lock_init_recursive>:
 8009af4:	4770      	bx	lr

08009af6 <__retarget_lock_acquire_recursive>:
 8009af6:	4770      	bx	lr

08009af8 <__retarget_lock_release_recursive>:
 8009af8:	4770      	bx	lr
	...

08009afc <malloc>:
 8009afc:	4b02      	ldr	r3, [pc, #8]	; (8009b08 <malloc+0xc>)
 8009afe:	4601      	mov	r1, r0
 8009b00:	6818      	ldr	r0, [r3, #0]
 8009b02:	f000 bd65 	b.w	800a5d0 <_malloc_r>
 8009b06:	bf00      	nop
 8009b08:	20000010 	.word	0x20000010

08009b0c <__ascii_mbtowc>:
 8009b0c:	b082      	sub	sp, #8
 8009b0e:	b901      	cbnz	r1, 8009b12 <__ascii_mbtowc+0x6>
 8009b10:	a901      	add	r1, sp, #4
 8009b12:	b142      	cbz	r2, 8009b26 <__ascii_mbtowc+0x1a>
 8009b14:	b14b      	cbz	r3, 8009b2a <__ascii_mbtowc+0x1e>
 8009b16:	7813      	ldrb	r3, [r2, #0]
 8009b18:	600b      	str	r3, [r1, #0]
 8009b1a:	7812      	ldrb	r2, [r2, #0]
 8009b1c:	1e10      	subs	r0, r2, #0
 8009b1e:	bf18      	it	ne
 8009b20:	2001      	movne	r0, #1
 8009b22:	b002      	add	sp, #8
 8009b24:	4770      	bx	lr
 8009b26:	4610      	mov	r0, r2
 8009b28:	e7fb      	b.n	8009b22 <__ascii_mbtowc+0x16>
 8009b2a:	f06f 0001 	mvn.w	r0, #1
 8009b2e:	e7f8      	b.n	8009b22 <__ascii_mbtowc+0x16>

08009b30 <memchr>:
 8009b30:	4603      	mov	r3, r0
 8009b32:	b510      	push	{r4, lr}
 8009b34:	b2c9      	uxtb	r1, r1
 8009b36:	4402      	add	r2, r0
 8009b38:	4293      	cmp	r3, r2
 8009b3a:	4618      	mov	r0, r3
 8009b3c:	d101      	bne.n	8009b42 <memchr+0x12>
 8009b3e:	2000      	movs	r0, #0
 8009b40:	e003      	b.n	8009b4a <memchr+0x1a>
 8009b42:	7804      	ldrb	r4, [r0, #0]
 8009b44:	3301      	adds	r3, #1
 8009b46:	428c      	cmp	r4, r1
 8009b48:	d1f6      	bne.n	8009b38 <memchr+0x8>
 8009b4a:	bd10      	pop	{r4, pc}

08009b4c <memcpy>:
 8009b4c:	440a      	add	r2, r1
 8009b4e:	4291      	cmp	r1, r2
 8009b50:	f100 33ff 	add.w	r3, r0, #4294967295
 8009b54:	d100      	bne.n	8009b58 <memcpy+0xc>
 8009b56:	4770      	bx	lr
 8009b58:	b510      	push	{r4, lr}
 8009b5a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009b5e:	4291      	cmp	r1, r2
 8009b60:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009b64:	d1f9      	bne.n	8009b5a <memcpy+0xe>
 8009b66:	bd10      	pop	{r4, pc}

08009b68 <_Balloc>:
 8009b68:	b570      	push	{r4, r5, r6, lr}
 8009b6a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8009b6c:	4604      	mov	r4, r0
 8009b6e:	460d      	mov	r5, r1
 8009b70:	b976      	cbnz	r6, 8009b90 <_Balloc+0x28>
 8009b72:	2010      	movs	r0, #16
 8009b74:	f7ff ffc2 	bl	8009afc <malloc>
 8009b78:	4602      	mov	r2, r0
 8009b7a:	6260      	str	r0, [r4, #36]	; 0x24
 8009b7c:	b920      	cbnz	r0, 8009b88 <_Balloc+0x20>
 8009b7e:	2166      	movs	r1, #102	; 0x66
 8009b80:	4b17      	ldr	r3, [pc, #92]	; (8009be0 <_Balloc+0x78>)
 8009b82:	4818      	ldr	r0, [pc, #96]	; (8009be4 <_Balloc+0x7c>)
 8009b84:	f001 f99a 	bl	800aebc <__assert_func>
 8009b88:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009b8c:	6006      	str	r6, [r0, #0]
 8009b8e:	60c6      	str	r6, [r0, #12]
 8009b90:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8009b92:	68f3      	ldr	r3, [r6, #12]
 8009b94:	b183      	cbz	r3, 8009bb8 <_Balloc+0x50>
 8009b96:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009b98:	68db      	ldr	r3, [r3, #12]
 8009b9a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8009b9e:	b9b8      	cbnz	r0, 8009bd0 <_Balloc+0x68>
 8009ba0:	2101      	movs	r1, #1
 8009ba2:	fa01 f605 	lsl.w	r6, r1, r5
 8009ba6:	1d72      	adds	r2, r6, #5
 8009ba8:	4620      	mov	r0, r4
 8009baa:	0092      	lsls	r2, r2, #2
 8009bac:	f000 fc94 	bl	800a4d8 <_calloc_r>
 8009bb0:	b160      	cbz	r0, 8009bcc <_Balloc+0x64>
 8009bb2:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8009bb6:	e00e      	b.n	8009bd6 <_Balloc+0x6e>
 8009bb8:	2221      	movs	r2, #33	; 0x21
 8009bba:	2104      	movs	r1, #4
 8009bbc:	4620      	mov	r0, r4
 8009bbe:	f000 fc8b 	bl	800a4d8 <_calloc_r>
 8009bc2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009bc4:	60f0      	str	r0, [r6, #12]
 8009bc6:	68db      	ldr	r3, [r3, #12]
 8009bc8:	2b00      	cmp	r3, #0
 8009bca:	d1e4      	bne.n	8009b96 <_Balloc+0x2e>
 8009bcc:	2000      	movs	r0, #0
 8009bce:	bd70      	pop	{r4, r5, r6, pc}
 8009bd0:	6802      	ldr	r2, [r0, #0]
 8009bd2:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8009bd6:	2300      	movs	r3, #0
 8009bd8:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8009bdc:	e7f7      	b.n	8009bce <_Balloc+0x66>
 8009bde:	bf00      	nop
 8009be0:	0800baa6 	.word	0x0800baa6
 8009be4:	0800bc08 	.word	0x0800bc08

08009be8 <_Bfree>:
 8009be8:	b570      	push	{r4, r5, r6, lr}
 8009bea:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8009bec:	4605      	mov	r5, r0
 8009bee:	460c      	mov	r4, r1
 8009bf0:	b976      	cbnz	r6, 8009c10 <_Bfree+0x28>
 8009bf2:	2010      	movs	r0, #16
 8009bf4:	f7ff ff82 	bl	8009afc <malloc>
 8009bf8:	4602      	mov	r2, r0
 8009bfa:	6268      	str	r0, [r5, #36]	; 0x24
 8009bfc:	b920      	cbnz	r0, 8009c08 <_Bfree+0x20>
 8009bfe:	218a      	movs	r1, #138	; 0x8a
 8009c00:	4b08      	ldr	r3, [pc, #32]	; (8009c24 <_Bfree+0x3c>)
 8009c02:	4809      	ldr	r0, [pc, #36]	; (8009c28 <_Bfree+0x40>)
 8009c04:	f001 f95a 	bl	800aebc <__assert_func>
 8009c08:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009c0c:	6006      	str	r6, [r0, #0]
 8009c0e:	60c6      	str	r6, [r0, #12]
 8009c10:	b13c      	cbz	r4, 8009c22 <_Bfree+0x3a>
 8009c12:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8009c14:	6862      	ldr	r2, [r4, #4]
 8009c16:	68db      	ldr	r3, [r3, #12]
 8009c18:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8009c1c:	6021      	str	r1, [r4, #0]
 8009c1e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8009c22:	bd70      	pop	{r4, r5, r6, pc}
 8009c24:	0800baa6 	.word	0x0800baa6
 8009c28:	0800bc08 	.word	0x0800bc08

08009c2c <__multadd>:
 8009c2c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009c30:	4607      	mov	r7, r0
 8009c32:	460c      	mov	r4, r1
 8009c34:	461e      	mov	r6, r3
 8009c36:	2000      	movs	r0, #0
 8009c38:	690d      	ldr	r5, [r1, #16]
 8009c3a:	f101 0c14 	add.w	ip, r1, #20
 8009c3e:	f8dc 3000 	ldr.w	r3, [ip]
 8009c42:	3001      	adds	r0, #1
 8009c44:	b299      	uxth	r1, r3
 8009c46:	fb02 6101 	mla	r1, r2, r1, r6
 8009c4a:	0c1e      	lsrs	r6, r3, #16
 8009c4c:	0c0b      	lsrs	r3, r1, #16
 8009c4e:	fb02 3306 	mla	r3, r2, r6, r3
 8009c52:	b289      	uxth	r1, r1
 8009c54:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8009c58:	4285      	cmp	r5, r0
 8009c5a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8009c5e:	f84c 1b04 	str.w	r1, [ip], #4
 8009c62:	dcec      	bgt.n	8009c3e <__multadd+0x12>
 8009c64:	b30e      	cbz	r6, 8009caa <__multadd+0x7e>
 8009c66:	68a3      	ldr	r3, [r4, #8]
 8009c68:	42ab      	cmp	r3, r5
 8009c6a:	dc19      	bgt.n	8009ca0 <__multadd+0x74>
 8009c6c:	6861      	ldr	r1, [r4, #4]
 8009c6e:	4638      	mov	r0, r7
 8009c70:	3101      	adds	r1, #1
 8009c72:	f7ff ff79 	bl	8009b68 <_Balloc>
 8009c76:	4680      	mov	r8, r0
 8009c78:	b928      	cbnz	r0, 8009c86 <__multadd+0x5a>
 8009c7a:	4602      	mov	r2, r0
 8009c7c:	21b5      	movs	r1, #181	; 0xb5
 8009c7e:	4b0c      	ldr	r3, [pc, #48]	; (8009cb0 <__multadd+0x84>)
 8009c80:	480c      	ldr	r0, [pc, #48]	; (8009cb4 <__multadd+0x88>)
 8009c82:	f001 f91b 	bl	800aebc <__assert_func>
 8009c86:	6922      	ldr	r2, [r4, #16]
 8009c88:	f104 010c 	add.w	r1, r4, #12
 8009c8c:	3202      	adds	r2, #2
 8009c8e:	0092      	lsls	r2, r2, #2
 8009c90:	300c      	adds	r0, #12
 8009c92:	f7ff ff5b 	bl	8009b4c <memcpy>
 8009c96:	4621      	mov	r1, r4
 8009c98:	4638      	mov	r0, r7
 8009c9a:	f7ff ffa5 	bl	8009be8 <_Bfree>
 8009c9e:	4644      	mov	r4, r8
 8009ca0:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8009ca4:	3501      	adds	r5, #1
 8009ca6:	615e      	str	r6, [r3, #20]
 8009ca8:	6125      	str	r5, [r4, #16]
 8009caa:	4620      	mov	r0, r4
 8009cac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009cb0:	0800bb18 	.word	0x0800bb18
 8009cb4:	0800bc08 	.word	0x0800bc08

08009cb8 <__s2b>:
 8009cb8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009cbc:	4615      	mov	r5, r2
 8009cbe:	2209      	movs	r2, #9
 8009cc0:	461f      	mov	r7, r3
 8009cc2:	3308      	adds	r3, #8
 8009cc4:	460c      	mov	r4, r1
 8009cc6:	fb93 f3f2 	sdiv	r3, r3, r2
 8009cca:	4606      	mov	r6, r0
 8009ccc:	2201      	movs	r2, #1
 8009cce:	2100      	movs	r1, #0
 8009cd0:	429a      	cmp	r2, r3
 8009cd2:	db09      	blt.n	8009ce8 <__s2b+0x30>
 8009cd4:	4630      	mov	r0, r6
 8009cd6:	f7ff ff47 	bl	8009b68 <_Balloc>
 8009cda:	b940      	cbnz	r0, 8009cee <__s2b+0x36>
 8009cdc:	4602      	mov	r2, r0
 8009cde:	21ce      	movs	r1, #206	; 0xce
 8009ce0:	4b18      	ldr	r3, [pc, #96]	; (8009d44 <__s2b+0x8c>)
 8009ce2:	4819      	ldr	r0, [pc, #100]	; (8009d48 <__s2b+0x90>)
 8009ce4:	f001 f8ea 	bl	800aebc <__assert_func>
 8009ce8:	0052      	lsls	r2, r2, #1
 8009cea:	3101      	adds	r1, #1
 8009cec:	e7f0      	b.n	8009cd0 <__s2b+0x18>
 8009cee:	9b08      	ldr	r3, [sp, #32]
 8009cf0:	2d09      	cmp	r5, #9
 8009cf2:	6143      	str	r3, [r0, #20]
 8009cf4:	f04f 0301 	mov.w	r3, #1
 8009cf8:	6103      	str	r3, [r0, #16]
 8009cfa:	dd16      	ble.n	8009d2a <__s2b+0x72>
 8009cfc:	f104 0909 	add.w	r9, r4, #9
 8009d00:	46c8      	mov	r8, r9
 8009d02:	442c      	add	r4, r5
 8009d04:	f818 3b01 	ldrb.w	r3, [r8], #1
 8009d08:	4601      	mov	r1, r0
 8009d0a:	220a      	movs	r2, #10
 8009d0c:	4630      	mov	r0, r6
 8009d0e:	3b30      	subs	r3, #48	; 0x30
 8009d10:	f7ff ff8c 	bl	8009c2c <__multadd>
 8009d14:	45a0      	cmp	r8, r4
 8009d16:	d1f5      	bne.n	8009d04 <__s2b+0x4c>
 8009d18:	f1a5 0408 	sub.w	r4, r5, #8
 8009d1c:	444c      	add	r4, r9
 8009d1e:	1b2d      	subs	r5, r5, r4
 8009d20:	1963      	adds	r3, r4, r5
 8009d22:	42bb      	cmp	r3, r7
 8009d24:	db04      	blt.n	8009d30 <__s2b+0x78>
 8009d26:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009d2a:	2509      	movs	r5, #9
 8009d2c:	340a      	adds	r4, #10
 8009d2e:	e7f6      	b.n	8009d1e <__s2b+0x66>
 8009d30:	f814 3b01 	ldrb.w	r3, [r4], #1
 8009d34:	4601      	mov	r1, r0
 8009d36:	220a      	movs	r2, #10
 8009d38:	4630      	mov	r0, r6
 8009d3a:	3b30      	subs	r3, #48	; 0x30
 8009d3c:	f7ff ff76 	bl	8009c2c <__multadd>
 8009d40:	e7ee      	b.n	8009d20 <__s2b+0x68>
 8009d42:	bf00      	nop
 8009d44:	0800bb18 	.word	0x0800bb18
 8009d48:	0800bc08 	.word	0x0800bc08

08009d4c <__hi0bits>:
 8009d4c:	0c02      	lsrs	r2, r0, #16
 8009d4e:	0412      	lsls	r2, r2, #16
 8009d50:	4603      	mov	r3, r0
 8009d52:	b9ca      	cbnz	r2, 8009d88 <__hi0bits+0x3c>
 8009d54:	0403      	lsls	r3, r0, #16
 8009d56:	2010      	movs	r0, #16
 8009d58:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8009d5c:	bf04      	itt	eq
 8009d5e:	021b      	lsleq	r3, r3, #8
 8009d60:	3008      	addeq	r0, #8
 8009d62:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8009d66:	bf04      	itt	eq
 8009d68:	011b      	lsleq	r3, r3, #4
 8009d6a:	3004      	addeq	r0, #4
 8009d6c:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8009d70:	bf04      	itt	eq
 8009d72:	009b      	lsleq	r3, r3, #2
 8009d74:	3002      	addeq	r0, #2
 8009d76:	2b00      	cmp	r3, #0
 8009d78:	db05      	blt.n	8009d86 <__hi0bits+0x3a>
 8009d7a:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 8009d7e:	f100 0001 	add.w	r0, r0, #1
 8009d82:	bf08      	it	eq
 8009d84:	2020      	moveq	r0, #32
 8009d86:	4770      	bx	lr
 8009d88:	2000      	movs	r0, #0
 8009d8a:	e7e5      	b.n	8009d58 <__hi0bits+0xc>

08009d8c <__lo0bits>:
 8009d8c:	6803      	ldr	r3, [r0, #0]
 8009d8e:	4602      	mov	r2, r0
 8009d90:	f013 0007 	ands.w	r0, r3, #7
 8009d94:	d00b      	beq.n	8009dae <__lo0bits+0x22>
 8009d96:	07d9      	lsls	r1, r3, #31
 8009d98:	d421      	bmi.n	8009dde <__lo0bits+0x52>
 8009d9a:	0798      	lsls	r0, r3, #30
 8009d9c:	bf49      	itett	mi
 8009d9e:	085b      	lsrmi	r3, r3, #1
 8009da0:	089b      	lsrpl	r3, r3, #2
 8009da2:	2001      	movmi	r0, #1
 8009da4:	6013      	strmi	r3, [r2, #0]
 8009da6:	bf5c      	itt	pl
 8009da8:	2002      	movpl	r0, #2
 8009daa:	6013      	strpl	r3, [r2, #0]
 8009dac:	4770      	bx	lr
 8009dae:	b299      	uxth	r1, r3
 8009db0:	b909      	cbnz	r1, 8009db6 <__lo0bits+0x2a>
 8009db2:	2010      	movs	r0, #16
 8009db4:	0c1b      	lsrs	r3, r3, #16
 8009db6:	b2d9      	uxtb	r1, r3
 8009db8:	b909      	cbnz	r1, 8009dbe <__lo0bits+0x32>
 8009dba:	3008      	adds	r0, #8
 8009dbc:	0a1b      	lsrs	r3, r3, #8
 8009dbe:	0719      	lsls	r1, r3, #28
 8009dc0:	bf04      	itt	eq
 8009dc2:	091b      	lsreq	r3, r3, #4
 8009dc4:	3004      	addeq	r0, #4
 8009dc6:	0799      	lsls	r1, r3, #30
 8009dc8:	bf04      	itt	eq
 8009dca:	089b      	lsreq	r3, r3, #2
 8009dcc:	3002      	addeq	r0, #2
 8009dce:	07d9      	lsls	r1, r3, #31
 8009dd0:	d403      	bmi.n	8009dda <__lo0bits+0x4e>
 8009dd2:	085b      	lsrs	r3, r3, #1
 8009dd4:	f100 0001 	add.w	r0, r0, #1
 8009dd8:	d003      	beq.n	8009de2 <__lo0bits+0x56>
 8009dda:	6013      	str	r3, [r2, #0]
 8009ddc:	4770      	bx	lr
 8009dde:	2000      	movs	r0, #0
 8009de0:	4770      	bx	lr
 8009de2:	2020      	movs	r0, #32
 8009de4:	4770      	bx	lr
	...

08009de8 <__i2b>:
 8009de8:	b510      	push	{r4, lr}
 8009dea:	460c      	mov	r4, r1
 8009dec:	2101      	movs	r1, #1
 8009dee:	f7ff febb 	bl	8009b68 <_Balloc>
 8009df2:	4602      	mov	r2, r0
 8009df4:	b928      	cbnz	r0, 8009e02 <__i2b+0x1a>
 8009df6:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8009dfa:	4b04      	ldr	r3, [pc, #16]	; (8009e0c <__i2b+0x24>)
 8009dfc:	4804      	ldr	r0, [pc, #16]	; (8009e10 <__i2b+0x28>)
 8009dfe:	f001 f85d 	bl	800aebc <__assert_func>
 8009e02:	2301      	movs	r3, #1
 8009e04:	6144      	str	r4, [r0, #20]
 8009e06:	6103      	str	r3, [r0, #16]
 8009e08:	bd10      	pop	{r4, pc}
 8009e0a:	bf00      	nop
 8009e0c:	0800bb18 	.word	0x0800bb18
 8009e10:	0800bc08 	.word	0x0800bc08

08009e14 <__multiply>:
 8009e14:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009e18:	4691      	mov	r9, r2
 8009e1a:	690a      	ldr	r2, [r1, #16]
 8009e1c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8009e20:	460c      	mov	r4, r1
 8009e22:	429a      	cmp	r2, r3
 8009e24:	bfbe      	ittt	lt
 8009e26:	460b      	movlt	r3, r1
 8009e28:	464c      	movlt	r4, r9
 8009e2a:	4699      	movlt	r9, r3
 8009e2c:	6927      	ldr	r7, [r4, #16]
 8009e2e:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8009e32:	68a3      	ldr	r3, [r4, #8]
 8009e34:	6861      	ldr	r1, [r4, #4]
 8009e36:	eb07 060a 	add.w	r6, r7, sl
 8009e3a:	42b3      	cmp	r3, r6
 8009e3c:	b085      	sub	sp, #20
 8009e3e:	bfb8      	it	lt
 8009e40:	3101      	addlt	r1, #1
 8009e42:	f7ff fe91 	bl	8009b68 <_Balloc>
 8009e46:	b930      	cbnz	r0, 8009e56 <__multiply+0x42>
 8009e48:	4602      	mov	r2, r0
 8009e4a:	f240 115d 	movw	r1, #349	; 0x15d
 8009e4e:	4b43      	ldr	r3, [pc, #268]	; (8009f5c <__multiply+0x148>)
 8009e50:	4843      	ldr	r0, [pc, #268]	; (8009f60 <__multiply+0x14c>)
 8009e52:	f001 f833 	bl	800aebc <__assert_func>
 8009e56:	f100 0514 	add.w	r5, r0, #20
 8009e5a:	462b      	mov	r3, r5
 8009e5c:	2200      	movs	r2, #0
 8009e5e:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8009e62:	4543      	cmp	r3, r8
 8009e64:	d321      	bcc.n	8009eaa <__multiply+0x96>
 8009e66:	f104 0314 	add.w	r3, r4, #20
 8009e6a:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8009e6e:	f109 0314 	add.w	r3, r9, #20
 8009e72:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8009e76:	9202      	str	r2, [sp, #8]
 8009e78:	1b3a      	subs	r2, r7, r4
 8009e7a:	3a15      	subs	r2, #21
 8009e7c:	f022 0203 	bic.w	r2, r2, #3
 8009e80:	3204      	adds	r2, #4
 8009e82:	f104 0115 	add.w	r1, r4, #21
 8009e86:	428f      	cmp	r7, r1
 8009e88:	bf38      	it	cc
 8009e8a:	2204      	movcc	r2, #4
 8009e8c:	9201      	str	r2, [sp, #4]
 8009e8e:	9a02      	ldr	r2, [sp, #8]
 8009e90:	9303      	str	r3, [sp, #12]
 8009e92:	429a      	cmp	r2, r3
 8009e94:	d80c      	bhi.n	8009eb0 <__multiply+0x9c>
 8009e96:	2e00      	cmp	r6, #0
 8009e98:	dd03      	ble.n	8009ea2 <__multiply+0x8e>
 8009e9a:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8009e9e:	2b00      	cmp	r3, #0
 8009ea0:	d059      	beq.n	8009f56 <__multiply+0x142>
 8009ea2:	6106      	str	r6, [r0, #16]
 8009ea4:	b005      	add	sp, #20
 8009ea6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009eaa:	f843 2b04 	str.w	r2, [r3], #4
 8009eae:	e7d8      	b.n	8009e62 <__multiply+0x4e>
 8009eb0:	f8b3 a000 	ldrh.w	sl, [r3]
 8009eb4:	f1ba 0f00 	cmp.w	sl, #0
 8009eb8:	d023      	beq.n	8009f02 <__multiply+0xee>
 8009eba:	46a9      	mov	r9, r5
 8009ebc:	f04f 0c00 	mov.w	ip, #0
 8009ec0:	f104 0e14 	add.w	lr, r4, #20
 8009ec4:	f85e 2b04 	ldr.w	r2, [lr], #4
 8009ec8:	f8d9 1000 	ldr.w	r1, [r9]
 8009ecc:	fa1f fb82 	uxth.w	fp, r2
 8009ed0:	b289      	uxth	r1, r1
 8009ed2:	fb0a 110b 	mla	r1, sl, fp, r1
 8009ed6:	4461      	add	r1, ip
 8009ed8:	f8d9 c000 	ldr.w	ip, [r9]
 8009edc:	0c12      	lsrs	r2, r2, #16
 8009ede:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 8009ee2:	fb0a c202 	mla	r2, sl, r2, ip
 8009ee6:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8009eea:	b289      	uxth	r1, r1
 8009eec:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8009ef0:	4577      	cmp	r7, lr
 8009ef2:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8009ef6:	f849 1b04 	str.w	r1, [r9], #4
 8009efa:	d8e3      	bhi.n	8009ec4 <__multiply+0xb0>
 8009efc:	9a01      	ldr	r2, [sp, #4]
 8009efe:	f845 c002 	str.w	ip, [r5, r2]
 8009f02:	9a03      	ldr	r2, [sp, #12]
 8009f04:	3304      	adds	r3, #4
 8009f06:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8009f0a:	f1b9 0f00 	cmp.w	r9, #0
 8009f0e:	d020      	beq.n	8009f52 <__multiply+0x13e>
 8009f10:	46ae      	mov	lr, r5
 8009f12:	f04f 0a00 	mov.w	sl, #0
 8009f16:	6829      	ldr	r1, [r5, #0]
 8009f18:	f104 0c14 	add.w	ip, r4, #20
 8009f1c:	f8bc b000 	ldrh.w	fp, [ip]
 8009f20:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8009f24:	b289      	uxth	r1, r1
 8009f26:	fb09 220b 	mla	r2, r9, fp, r2
 8009f2a:	4492      	add	sl, r2
 8009f2c:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8009f30:	f84e 1b04 	str.w	r1, [lr], #4
 8009f34:	f85c 2b04 	ldr.w	r2, [ip], #4
 8009f38:	f8be 1000 	ldrh.w	r1, [lr]
 8009f3c:	0c12      	lsrs	r2, r2, #16
 8009f3e:	fb09 1102 	mla	r1, r9, r2, r1
 8009f42:	4567      	cmp	r7, ip
 8009f44:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8009f48:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8009f4c:	d8e6      	bhi.n	8009f1c <__multiply+0x108>
 8009f4e:	9a01      	ldr	r2, [sp, #4]
 8009f50:	50a9      	str	r1, [r5, r2]
 8009f52:	3504      	adds	r5, #4
 8009f54:	e79b      	b.n	8009e8e <__multiply+0x7a>
 8009f56:	3e01      	subs	r6, #1
 8009f58:	e79d      	b.n	8009e96 <__multiply+0x82>
 8009f5a:	bf00      	nop
 8009f5c:	0800bb18 	.word	0x0800bb18
 8009f60:	0800bc08 	.word	0x0800bc08

08009f64 <__pow5mult>:
 8009f64:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009f68:	4615      	mov	r5, r2
 8009f6a:	f012 0203 	ands.w	r2, r2, #3
 8009f6e:	4606      	mov	r6, r0
 8009f70:	460f      	mov	r7, r1
 8009f72:	d007      	beq.n	8009f84 <__pow5mult+0x20>
 8009f74:	4c25      	ldr	r4, [pc, #148]	; (800a00c <__pow5mult+0xa8>)
 8009f76:	3a01      	subs	r2, #1
 8009f78:	2300      	movs	r3, #0
 8009f7a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8009f7e:	f7ff fe55 	bl	8009c2c <__multadd>
 8009f82:	4607      	mov	r7, r0
 8009f84:	10ad      	asrs	r5, r5, #2
 8009f86:	d03d      	beq.n	800a004 <__pow5mult+0xa0>
 8009f88:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8009f8a:	b97c      	cbnz	r4, 8009fac <__pow5mult+0x48>
 8009f8c:	2010      	movs	r0, #16
 8009f8e:	f7ff fdb5 	bl	8009afc <malloc>
 8009f92:	4602      	mov	r2, r0
 8009f94:	6270      	str	r0, [r6, #36]	; 0x24
 8009f96:	b928      	cbnz	r0, 8009fa4 <__pow5mult+0x40>
 8009f98:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8009f9c:	4b1c      	ldr	r3, [pc, #112]	; (800a010 <__pow5mult+0xac>)
 8009f9e:	481d      	ldr	r0, [pc, #116]	; (800a014 <__pow5mult+0xb0>)
 8009fa0:	f000 ff8c 	bl	800aebc <__assert_func>
 8009fa4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8009fa8:	6004      	str	r4, [r0, #0]
 8009faa:	60c4      	str	r4, [r0, #12]
 8009fac:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8009fb0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8009fb4:	b94c      	cbnz	r4, 8009fca <__pow5mult+0x66>
 8009fb6:	f240 2171 	movw	r1, #625	; 0x271
 8009fba:	4630      	mov	r0, r6
 8009fbc:	f7ff ff14 	bl	8009de8 <__i2b>
 8009fc0:	2300      	movs	r3, #0
 8009fc2:	4604      	mov	r4, r0
 8009fc4:	f8c8 0008 	str.w	r0, [r8, #8]
 8009fc8:	6003      	str	r3, [r0, #0]
 8009fca:	f04f 0900 	mov.w	r9, #0
 8009fce:	07eb      	lsls	r3, r5, #31
 8009fd0:	d50a      	bpl.n	8009fe8 <__pow5mult+0x84>
 8009fd2:	4639      	mov	r1, r7
 8009fd4:	4622      	mov	r2, r4
 8009fd6:	4630      	mov	r0, r6
 8009fd8:	f7ff ff1c 	bl	8009e14 <__multiply>
 8009fdc:	4680      	mov	r8, r0
 8009fde:	4639      	mov	r1, r7
 8009fe0:	4630      	mov	r0, r6
 8009fe2:	f7ff fe01 	bl	8009be8 <_Bfree>
 8009fe6:	4647      	mov	r7, r8
 8009fe8:	106d      	asrs	r5, r5, #1
 8009fea:	d00b      	beq.n	800a004 <__pow5mult+0xa0>
 8009fec:	6820      	ldr	r0, [r4, #0]
 8009fee:	b938      	cbnz	r0, 800a000 <__pow5mult+0x9c>
 8009ff0:	4622      	mov	r2, r4
 8009ff2:	4621      	mov	r1, r4
 8009ff4:	4630      	mov	r0, r6
 8009ff6:	f7ff ff0d 	bl	8009e14 <__multiply>
 8009ffa:	6020      	str	r0, [r4, #0]
 8009ffc:	f8c0 9000 	str.w	r9, [r0]
 800a000:	4604      	mov	r4, r0
 800a002:	e7e4      	b.n	8009fce <__pow5mult+0x6a>
 800a004:	4638      	mov	r0, r7
 800a006:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a00a:	bf00      	nop
 800a00c:	0800bd58 	.word	0x0800bd58
 800a010:	0800baa6 	.word	0x0800baa6
 800a014:	0800bc08 	.word	0x0800bc08

0800a018 <__lshift>:
 800a018:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a01c:	460c      	mov	r4, r1
 800a01e:	4607      	mov	r7, r0
 800a020:	4691      	mov	r9, r2
 800a022:	6923      	ldr	r3, [r4, #16]
 800a024:	6849      	ldr	r1, [r1, #4]
 800a026:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800a02a:	68a3      	ldr	r3, [r4, #8]
 800a02c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800a030:	f108 0601 	add.w	r6, r8, #1
 800a034:	42b3      	cmp	r3, r6
 800a036:	db0b      	blt.n	800a050 <__lshift+0x38>
 800a038:	4638      	mov	r0, r7
 800a03a:	f7ff fd95 	bl	8009b68 <_Balloc>
 800a03e:	4605      	mov	r5, r0
 800a040:	b948      	cbnz	r0, 800a056 <__lshift+0x3e>
 800a042:	4602      	mov	r2, r0
 800a044:	f240 11d9 	movw	r1, #473	; 0x1d9
 800a048:	4b29      	ldr	r3, [pc, #164]	; (800a0f0 <__lshift+0xd8>)
 800a04a:	482a      	ldr	r0, [pc, #168]	; (800a0f4 <__lshift+0xdc>)
 800a04c:	f000 ff36 	bl	800aebc <__assert_func>
 800a050:	3101      	adds	r1, #1
 800a052:	005b      	lsls	r3, r3, #1
 800a054:	e7ee      	b.n	800a034 <__lshift+0x1c>
 800a056:	2300      	movs	r3, #0
 800a058:	f100 0114 	add.w	r1, r0, #20
 800a05c:	f100 0210 	add.w	r2, r0, #16
 800a060:	4618      	mov	r0, r3
 800a062:	4553      	cmp	r3, sl
 800a064:	db37      	blt.n	800a0d6 <__lshift+0xbe>
 800a066:	6920      	ldr	r0, [r4, #16]
 800a068:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800a06c:	f104 0314 	add.w	r3, r4, #20
 800a070:	f019 091f 	ands.w	r9, r9, #31
 800a074:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800a078:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800a07c:	d02f      	beq.n	800a0de <__lshift+0xc6>
 800a07e:	468a      	mov	sl, r1
 800a080:	f04f 0c00 	mov.w	ip, #0
 800a084:	f1c9 0e20 	rsb	lr, r9, #32
 800a088:	681a      	ldr	r2, [r3, #0]
 800a08a:	fa02 f209 	lsl.w	r2, r2, r9
 800a08e:	ea42 020c 	orr.w	r2, r2, ip
 800a092:	f84a 2b04 	str.w	r2, [sl], #4
 800a096:	f853 2b04 	ldr.w	r2, [r3], #4
 800a09a:	4298      	cmp	r0, r3
 800a09c:	fa22 fc0e 	lsr.w	ip, r2, lr
 800a0a0:	d8f2      	bhi.n	800a088 <__lshift+0x70>
 800a0a2:	1b03      	subs	r3, r0, r4
 800a0a4:	3b15      	subs	r3, #21
 800a0a6:	f023 0303 	bic.w	r3, r3, #3
 800a0aa:	3304      	adds	r3, #4
 800a0ac:	f104 0215 	add.w	r2, r4, #21
 800a0b0:	4290      	cmp	r0, r2
 800a0b2:	bf38      	it	cc
 800a0b4:	2304      	movcc	r3, #4
 800a0b6:	f841 c003 	str.w	ip, [r1, r3]
 800a0ba:	f1bc 0f00 	cmp.w	ip, #0
 800a0be:	d001      	beq.n	800a0c4 <__lshift+0xac>
 800a0c0:	f108 0602 	add.w	r6, r8, #2
 800a0c4:	3e01      	subs	r6, #1
 800a0c6:	4638      	mov	r0, r7
 800a0c8:	4621      	mov	r1, r4
 800a0ca:	612e      	str	r6, [r5, #16]
 800a0cc:	f7ff fd8c 	bl	8009be8 <_Bfree>
 800a0d0:	4628      	mov	r0, r5
 800a0d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a0d6:	f842 0f04 	str.w	r0, [r2, #4]!
 800a0da:	3301      	adds	r3, #1
 800a0dc:	e7c1      	b.n	800a062 <__lshift+0x4a>
 800a0de:	3904      	subs	r1, #4
 800a0e0:	f853 2b04 	ldr.w	r2, [r3], #4
 800a0e4:	4298      	cmp	r0, r3
 800a0e6:	f841 2f04 	str.w	r2, [r1, #4]!
 800a0ea:	d8f9      	bhi.n	800a0e0 <__lshift+0xc8>
 800a0ec:	e7ea      	b.n	800a0c4 <__lshift+0xac>
 800a0ee:	bf00      	nop
 800a0f0:	0800bb18 	.word	0x0800bb18
 800a0f4:	0800bc08 	.word	0x0800bc08

0800a0f8 <__mcmp>:
 800a0f8:	4603      	mov	r3, r0
 800a0fa:	690a      	ldr	r2, [r1, #16]
 800a0fc:	6900      	ldr	r0, [r0, #16]
 800a0fe:	b530      	push	{r4, r5, lr}
 800a100:	1a80      	subs	r0, r0, r2
 800a102:	d10d      	bne.n	800a120 <__mcmp+0x28>
 800a104:	3314      	adds	r3, #20
 800a106:	3114      	adds	r1, #20
 800a108:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800a10c:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800a110:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800a114:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800a118:	4295      	cmp	r5, r2
 800a11a:	d002      	beq.n	800a122 <__mcmp+0x2a>
 800a11c:	d304      	bcc.n	800a128 <__mcmp+0x30>
 800a11e:	2001      	movs	r0, #1
 800a120:	bd30      	pop	{r4, r5, pc}
 800a122:	42a3      	cmp	r3, r4
 800a124:	d3f4      	bcc.n	800a110 <__mcmp+0x18>
 800a126:	e7fb      	b.n	800a120 <__mcmp+0x28>
 800a128:	f04f 30ff 	mov.w	r0, #4294967295
 800a12c:	e7f8      	b.n	800a120 <__mcmp+0x28>
	...

0800a130 <__mdiff>:
 800a130:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a134:	460d      	mov	r5, r1
 800a136:	4607      	mov	r7, r0
 800a138:	4611      	mov	r1, r2
 800a13a:	4628      	mov	r0, r5
 800a13c:	4614      	mov	r4, r2
 800a13e:	f7ff ffdb 	bl	800a0f8 <__mcmp>
 800a142:	1e06      	subs	r6, r0, #0
 800a144:	d111      	bne.n	800a16a <__mdiff+0x3a>
 800a146:	4631      	mov	r1, r6
 800a148:	4638      	mov	r0, r7
 800a14a:	f7ff fd0d 	bl	8009b68 <_Balloc>
 800a14e:	4602      	mov	r2, r0
 800a150:	b928      	cbnz	r0, 800a15e <__mdiff+0x2e>
 800a152:	f240 2132 	movw	r1, #562	; 0x232
 800a156:	4b3a      	ldr	r3, [pc, #232]	; (800a240 <__mdiff+0x110>)
 800a158:	483a      	ldr	r0, [pc, #232]	; (800a244 <__mdiff+0x114>)
 800a15a:	f000 feaf 	bl	800aebc <__assert_func>
 800a15e:	2301      	movs	r3, #1
 800a160:	e9c0 3604 	strd	r3, r6, [r0, #16]
 800a164:	4610      	mov	r0, r2
 800a166:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a16a:	bfa4      	itt	ge
 800a16c:	4623      	movge	r3, r4
 800a16e:	462c      	movge	r4, r5
 800a170:	4638      	mov	r0, r7
 800a172:	6861      	ldr	r1, [r4, #4]
 800a174:	bfa6      	itte	ge
 800a176:	461d      	movge	r5, r3
 800a178:	2600      	movge	r6, #0
 800a17a:	2601      	movlt	r6, #1
 800a17c:	f7ff fcf4 	bl	8009b68 <_Balloc>
 800a180:	4602      	mov	r2, r0
 800a182:	b918      	cbnz	r0, 800a18c <__mdiff+0x5c>
 800a184:	f44f 7110 	mov.w	r1, #576	; 0x240
 800a188:	4b2d      	ldr	r3, [pc, #180]	; (800a240 <__mdiff+0x110>)
 800a18a:	e7e5      	b.n	800a158 <__mdiff+0x28>
 800a18c:	f102 0814 	add.w	r8, r2, #20
 800a190:	46c2      	mov	sl, r8
 800a192:	f04f 0c00 	mov.w	ip, #0
 800a196:	6927      	ldr	r7, [r4, #16]
 800a198:	60c6      	str	r6, [r0, #12]
 800a19a:	692e      	ldr	r6, [r5, #16]
 800a19c:	f104 0014 	add.w	r0, r4, #20
 800a1a0:	f105 0914 	add.w	r9, r5, #20
 800a1a4:	eb00 0e87 	add.w	lr, r0, r7, lsl #2
 800a1a8:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800a1ac:	3410      	adds	r4, #16
 800a1ae:	f854 bf04 	ldr.w	fp, [r4, #4]!
 800a1b2:	f859 3b04 	ldr.w	r3, [r9], #4
 800a1b6:	fa1f f18b 	uxth.w	r1, fp
 800a1ba:	448c      	add	ip, r1
 800a1bc:	b299      	uxth	r1, r3
 800a1be:	0c1b      	lsrs	r3, r3, #16
 800a1c0:	ebac 0101 	sub.w	r1, ip, r1
 800a1c4:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800a1c8:	eb03 4321 	add.w	r3, r3, r1, asr #16
 800a1cc:	b289      	uxth	r1, r1
 800a1ce:	ea4f 4c23 	mov.w	ip, r3, asr #16
 800a1d2:	454e      	cmp	r6, r9
 800a1d4:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800a1d8:	f84a 3b04 	str.w	r3, [sl], #4
 800a1dc:	d8e7      	bhi.n	800a1ae <__mdiff+0x7e>
 800a1de:	1b73      	subs	r3, r6, r5
 800a1e0:	3b15      	subs	r3, #21
 800a1e2:	f023 0303 	bic.w	r3, r3, #3
 800a1e6:	3515      	adds	r5, #21
 800a1e8:	3304      	adds	r3, #4
 800a1ea:	42ae      	cmp	r6, r5
 800a1ec:	bf38      	it	cc
 800a1ee:	2304      	movcc	r3, #4
 800a1f0:	4418      	add	r0, r3
 800a1f2:	4443      	add	r3, r8
 800a1f4:	461e      	mov	r6, r3
 800a1f6:	4605      	mov	r5, r0
 800a1f8:	4575      	cmp	r5, lr
 800a1fa:	d30e      	bcc.n	800a21a <__mdiff+0xea>
 800a1fc:	f10e 0103 	add.w	r1, lr, #3
 800a200:	1a09      	subs	r1, r1, r0
 800a202:	f021 0103 	bic.w	r1, r1, #3
 800a206:	3803      	subs	r0, #3
 800a208:	4586      	cmp	lr, r0
 800a20a:	bf38      	it	cc
 800a20c:	2100      	movcc	r1, #0
 800a20e:	4419      	add	r1, r3
 800a210:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 800a214:	b18b      	cbz	r3, 800a23a <__mdiff+0x10a>
 800a216:	6117      	str	r7, [r2, #16]
 800a218:	e7a4      	b.n	800a164 <__mdiff+0x34>
 800a21a:	f855 8b04 	ldr.w	r8, [r5], #4
 800a21e:	fa1f f188 	uxth.w	r1, r8
 800a222:	4461      	add	r1, ip
 800a224:	140c      	asrs	r4, r1, #16
 800a226:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800a22a:	b289      	uxth	r1, r1
 800a22c:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 800a230:	ea4f 4c24 	mov.w	ip, r4, asr #16
 800a234:	f846 1b04 	str.w	r1, [r6], #4
 800a238:	e7de      	b.n	800a1f8 <__mdiff+0xc8>
 800a23a:	3f01      	subs	r7, #1
 800a23c:	e7e8      	b.n	800a210 <__mdiff+0xe0>
 800a23e:	bf00      	nop
 800a240:	0800bb18 	.word	0x0800bb18
 800a244:	0800bc08 	.word	0x0800bc08

0800a248 <__ulp>:
 800a248:	4b11      	ldr	r3, [pc, #68]	; (800a290 <__ulp+0x48>)
 800a24a:	400b      	ands	r3, r1
 800a24c:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 800a250:	2b00      	cmp	r3, #0
 800a252:	dd02      	ble.n	800a25a <__ulp+0x12>
 800a254:	2000      	movs	r0, #0
 800a256:	4619      	mov	r1, r3
 800a258:	4770      	bx	lr
 800a25a:	425b      	negs	r3, r3
 800a25c:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 800a260:	f04f 0000 	mov.w	r0, #0
 800a264:	f04f 0100 	mov.w	r1, #0
 800a268:	ea4f 5223 	mov.w	r2, r3, asr #20
 800a26c:	da04      	bge.n	800a278 <__ulp+0x30>
 800a26e:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800a272:	fa43 f102 	asr.w	r1, r3, r2
 800a276:	4770      	bx	lr
 800a278:	f1a2 0314 	sub.w	r3, r2, #20
 800a27c:	2b1e      	cmp	r3, #30
 800a27e:	bfd6      	itet	le
 800a280:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 800a284:	2301      	movgt	r3, #1
 800a286:	fa22 f303 	lsrle.w	r3, r2, r3
 800a28a:	4618      	mov	r0, r3
 800a28c:	4770      	bx	lr
 800a28e:	bf00      	nop
 800a290:	7ff00000 	.word	0x7ff00000

0800a294 <__b2d>:
 800a294:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a298:	6907      	ldr	r7, [r0, #16]
 800a29a:	f100 0914 	add.w	r9, r0, #20
 800a29e:	eb09 0787 	add.w	r7, r9, r7, lsl #2
 800a2a2:	f857 6c04 	ldr.w	r6, [r7, #-4]
 800a2a6:	f1a7 0804 	sub.w	r8, r7, #4
 800a2aa:	4630      	mov	r0, r6
 800a2ac:	f7ff fd4e 	bl	8009d4c <__hi0bits>
 800a2b0:	f1c0 0320 	rsb	r3, r0, #32
 800a2b4:	280a      	cmp	r0, #10
 800a2b6:	600b      	str	r3, [r1, #0]
 800a2b8:	491f      	ldr	r1, [pc, #124]	; (800a338 <__b2d+0xa4>)
 800a2ba:	dc17      	bgt.n	800a2ec <__b2d+0x58>
 800a2bc:	45c1      	cmp	r9, r8
 800a2be:	bf28      	it	cs
 800a2c0:	2200      	movcs	r2, #0
 800a2c2:	f1c0 0c0b 	rsb	ip, r0, #11
 800a2c6:	fa26 f30c 	lsr.w	r3, r6, ip
 800a2ca:	bf38      	it	cc
 800a2cc:	f857 2c08 	ldrcc.w	r2, [r7, #-8]
 800a2d0:	ea43 0501 	orr.w	r5, r3, r1
 800a2d4:	f100 0315 	add.w	r3, r0, #21
 800a2d8:	fa06 f303 	lsl.w	r3, r6, r3
 800a2dc:	fa22 f20c 	lsr.w	r2, r2, ip
 800a2e0:	ea43 0402 	orr.w	r4, r3, r2
 800a2e4:	4620      	mov	r0, r4
 800a2e6:	4629      	mov	r1, r5
 800a2e8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a2ec:	45c1      	cmp	r9, r8
 800a2ee:	bf2e      	itee	cs
 800a2f0:	2200      	movcs	r2, #0
 800a2f2:	f857 2c08 	ldrcc.w	r2, [r7, #-8]
 800a2f6:	f1a7 0808 	subcc.w	r8, r7, #8
 800a2fa:	f1b0 030b 	subs.w	r3, r0, #11
 800a2fe:	d016      	beq.n	800a32e <__b2d+0x9a>
 800a300:	f1c3 0720 	rsb	r7, r3, #32
 800a304:	fa22 f107 	lsr.w	r1, r2, r7
 800a308:	45c8      	cmp	r8, r9
 800a30a:	fa06 f603 	lsl.w	r6, r6, r3
 800a30e:	ea46 0601 	orr.w	r6, r6, r1
 800a312:	bf94      	ite	ls
 800a314:	2100      	movls	r1, #0
 800a316:	f858 1c04 	ldrhi.w	r1, [r8, #-4]
 800a31a:	f046 557f 	orr.w	r5, r6, #1069547520	; 0x3fc00000
 800a31e:	fa02 f003 	lsl.w	r0, r2, r3
 800a322:	40f9      	lsrs	r1, r7
 800a324:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 800a328:	ea40 0401 	orr.w	r4, r0, r1
 800a32c:	e7da      	b.n	800a2e4 <__b2d+0x50>
 800a32e:	4614      	mov	r4, r2
 800a330:	ea46 0501 	orr.w	r5, r6, r1
 800a334:	e7d6      	b.n	800a2e4 <__b2d+0x50>
 800a336:	bf00      	nop
 800a338:	3ff00000 	.word	0x3ff00000

0800a33c <__d2b>:
 800a33c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 800a340:	2101      	movs	r1, #1
 800a342:	e9dd 7608 	ldrd	r7, r6, [sp, #32]
 800a346:	4690      	mov	r8, r2
 800a348:	461d      	mov	r5, r3
 800a34a:	f7ff fc0d 	bl	8009b68 <_Balloc>
 800a34e:	4604      	mov	r4, r0
 800a350:	b930      	cbnz	r0, 800a360 <__d2b+0x24>
 800a352:	4602      	mov	r2, r0
 800a354:	f240 310a 	movw	r1, #778	; 0x30a
 800a358:	4b24      	ldr	r3, [pc, #144]	; (800a3ec <__d2b+0xb0>)
 800a35a:	4825      	ldr	r0, [pc, #148]	; (800a3f0 <__d2b+0xb4>)
 800a35c:	f000 fdae 	bl	800aebc <__assert_func>
 800a360:	f3c5 0313 	ubfx	r3, r5, #0, #20
 800a364:	f3c5 550a 	ubfx	r5, r5, #20, #11
 800a368:	bb2d      	cbnz	r5, 800a3b6 <__d2b+0x7a>
 800a36a:	9301      	str	r3, [sp, #4]
 800a36c:	f1b8 0300 	subs.w	r3, r8, #0
 800a370:	d026      	beq.n	800a3c0 <__d2b+0x84>
 800a372:	4668      	mov	r0, sp
 800a374:	9300      	str	r3, [sp, #0]
 800a376:	f7ff fd09 	bl	8009d8c <__lo0bits>
 800a37a:	9900      	ldr	r1, [sp, #0]
 800a37c:	b1f0      	cbz	r0, 800a3bc <__d2b+0x80>
 800a37e:	9a01      	ldr	r2, [sp, #4]
 800a380:	f1c0 0320 	rsb	r3, r0, #32
 800a384:	fa02 f303 	lsl.w	r3, r2, r3
 800a388:	430b      	orrs	r3, r1
 800a38a:	40c2      	lsrs	r2, r0
 800a38c:	6163      	str	r3, [r4, #20]
 800a38e:	9201      	str	r2, [sp, #4]
 800a390:	9b01      	ldr	r3, [sp, #4]
 800a392:	2b00      	cmp	r3, #0
 800a394:	bf14      	ite	ne
 800a396:	2102      	movne	r1, #2
 800a398:	2101      	moveq	r1, #1
 800a39a:	61a3      	str	r3, [r4, #24]
 800a39c:	6121      	str	r1, [r4, #16]
 800a39e:	b1c5      	cbz	r5, 800a3d2 <__d2b+0x96>
 800a3a0:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800a3a4:	4405      	add	r5, r0
 800a3a6:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800a3aa:	603d      	str	r5, [r7, #0]
 800a3ac:	6030      	str	r0, [r6, #0]
 800a3ae:	4620      	mov	r0, r4
 800a3b0:	b002      	add	sp, #8
 800a3b2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a3b6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800a3ba:	e7d6      	b.n	800a36a <__d2b+0x2e>
 800a3bc:	6161      	str	r1, [r4, #20]
 800a3be:	e7e7      	b.n	800a390 <__d2b+0x54>
 800a3c0:	a801      	add	r0, sp, #4
 800a3c2:	f7ff fce3 	bl	8009d8c <__lo0bits>
 800a3c6:	2101      	movs	r1, #1
 800a3c8:	9b01      	ldr	r3, [sp, #4]
 800a3ca:	6121      	str	r1, [r4, #16]
 800a3cc:	6163      	str	r3, [r4, #20]
 800a3ce:	3020      	adds	r0, #32
 800a3d0:	e7e5      	b.n	800a39e <__d2b+0x62>
 800a3d2:	eb04 0381 	add.w	r3, r4, r1, lsl #2
 800a3d6:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800a3da:	6038      	str	r0, [r7, #0]
 800a3dc:	6918      	ldr	r0, [r3, #16]
 800a3de:	f7ff fcb5 	bl	8009d4c <__hi0bits>
 800a3e2:	ebc0 1141 	rsb	r1, r0, r1, lsl #5
 800a3e6:	6031      	str	r1, [r6, #0]
 800a3e8:	e7e1      	b.n	800a3ae <__d2b+0x72>
 800a3ea:	bf00      	nop
 800a3ec:	0800bb18 	.word	0x0800bb18
 800a3f0:	0800bc08 	.word	0x0800bc08

0800a3f4 <__ratio>:
 800a3f4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a3f8:	4688      	mov	r8, r1
 800a3fa:	4669      	mov	r1, sp
 800a3fc:	4681      	mov	r9, r0
 800a3fe:	f7ff ff49 	bl	800a294 <__b2d>
 800a402:	460f      	mov	r7, r1
 800a404:	4604      	mov	r4, r0
 800a406:	460d      	mov	r5, r1
 800a408:	4640      	mov	r0, r8
 800a40a:	a901      	add	r1, sp, #4
 800a40c:	f7ff ff42 	bl	800a294 <__b2d>
 800a410:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800a414:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800a418:	468b      	mov	fp, r1
 800a41a:	eba3 0c02 	sub.w	ip, r3, r2
 800a41e:	e9dd 3200 	ldrd	r3, r2, [sp]
 800a422:	1a9b      	subs	r3, r3, r2
 800a424:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800a428:	2b00      	cmp	r3, #0
 800a42a:	bfd5      	itete	le
 800a42c:	460a      	movle	r2, r1
 800a42e:	462a      	movgt	r2, r5
 800a430:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800a434:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800a438:	bfd8      	it	le
 800a43a:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800a43e:	465b      	mov	r3, fp
 800a440:	4602      	mov	r2, r0
 800a442:	4639      	mov	r1, r7
 800a444:	4620      	mov	r0, r4
 800a446:	f7f6 f971 	bl	800072c <__aeabi_ddiv>
 800a44a:	b003      	add	sp, #12
 800a44c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800a450 <__copybits>:
 800a450:	3901      	subs	r1, #1
 800a452:	b570      	push	{r4, r5, r6, lr}
 800a454:	1149      	asrs	r1, r1, #5
 800a456:	6914      	ldr	r4, [r2, #16]
 800a458:	3101      	adds	r1, #1
 800a45a:	f102 0314 	add.w	r3, r2, #20
 800a45e:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800a462:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800a466:	1f05      	subs	r5, r0, #4
 800a468:	42a3      	cmp	r3, r4
 800a46a:	d30c      	bcc.n	800a486 <__copybits+0x36>
 800a46c:	1aa3      	subs	r3, r4, r2
 800a46e:	3b11      	subs	r3, #17
 800a470:	f023 0303 	bic.w	r3, r3, #3
 800a474:	3211      	adds	r2, #17
 800a476:	42a2      	cmp	r2, r4
 800a478:	bf88      	it	hi
 800a47a:	2300      	movhi	r3, #0
 800a47c:	4418      	add	r0, r3
 800a47e:	2300      	movs	r3, #0
 800a480:	4288      	cmp	r0, r1
 800a482:	d305      	bcc.n	800a490 <__copybits+0x40>
 800a484:	bd70      	pop	{r4, r5, r6, pc}
 800a486:	f853 6b04 	ldr.w	r6, [r3], #4
 800a48a:	f845 6f04 	str.w	r6, [r5, #4]!
 800a48e:	e7eb      	b.n	800a468 <__copybits+0x18>
 800a490:	f840 3b04 	str.w	r3, [r0], #4
 800a494:	e7f4      	b.n	800a480 <__copybits+0x30>

0800a496 <__any_on>:
 800a496:	f100 0214 	add.w	r2, r0, #20
 800a49a:	6900      	ldr	r0, [r0, #16]
 800a49c:	114b      	asrs	r3, r1, #5
 800a49e:	4298      	cmp	r0, r3
 800a4a0:	b510      	push	{r4, lr}
 800a4a2:	db11      	blt.n	800a4c8 <__any_on+0x32>
 800a4a4:	dd0a      	ble.n	800a4bc <__any_on+0x26>
 800a4a6:	f011 011f 	ands.w	r1, r1, #31
 800a4aa:	d007      	beq.n	800a4bc <__any_on+0x26>
 800a4ac:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800a4b0:	fa24 f001 	lsr.w	r0, r4, r1
 800a4b4:	fa00 f101 	lsl.w	r1, r0, r1
 800a4b8:	428c      	cmp	r4, r1
 800a4ba:	d10b      	bne.n	800a4d4 <__any_on+0x3e>
 800a4bc:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800a4c0:	4293      	cmp	r3, r2
 800a4c2:	d803      	bhi.n	800a4cc <__any_on+0x36>
 800a4c4:	2000      	movs	r0, #0
 800a4c6:	bd10      	pop	{r4, pc}
 800a4c8:	4603      	mov	r3, r0
 800a4ca:	e7f7      	b.n	800a4bc <__any_on+0x26>
 800a4cc:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800a4d0:	2900      	cmp	r1, #0
 800a4d2:	d0f5      	beq.n	800a4c0 <__any_on+0x2a>
 800a4d4:	2001      	movs	r0, #1
 800a4d6:	e7f6      	b.n	800a4c6 <__any_on+0x30>

0800a4d8 <_calloc_r>:
 800a4d8:	b570      	push	{r4, r5, r6, lr}
 800a4da:	fba1 5402 	umull	r5, r4, r1, r2
 800a4de:	b934      	cbnz	r4, 800a4ee <_calloc_r+0x16>
 800a4e0:	4629      	mov	r1, r5
 800a4e2:	f000 f875 	bl	800a5d0 <_malloc_r>
 800a4e6:	4606      	mov	r6, r0
 800a4e8:	b928      	cbnz	r0, 800a4f6 <_calloc_r+0x1e>
 800a4ea:	4630      	mov	r0, r6
 800a4ec:	bd70      	pop	{r4, r5, r6, pc}
 800a4ee:	220c      	movs	r2, #12
 800a4f0:	2600      	movs	r6, #0
 800a4f2:	6002      	str	r2, [r0, #0]
 800a4f4:	e7f9      	b.n	800a4ea <_calloc_r+0x12>
 800a4f6:	462a      	mov	r2, r5
 800a4f8:	4621      	mov	r1, r4
 800a4fa:	f7fc fae1 	bl	8006ac0 <memset>
 800a4fe:	e7f4      	b.n	800a4ea <_calloc_r+0x12>

0800a500 <_free_r>:
 800a500:	b538      	push	{r3, r4, r5, lr}
 800a502:	4605      	mov	r5, r0
 800a504:	2900      	cmp	r1, #0
 800a506:	d040      	beq.n	800a58a <_free_r+0x8a>
 800a508:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a50c:	1f0c      	subs	r4, r1, #4
 800a50e:	2b00      	cmp	r3, #0
 800a510:	bfb8      	it	lt
 800a512:	18e4      	addlt	r4, r4, r3
 800a514:	f000 fe62 	bl	800b1dc <__malloc_lock>
 800a518:	4a1c      	ldr	r2, [pc, #112]	; (800a58c <_free_r+0x8c>)
 800a51a:	6813      	ldr	r3, [r2, #0]
 800a51c:	b933      	cbnz	r3, 800a52c <_free_r+0x2c>
 800a51e:	6063      	str	r3, [r4, #4]
 800a520:	6014      	str	r4, [r2, #0]
 800a522:	4628      	mov	r0, r5
 800a524:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a528:	f000 be5e 	b.w	800b1e8 <__malloc_unlock>
 800a52c:	42a3      	cmp	r3, r4
 800a52e:	d908      	bls.n	800a542 <_free_r+0x42>
 800a530:	6820      	ldr	r0, [r4, #0]
 800a532:	1821      	adds	r1, r4, r0
 800a534:	428b      	cmp	r3, r1
 800a536:	bf01      	itttt	eq
 800a538:	6819      	ldreq	r1, [r3, #0]
 800a53a:	685b      	ldreq	r3, [r3, #4]
 800a53c:	1809      	addeq	r1, r1, r0
 800a53e:	6021      	streq	r1, [r4, #0]
 800a540:	e7ed      	b.n	800a51e <_free_r+0x1e>
 800a542:	461a      	mov	r2, r3
 800a544:	685b      	ldr	r3, [r3, #4]
 800a546:	b10b      	cbz	r3, 800a54c <_free_r+0x4c>
 800a548:	42a3      	cmp	r3, r4
 800a54a:	d9fa      	bls.n	800a542 <_free_r+0x42>
 800a54c:	6811      	ldr	r1, [r2, #0]
 800a54e:	1850      	adds	r0, r2, r1
 800a550:	42a0      	cmp	r0, r4
 800a552:	d10b      	bne.n	800a56c <_free_r+0x6c>
 800a554:	6820      	ldr	r0, [r4, #0]
 800a556:	4401      	add	r1, r0
 800a558:	1850      	adds	r0, r2, r1
 800a55a:	4283      	cmp	r3, r0
 800a55c:	6011      	str	r1, [r2, #0]
 800a55e:	d1e0      	bne.n	800a522 <_free_r+0x22>
 800a560:	6818      	ldr	r0, [r3, #0]
 800a562:	685b      	ldr	r3, [r3, #4]
 800a564:	4401      	add	r1, r0
 800a566:	6011      	str	r1, [r2, #0]
 800a568:	6053      	str	r3, [r2, #4]
 800a56a:	e7da      	b.n	800a522 <_free_r+0x22>
 800a56c:	d902      	bls.n	800a574 <_free_r+0x74>
 800a56e:	230c      	movs	r3, #12
 800a570:	602b      	str	r3, [r5, #0]
 800a572:	e7d6      	b.n	800a522 <_free_r+0x22>
 800a574:	6820      	ldr	r0, [r4, #0]
 800a576:	1821      	adds	r1, r4, r0
 800a578:	428b      	cmp	r3, r1
 800a57a:	bf01      	itttt	eq
 800a57c:	6819      	ldreq	r1, [r3, #0]
 800a57e:	685b      	ldreq	r3, [r3, #4]
 800a580:	1809      	addeq	r1, r1, r0
 800a582:	6021      	streq	r1, [r4, #0]
 800a584:	6063      	str	r3, [r4, #4]
 800a586:	6054      	str	r4, [r2, #4]
 800a588:	e7cb      	b.n	800a522 <_free_r+0x22>
 800a58a:	bd38      	pop	{r3, r4, r5, pc}
 800a58c:	20000658 	.word	0x20000658

0800a590 <sbrk_aligned>:
 800a590:	b570      	push	{r4, r5, r6, lr}
 800a592:	4e0e      	ldr	r6, [pc, #56]	; (800a5cc <sbrk_aligned+0x3c>)
 800a594:	460c      	mov	r4, r1
 800a596:	6831      	ldr	r1, [r6, #0]
 800a598:	4605      	mov	r5, r0
 800a59a:	b911      	cbnz	r1, 800a5a2 <sbrk_aligned+0x12>
 800a59c:	f000 fb46 	bl	800ac2c <_sbrk_r>
 800a5a0:	6030      	str	r0, [r6, #0]
 800a5a2:	4621      	mov	r1, r4
 800a5a4:	4628      	mov	r0, r5
 800a5a6:	f000 fb41 	bl	800ac2c <_sbrk_r>
 800a5aa:	1c43      	adds	r3, r0, #1
 800a5ac:	d00a      	beq.n	800a5c4 <sbrk_aligned+0x34>
 800a5ae:	1cc4      	adds	r4, r0, #3
 800a5b0:	f024 0403 	bic.w	r4, r4, #3
 800a5b4:	42a0      	cmp	r0, r4
 800a5b6:	d007      	beq.n	800a5c8 <sbrk_aligned+0x38>
 800a5b8:	1a21      	subs	r1, r4, r0
 800a5ba:	4628      	mov	r0, r5
 800a5bc:	f000 fb36 	bl	800ac2c <_sbrk_r>
 800a5c0:	3001      	adds	r0, #1
 800a5c2:	d101      	bne.n	800a5c8 <sbrk_aligned+0x38>
 800a5c4:	f04f 34ff 	mov.w	r4, #4294967295
 800a5c8:	4620      	mov	r0, r4
 800a5ca:	bd70      	pop	{r4, r5, r6, pc}
 800a5cc:	2000065c 	.word	0x2000065c

0800a5d0 <_malloc_r>:
 800a5d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a5d4:	1ccd      	adds	r5, r1, #3
 800a5d6:	f025 0503 	bic.w	r5, r5, #3
 800a5da:	3508      	adds	r5, #8
 800a5dc:	2d0c      	cmp	r5, #12
 800a5de:	bf38      	it	cc
 800a5e0:	250c      	movcc	r5, #12
 800a5e2:	2d00      	cmp	r5, #0
 800a5e4:	4607      	mov	r7, r0
 800a5e6:	db01      	blt.n	800a5ec <_malloc_r+0x1c>
 800a5e8:	42a9      	cmp	r1, r5
 800a5ea:	d905      	bls.n	800a5f8 <_malloc_r+0x28>
 800a5ec:	230c      	movs	r3, #12
 800a5ee:	2600      	movs	r6, #0
 800a5f0:	603b      	str	r3, [r7, #0]
 800a5f2:	4630      	mov	r0, r6
 800a5f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a5f8:	4e2e      	ldr	r6, [pc, #184]	; (800a6b4 <_malloc_r+0xe4>)
 800a5fa:	f000 fdef 	bl	800b1dc <__malloc_lock>
 800a5fe:	6833      	ldr	r3, [r6, #0]
 800a600:	461c      	mov	r4, r3
 800a602:	bb34      	cbnz	r4, 800a652 <_malloc_r+0x82>
 800a604:	4629      	mov	r1, r5
 800a606:	4638      	mov	r0, r7
 800a608:	f7ff ffc2 	bl	800a590 <sbrk_aligned>
 800a60c:	1c43      	adds	r3, r0, #1
 800a60e:	4604      	mov	r4, r0
 800a610:	d14d      	bne.n	800a6ae <_malloc_r+0xde>
 800a612:	6834      	ldr	r4, [r6, #0]
 800a614:	4626      	mov	r6, r4
 800a616:	2e00      	cmp	r6, #0
 800a618:	d140      	bne.n	800a69c <_malloc_r+0xcc>
 800a61a:	6823      	ldr	r3, [r4, #0]
 800a61c:	4631      	mov	r1, r6
 800a61e:	4638      	mov	r0, r7
 800a620:	eb04 0803 	add.w	r8, r4, r3
 800a624:	f000 fb02 	bl	800ac2c <_sbrk_r>
 800a628:	4580      	cmp	r8, r0
 800a62a:	d13a      	bne.n	800a6a2 <_malloc_r+0xd2>
 800a62c:	6821      	ldr	r1, [r4, #0]
 800a62e:	3503      	adds	r5, #3
 800a630:	1a6d      	subs	r5, r5, r1
 800a632:	f025 0503 	bic.w	r5, r5, #3
 800a636:	3508      	adds	r5, #8
 800a638:	2d0c      	cmp	r5, #12
 800a63a:	bf38      	it	cc
 800a63c:	250c      	movcc	r5, #12
 800a63e:	4638      	mov	r0, r7
 800a640:	4629      	mov	r1, r5
 800a642:	f7ff ffa5 	bl	800a590 <sbrk_aligned>
 800a646:	3001      	adds	r0, #1
 800a648:	d02b      	beq.n	800a6a2 <_malloc_r+0xd2>
 800a64a:	6823      	ldr	r3, [r4, #0]
 800a64c:	442b      	add	r3, r5
 800a64e:	6023      	str	r3, [r4, #0]
 800a650:	e00e      	b.n	800a670 <_malloc_r+0xa0>
 800a652:	6822      	ldr	r2, [r4, #0]
 800a654:	1b52      	subs	r2, r2, r5
 800a656:	d41e      	bmi.n	800a696 <_malloc_r+0xc6>
 800a658:	2a0b      	cmp	r2, #11
 800a65a:	d916      	bls.n	800a68a <_malloc_r+0xba>
 800a65c:	1961      	adds	r1, r4, r5
 800a65e:	42a3      	cmp	r3, r4
 800a660:	6025      	str	r5, [r4, #0]
 800a662:	bf18      	it	ne
 800a664:	6059      	strne	r1, [r3, #4]
 800a666:	6863      	ldr	r3, [r4, #4]
 800a668:	bf08      	it	eq
 800a66a:	6031      	streq	r1, [r6, #0]
 800a66c:	5162      	str	r2, [r4, r5]
 800a66e:	604b      	str	r3, [r1, #4]
 800a670:	4638      	mov	r0, r7
 800a672:	f104 060b 	add.w	r6, r4, #11
 800a676:	f000 fdb7 	bl	800b1e8 <__malloc_unlock>
 800a67a:	f026 0607 	bic.w	r6, r6, #7
 800a67e:	1d23      	adds	r3, r4, #4
 800a680:	1af2      	subs	r2, r6, r3
 800a682:	d0b6      	beq.n	800a5f2 <_malloc_r+0x22>
 800a684:	1b9b      	subs	r3, r3, r6
 800a686:	50a3      	str	r3, [r4, r2]
 800a688:	e7b3      	b.n	800a5f2 <_malloc_r+0x22>
 800a68a:	6862      	ldr	r2, [r4, #4]
 800a68c:	42a3      	cmp	r3, r4
 800a68e:	bf0c      	ite	eq
 800a690:	6032      	streq	r2, [r6, #0]
 800a692:	605a      	strne	r2, [r3, #4]
 800a694:	e7ec      	b.n	800a670 <_malloc_r+0xa0>
 800a696:	4623      	mov	r3, r4
 800a698:	6864      	ldr	r4, [r4, #4]
 800a69a:	e7b2      	b.n	800a602 <_malloc_r+0x32>
 800a69c:	4634      	mov	r4, r6
 800a69e:	6876      	ldr	r6, [r6, #4]
 800a6a0:	e7b9      	b.n	800a616 <_malloc_r+0x46>
 800a6a2:	230c      	movs	r3, #12
 800a6a4:	4638      	mov	r0, r7
 800a6a6:	603b      	str	r3, [r7, #0]
 800a6a8:	f000 fd9e 	bl	800b1e8 <__malloc_unlock>
 800a6ac:	e7a1      	b.n	800a5f2 <_malloc_r+0x22>
 800a6ae:	6025      	str	r5, [r4, #0]
 800a6b0:	e7de      	b.n	800a670 <_malloc_r+0xa0>
 800a6b2:	bf00      	nop
 800a6b4:	20000658 	.word	0x20000658

0800a6b8 <__ssputs_r>:
 800a6b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a6bc:	688e      	ldr	r6, [r1, #8]
 800a6be:	4682      	mov	sl, r0
 800a6c0:	429e      	cmp	r6, r3
 800a6c2:	460c      	mov	r4, r1
 800a6c4:	4690      	mov	r8, r2
 800a6c6:	461f      	mov	r7, r3
 800a6c8:	d838      	bhi.n	800a73c <__ssputs_r+0x84>
 800a6ca:	898a      	ldrh	r2, [r1, #12]
 800a6cc:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800a6d0:	d032      	beq.n	800a738 <__ssputs_r+0x80>
 800a6d2:	6825      	ldr	r5, [r4, #0]
 800a6d4:	6909      	ldr	r1, [r1, #16]
 800a6d6:	3301      	adds	r3, #1
 800a6d8:	eba5 0901 	sub.w	r9, r5, r1
 800a6dc:	6965      	ldr	r5, [r4, #20]
 800a6de:	444b      	add	r3, r9
 800a6e0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800a6e4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800a6e8:	106d      	asrs	r5, r5, #1
 800a6ea:	429d      	cmp	r5, r3
 800a6ec:	bf38      	it	cc
 800a6ee:	461d      	movcc	r5, r3
 800a6f0:	0553      	lsls	r3, r2, #21
 800a6f2:	d531      	bpl.n	800a758 <__ssputs_r+0xa0>
 800a6f4:	4629      	mov	r1, r5
 800a6f6:	f7ff ff6b 	bl	800a5d0 <_malloc_r>
 800a6fa:	4606      	mov	r6, r0
 800a6fc:	b950      	cbnz	r0, 800a714 <__ssputs_r+0x5c>
 800a6fe:	230c      	movs	r3, #12
 800a700:	f04f 30ff 	mov.w	r0, #4294967295
 800a704:	f8ca 3000 	str.w	r3, [sl]
 800a708:	89a3      	ldrh	r3, [r4, #12]
 800a70a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a70e:	81a3      	strh	r3, [r4, #12]
 800a710:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a714:	464a      	mov	r2, r9
 800a716:	6921      	ldr	r1, [r4, #16]
 800a718:	f7ff fa18 	bl	8009b4c <memcpy>
 800a71c:	89a3      	ldrh	r3, [r4, #12]
 800a71e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800a722:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a726:	81a3      	strh	r3, [r4, #12]
 800a728:	6126      	str	r6, [r4, #16]
 800a72a:	444e      	add	r6, r9
 800a72c:	6026      	str	r6, [r4, #0]
 800a72e:	463e      	mov	r6, r7
 800a730:	6165      	str	r5, [r4, #20]
 800a732:	eba5 0509 	sub.w	r5, r5, r9
 800a736:	60a5      	str	r5, [r4, #8]
 800a738:	42be      	cmp	r6, r7
 800a73a:	d900      	bls.n	800a73e <__ssputs_r+0x86>
 800a73c:	463e      	mov	r6, r7
 800a73e:	4632      	mov	r2, r6
 800a740:	4641      	mov	r1, r8
 800a742:	6820      	ldr	r0, [r4, #0]
 800a744:	f000 fd30 	bl	800b1a8 <memmove>
 800a748:	68a3      	ldr	r3, [r4, #8]
 800a74a:	2000      	movs	r0, #0
 800a74c:	1b9b      	subs	r3, r3, r6
 800a74e:	60a3      	str	r3, [r4, #8]
 800a750:	6823      	ldr	r3, [r4, #0]
 800a752:	4433      	add	r3, r6
 800a754:	6023      	str	r3, [r4, #0]
 800a756:	e7db      	b.n	800a710 <__ssputs_r+0x58>
 800a758:	462a      	mov	r2, r5
 800a75a:	f000 fd4b 	bl	800b1f4 <_realloc_r>
 800a75e:	4606      	mov	r6, r0
 800a760:	2800      	cmp	r0, #0
 800a762:	d1e1      	bne.n	800a728 <__ssputs_r+0x70>
 800a764:	4650      	mov	r0, sl
 800a766:	6921      	ldr	r1, [r4, #16]
 800a768:	f7ff feca 	bl	800a500 <_free_r>
 800a76c:	e7c7      	b.n	800a6fe <__ssputs_r+0x46>
	...

0800a770 <_svfiprintf_r>:
 800a770:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a774:	4698      	mov	r8, r3
 800a776:	898b      	ldrh	r3, [r1, #12]
 800a778:	4607      	mov	r7, r0
 800a77a:	061b      	lsls	r3, r3, #24
 800a77c:	460d      	mov	r5, r1
 800a77e:	4614      	mov	r4, r2
 800a780:	b09d      	sub	sp, #116	; 0x74
 800a782:	d50e      	bpl.n	800a7a2 <_svfiprintf_r+0x32>
 800a784:	690b      	ldr	r3, [r1, #16]
 800a786:	b963      	cbnz	r3, 800a7a2 <_svfiprintf_r+0x32>
 800a788:	2140      	movs	r1, #64	; 0x40
 800a78a:	f7ff ff21 	bl	800a5d0 <_malloc_r>
 800a78e:	6028      	str	r0, [r5, #0]
 800a790:	6128      	str	r0, [r5, #16]
 800a792:	b920      	cbnz	r0, 800a79e <_svfiprintf_r+0x2e>
 800a794:	230c      	movs	r3, #12
 800a796:	603b      	str	r3, [r7, #0]
 800a798:	f04f 30ff 	mov.w	r0, #4294967295
 800a79c:	e0d1      	b.n	800a942 <_svfiprintf_r+0x1d2>
 800a79e:	2340      	movs	r3, #64	; 0x40
 800a7a0:	616b      	str	r3, [r5, #20]
 800a7a2:	2300      	movs	r3, #0
 800a7a4:	9309      	str	r3, [sp, #36]	; 0x24
 800a7a6:	2320      	movs	r3, #32
 800a7a8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a7ac:	2330      	movs	r3, #48	; 0x30
 800a7ae:	f04f 0901 	mov.w	r9, #1
 800a7b2:	f8cd 800c 	str.w	r8, [sp, #12]
 800a7b6:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800a95c <_svfiprintf_r+0x1ec>
 800a7ba:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a7be:	4623      	mov	r3, r4
 800a7c0:	469a      	mov	sl, r3
 800a7c2:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a7c6:	b10a      	cbz	r2, 800a7cc <_svfiprintf_r+0x5c>
 800a7c8:	2a25      	cmp	r2, #37	; 0x25
 800a7ca:	d1f9      	bne.n	800a7c0 <_svfiprintf_r+0x50>
 800a7cc:	ebba 0b04 	subs.w	fp, sl, r4
 800a7d0:	d00b      	beq.n	800a7ea <_svfiprintf_r+0x7a>
 800a7d2:	465b      	mov	r3, fp
 800a7d4:	4622      	mov	r2, r4
 800a7d6:	4629      	mov	r1, r5
 800a7d8:	4638      	mov	r0, r7
 800a7da:	f7ff ff6d 	bl	800a6b8 <__ssputs_r>
 800a7de:	3001      	adds	r0, #1
 800a7e0:	f000 80aa 	beq.w	800a938 <_svfiprintf_r+0x1c8>
 800a7e4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a7e6:	445a      	add	r2, fp
 800a7e8:	9209      	str	r2, [sp, #36]	; 0x24
 800a7ea:	f89a 3000 	ldrb.w	r3, [sl]
 800a7ee:	2b00      	cmp	r3, #0
 800a7f0:	f000 80a2 	beq.w	800a938 <_svfiprintf_r+0x1c8>
 800a7f4:	2300      	movs	r3, #0
 800a7f6:	f04f 32ff 	mov.w	r2, #4294967295
 800a7fa:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a7fe:	f10a 0a01 	add.w	sl, sl, #1
 800a802:	9304      	str	r3, [sp, #16]
 800a804:	9307      	str	r3, [sp, #28]
 800a806:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a80a:	931a      	str	r3, [sp, #104]	; 0x68
 800a80c:	4654      	mov	r4, sl
 800a80e:	2205      	movs	r2, #5
 800a810:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a814:	4851      	ldr	r0, [pc, #324]	; (800a95c <_svfiprintf_r+0x1ec>)
 800a816:	f7ff f98b 	bl	8009b30 <memchr>
 800a81a:	9a04      	ldr	r2, [sp, #16]
 800a81c:	b9d8      	cbnz	r0, 800a856 <_svfiprintf_r+0xe6>
 800a81e:	06d0      	lsls	r0, r2, #27
 800a820:	bf44      	itt	mi
 800a822:	2320      	movmi	r3, #32
 800a824:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a828:	0711      	lsls	r1, r2, #28
 800a82a:	bf44      	itt	mi
 800a82c:	232b      	movmi	r3, #43	; 0x2b
 800a82e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a832:	f89a 3000 	ldrb.w	r3, [sl]
 800a836:	2b2a      	cmp	r3, #42	; 0x2a
 800a838:	d015      	beq.n	800a866 <_svfiprintf_r+0xf6>
 800a83a:	4654      	mov	r4, sl
 800a83c:	2000      	movs	r0, #0
 800a83e:	f04f 0c0a 	mov.w	ip, #10
 800a842:	9a07      	ldr	r2, [sp, #28]
 800a844:	4621      	mov	r1, r4
 800a846:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a84a:	3b30      	subs	r3, #48	; 0x30
 800a84c:	2b09      	cmp	r3, #9
 800a84e:	d94e      	bls.n	800a8ee <_svfiprintf_r+0x17e>
 800a850:	b1b0      	cbz	r0, 800a880 <_svfiprintf_r+0x110>
 800a852:	9207      	str	r2, [sp, #28]
 800a854:	e014      	b.n	800a880 <_svfiprintf_r+0x110>
 800a856:	eba0 0308 	sub.w	r3, r0, r8
 800a85a:	fa09 f303 	lsl.w	r3, r9, r3
 800a85e:	4313      	orrs	r3, r2
 800a860:	46a2      	mov	sl, r4
 800a862:	9304      	str	r3, [sp, #16]
 800a864:	e7d2      	b.n	800a80c <_svfiprintf_r+0x9c>
 800a866:	9b03      	ldr	r3, [sp, #12]
 800a868:	1d19      	adds	r1, r3, #4
 800a86a:	681b      	ldr	r3, [r3, #0]
 800a86c:	9103      	str	r1, [sp, #12]
 800a86e:	2b00      	cmp	r3, #0
 800a870:	bfbb      	ittet	lt
 800a872:	425b      	neglt	r3, r3
 800a874:	f042 0202 	orrlt.w	r2, r2, #2
 800a878:	9307      	strge	r3, [sp, #28]
 800a87a:	9307      	strlt	r3, [sp, #28]
 800a87c:	bfb8      	it	lt
 800a87e:	9204      	strlt	r2, [sp, #16]
 800a880:	7823      	ldrb	r3, [r4, #0]
 800a882:	2b2e      	cmp	r3, #46	; 0x2e
 800a884:	d10c      	bne.n	800a8a0 <_svfiprintf_r+0x130>
 800a886:	7863      	ldrb	r3, [r4, #1]
 800a888:	2b2a      	cmp	r3, #42	; 0x2a
 800a88a:	d135      	bne.n	800a8f8 <_svfiprintf_r+0x188>
 800a88c:	9b03      	ldr	r3, [sp, #12]
 800a88e:	3402      	adds	r4, #2
 800a890:	1d1a      	adds	r2, r3, #4
 800a892:	681b      	ldr	r3, [r3, #0]
 800a894:	9203      	str	r2, [sp, #12]
 800a896:	2b00      	cmp	r3, #0
 800a898:	bfb8      	it	lt
 800a89a:	f04f 33ff 	movlt.w	r3, #4294967295
 800a89e:	9305      	str	r3, [sp, #20]
 800a8a0:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 800a960 <_svfiprintf_r+0x1f0>
 800a8a4:	2203      	movs	r2, #3
 800a8a6:	4650      	mov	r0, sl
 800a8a8:	7821      	ldrb	r1, [r4, #0]
 800a8aa:	f7ff f941 	bl	8009b30 <memchr>
 800a8ae:	b140      	cbz	r0, 800a8c2 <_svfiprintf_r+0x152>
 800a8b0:	2340      	movs	r3, #64	; 0x40
 800a8b2:	eba0 000a 	sub.w	r0, r0, sl
 800a8b6:	fa03 f000 	lsl.w	r0, r3, r0
 800a8ba:	9b04      	ldr	r3, [sp, #16]
 800a8bc:	3401      	adds	r4, #1
 800a8be:	4303      	orrs	r3, r0
 800a8c0:	9304      	str	r3, [sp, #16]
 800a8c2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a8c6:	2206      	movs	r2, #6
 800a8c8:	4826      	ldr	r0, [pc, #152]	; (800a964 <_svfiprintf_r+0x1f4>)
 800a8ca:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a8ce:	f7ff f92f 	bl	8009b30 <memchr>
 800a8d2:	2800      	cmp	r0, #0
 800a8d4:	d038      	beq.n	800a948 <_svfiprintf_r+0x1d8>
 800a8d6:	4b24      	ldr	r3, [pc, #144]	; (800a968 <_svfiprintf_r+0x1f8>)
 800a8d8:	bb1b      	cbnz	r3, 800a922 <_svfiprintf_r+0x1b2>
 800a8da:	9b03      	ldr	r3, [sp, #12]
 800a8dc:	3307      	adds	r3, #7
 800a8de:	f023 0307 	bic.w	r3, r3, #7
 800a8e2:	3308      	adds	r3, #8
 800a8e4:	9303      	str	r3, [sp, #12]
 800a8e6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a8e8:	4433      	add	r3, r6
 800a8ea:	9309      	str	r3, [sp, #36]	; 0x24
 800a8ec:	e767      	b.n	800a7be <_svfiprintf_r+0x4e>
 800a8ee:	460c      	mov	r4, r1
 800a8f0:	2001      	movs	r0, #1
 800a8f2:	fb0c 3202 	mla	r2, ip, r2, r3
 800a8f6:	e7a5      	b.n	800a844 <_svfiprintf_r+0xd4>
 800a8f8:	2300      	movs	r3, #0
 800a8fa:	f04f 0c0a 	mov.w	ip, #10
 800a8fe:	4619      	mov	r1, r3
 800a900:	3401      	adds	r4, #1
 800a902:	9305      	str	r3, [sp, #20]
 800a904:	4620      	mov	r0, r4
 800a906:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a90a:	3a30      	subs	r2, #48	; 0x30
 800a90c:	2a09      	cmp	r2, #9
 800a90e:	d903      	bls.n	800a918 <_svfiprintf_r+0x1a8>
 800a910:	2b00      	cmp	r3, #0
 800a912:	d0c5      	beq.n	800a8a0 <_svfiprintf_r+0x130>
 800a914:	9105      	str	r1, [sp, #20]
 800a916:	e7c3      	b.n	800a8a0 <_svfiprintf_r+0x130>
 800a918:	4604      	mov	r4, r0
 800a91a:	2301      	movs	r3, #1
 800a91c:	fb0c 2101 	mla	r1, ip, r1, r2
 800a920:	e7f0      	b.n	800a904 <_svfiprintf_r+0x194>
 800a922:	ab03      	add	r3, sp, #12
 800a924:	9300      	str	r3, [sp, #0]
 800a926:	462a      	mov	r2, r5
 800a928:	4638      	mov	r0, r7
 800a92a:	4b10      	ldr	r3, [pc, #64]	; (800a96c <_svfiprintf_r+0x1fc>)
 800a92c:	a904      	add	r1, sp, #16
 800a92e:	f7fc f96d 	bl	8006c0c <_printf_float>
 800a932:	1c42      	adds	r2, r0, #1
 800a934:	4606      	mov	r6, r0
 800a936:	d1d6      	bne.n	800a8e6 <_svfiprintf_r+0x176>
 800a938:	89ab      	ldrh	r3, [r5, #12]
 800a93a:	065b      	lsls	r3, r3, #25
 800a93c:	f53f af2c 	bmi.w	800a798 <_svfiprintf_r+0x28>
 800a940:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a942:	b01d      	add	sp, #116	; 0x74
 800a944:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a948:	ab03      	add	r3, sp, #12
 800a94a:	9300      	str	r3, [sp, #0]
 800a94c:	462a      	mov	r2, r5
 800a94e:	4638      	mov	r0, r7
 800a950:	4b06      	ldr	r3, [pc, #24]	; (800a96c <_svfiprintf_r+0x1fc>)
 800a952:	a904      	add	r1, sp, #16
 800a954:	f7fc fbf6 	bl	8007144 <_printf_i>
 800a958:	e7eb      	b.n	800a932 <_svfiprintf_r+0x1c2>
 800a95a:	bf00      	nop
 800a95c:	0800bd64 	.word	0x0800bd64
 800a960:	0800bd6a 	.word	0x0800bd6a
 800a964:	0800bd6e 	.word	0x0800bd6e
 800a968:	08006c0d 	.word	0x08006c0d
 800a96c:	0800a6b9 	.word	0x0800a6b9

0800a970 <__sfputc_r>:
 800a970:	6893      	ldr	r3, [r2, #8]
 800a972:	b410      	push	{r4}
 800a974:	3b01      	subs	r3, #1
 800a976:	2b00      	cmp	r3, #0
 800a978:	6093      	str	r3, [r2, #8]
 800a97a:	da07      	bge.n	800a98c <__sfputc_r+0x1c>
 800a97c:	6994      	ldr	r4, [r2, #24]
 800a97e:	42a3      	cmp	r3, r4
 800a980:	db01      	blt.n	800a986 <__sfputc_r+0x16>
 800a982:	290a      	cmp	r1, #10
 800a984:	d102      	bne.n	800a98c <__sfputc_r+0x1c>
 800a986:	bc10      	pop	{r4}
 800a988:	f000 b9b8 	b.w	800acfc <__swbuf_r>
 800a98c:	6813      	ldr	r3, [r2, #0]
 800a98e:	1c58      	adds	r0, r3, #1
 800a990:	6010      	str	r0, [r2, #0]
 800a992:	7019      	strb	r1, [r3, #0]
 800a994:	4608      	mov	r0, r1
 800a996:	bc10      	pop	{r4}
 800a998:	4770      	bx	lr

0800a99a <__sfputs_r>:
 800a99a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a99c:	4606      	mov	r6, r0
 800a99e:	460f      	mov	r7, r1
 800a9a0:	4614      	mov	r4, r2
 800a9a2:	18d5      	adds	r5, r2, r3
 800a9a4:	42ac      	cmp	r4, r5
 800a9a6:	d101      	bne.n	800a9ac <__sfputs_r+0x12>
 800a9a8:	2000      	movs	r0, #0
 800a9aa:	e007      	b.n	800a9bc <__sfputs_r+0x22>
 800a9ac:	463a      	mov	r2, r7
 800a9ae:	4630      	mov	r0, r6
 800a9b0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a9b4:	f7ff ffdc 	bl	800a970 <__sfputc_r>
 800a9b8:	1c43      	adds	r3, r0, #1
 800a9ba:	d1f3      	bne.n	800a9a4 <__sfputs_r+0xa>
 800a9bc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800a9c0 <_vfiprintf_r>:
 800a9c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a9c4:	460d      	mov	r5, r1
 800a9c6:	4614      	mov	r4, r2
 800a9c8:	4698      	mov	r8, r3
 800a9ca:	4606      	mov	r6, r0
 800a9cc:	b09d      	sub	sp, #116	; 0x74
 800a9ce:	b118      	cbz	r0, 800a9d8 <_vfiprintf_r+0x18>
 800a9d0:	6983      	ldr	r3, [r0, #24]
 800a9d2:	b90b      	cbnz	r3, 800a9d8 <_vfiprintf_r+0x18>
 800a9d4:	f7fe fc86 	bl	80092e4 <__sinit>
 800a9d8:	4b89      	ldr	r3, [pc, #548]	; (800ac00 <_vfiprintf_r+0x240>)
 800a9da:	429d      	cmp	r5, r3
 800a9dc:	d11b      	bne.n	800aa16 <_vfiprintf_r+0x56>
 800a9de:	6875      	ldr	r5, [r6, #4]
 800a9e0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a9e2:	07d9      	lsls	r1, r3, #31
 800a9e4:	d405      	bmi.n	800a9f2 <_vfiprintf_r+0x32>
 800a9e6:	89ab      	ldrh	r3, [r5, #12]
 800a9e8:	059a      	lsls	r2, r3, #22
 800a9ea:	d402      	bmi.n	800a9f2 <_vfiprintf_r+0x32>
 800a9ec:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a9ee:	f7ff f882 	bl	8009af6 <__retarget_lock_acquire_recursive>
 800a9f2:	89ab      	ldrh	r3, [r5, #12]
 800a9f4:	071b      	lsls	r3, r3, #28
 800a9f6:	d501      	bpl.n	800a9fc <_vfiprintf_r+0x3c>
 800a9f8:	692b      	ldr	r3, [r5, #16]
 800a9fa:	b9eb      	cbnz	r3, 800aa38 <_vfiprintf_r+0x78>
 800a9fc:	4629      	mov	r1, r5
 800a9fe:	4630      	mov	r0, r6
 800aa00:	f000 f9ee 	bl	800ade0 <__swsetup_r>
 800aa04:	b1c0      	cbz	r0, 800aa38 <_vfiprintf_r+0x78>
 800aa06:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800aa08:	07dc      	lsls	r4, r3, #31
 800aa0a:	d50e      	bpl.n	800aa2a <_vfiprintf_r+0x6a>
 800aa0c:	f04f 30ff 	mov.w	r0, #4294967295
 800aa10:	b01d      	add	sp, #116	; 0x74
 800aa12:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800aa16:	4b7b      	ldr	r3, [pc, #492]	; (800ac04 <_vfiprintf_r+0x244>)
 800aa18:	429d      	cmp	r5, r3
 800aa1a:	d101      	bne.n	800aa20 <_vfiprintf_r+0x60>
 800aa1c:	68b5      	ldr	r5, [r6, #8]
 800aa1e:	e7df      	b.n	800a9e0 <_vfiprintf_r+0x20>
 800aa20:	4b79      	ldr	r3, [pc, #484]	; (800ac08 <_vfiprintf_r+0x248>)
 800aa22:	429d      	cmp	r5, r3
 800aa24:	bf08      	it	eq
 800aa26:	68f5      	ldreq	r5, [r6, #12]
 800aa28:	e7da      	b.n	800a9e0 <_vfiprintf_r+0x20>
 800aa2a:	89ab      	ldrh	r3, [r5, #12]
 800aa2c:	0598      	lsls	r0, r3, #22
 800aa2e:	d4ed      	bmi.n	800aa0c <_vfiprintf_r+0x4c>
 800aa30:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800aa32:	f7ff f861 	bl	8009af8 <__retarget_lock_release_recursive>
 800aa36:	e7e9      	b.n	800aa0c <_vfiprintf_r+0x4c>
 800aa38:	2300      	movs	r3, #0
 800aa3a:	9309      	str	r3, [sp, #36]	; 0x24
 800aa3c:	2320      	movs	r3, #32
 800aa3e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800aa42:	2330      	movs	r3, #48	; 0x30
 800aa44:	f04f 0901 	mov.w	r9, #1
 800aa48:	f8cd 800c 	str.w	r8, [sp, #12]
 800aa4c:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 800ac0c <_vfiprintf_r+0x24c>
 800aa50:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800aa54:	4623      	mov	r3, r4
 800aa56:	469a      	mov	sl, r3
 800aa58:	f813 2b01 	ldrb.w	r2, [r3], #1
 800aa5c:	b10a      	cbz	r2, 800aa62 <_vfiprintf_r+0xa2>
 800aa5e:	2a25      	cmp	r2, #37	; 0x25
 800aa60:	d1f9      	bne.n	800aa56 <_vfiprintf_r+0x96>
 800aa62:	ebba 0b04 	subs.w	fp, sl, r4
 800aa66:	d00b      	beq.n	800aa80 <_vfiprintf_r+0xc0>
 800aa68:	465b      	mov	r3, fp
 800aa6a:	4622      	mov	r2, r4
 800aa6c:	4629      	mov	r1, r5
 800aa6e:	4630      	mov	r0, r6
 800aa70:	f7ff ff93 	bl	800a99a <__sfputs_r>
 800aa74:	3001      	adds	r0, #1
 800aa76:	f000 80aa 	beq.w	800abce <_vfiprintf_r+0x20e>
 800aa7a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800aa7c:	445a      	add	r2, fp
 800aa7e:	9209      	str	r2, [sp, #36]	; 0x24
 800aa80:	f89a 3000 	ldrb.w	r3, [sl]
 800aa84:	2b00      	cmp	r3, #0
 800aa86:	f000 80a2 	beq.w	800abce <_vfiprintf_r+0x20e>
 800aa8a:	2300      	movs	r3, #0
 800aa8c:	f04f 32ff 	mov.w	r2, #4294967295
 800aa90:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800aa94:	f10a 0a01 	add.w	sl, sl, #1
 800aa98:	9304      	str	r3, [sp, #16]
 800aa9a:	9307      	str	r3, [sp, #28]
 800aa9c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800aaa0:	931a      	str	r3, [sp, #104]	; 0x68
 800aaa2:	4654      	mov	r4, sl
 800aaa4:	2205      	movs	r2, #5
 800aaa6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800aaaa:	4858      	ldr	r0, [pc, #352]	; (800ac0c <_vfiprintf_r+0x24c>)
 800aaac:	f7ff f840 	bl	8009b30 <memchr>
 800aab0:	9a04      	ldr	r2, [sp, #16]
 800aab2:	b9d8      	cbnz	r0, 800aaec <_vfiprintf_r+0x12c>
 800aab4:	06d1      	lsls	r1, r2, #27
 800aab6:	bf44      	itt	mi
 800aab8:	2320      	movmi	r3, #32
 800aaba:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800aabe:	0713      	lsls	r3, r2, #28
 800aac0:	bf44      	itt	mi
 800aac2:	232b      	movmi	r3, #43	; 0x2b
 800aac4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800aac8:	f89a 3000 	ldrb.w	r3, [sl]
 800aacc:	2b2a      	cmp	r3, #42	; 0x2a
 800aace:	d015      	beq.n	800aafc <_vfiprintf_r+0x13c>
 800aad0:	4654      	mov	r4, sl
 800aad2:	2000      	movs	r0, #0
 800aad4:	f04f 0c0a 	mov.w	ip, #10
 800aad8:	9a07      	ldr	r2, [sp, #28]
 800aada:	4621      	mov	r1, r4
 800aadc:	f811 3b01 	ldrb.w	r3, [r1], #1
 800aae0:	3b30      	subs	r3, #48	; 0x30
 800aae2:	2b09      	cmp	r3, #9
 800aae4:	d94e      	bls.n	800ab84 <_vfiprintf_r+0x1c4>
 800aae6:	b1b0      	cbz	r0, 800ab16 <_vfiprintf_r+0x156>
 800aae8:	9207      	str	r2, [sp, #28]
 800aaea:	e014      	b.n	800ab16 <_vfiprintf_r+0x156>
 800aaec:	eba0 0308 	sub.w	r3, r0, r8
 800aaf0:	fa09 f303 	lsl.w	r3, r9, r3
 800aaf4:	4313      	orrs	r3, r2
 800aaf6:	46a2      	mov	sl, r4
 800aaf8:	9304      	str	r3, [sp, #16]
 800aafa:	e7d2      	b.n	800aaa2 <_vfiprintf_r+0xe2>
 800aafc:	9b03      	ldr	r3, [sp, #12]
 800aafe:	1d19      	adds	r1, r3, #4
 800ab00:	681b      	ldr	r3, [r3, #0]
 800ab02:	9103      	str	r1, [sp, #12]
 800ab04:	2b00      	cmp	r3, #0
 800ab06:	bfbb      	ittet	lt
 800ab08:	425b      	neglt	r3, r3
 800ab0a:	f042 0202 	orrlt.w	r2, r2, #2
 800ab0e:	9307      	strge	r3, [sp, #28]
 800ab10:	9307      	strlt	r3, [sp, #28]
 800ab12:	bfb8      	it	lt
 800ab14:	9204      	strlt	r2, [sp, #16]
 800ab16:	7823      	ldrb	r3, [r4, #0]
 800ab18:	2b2e      	cmp	r3, #46	; 0x2e
 800ab1a:	d10c      	bne.n	800ab36 <_vfiprintf_r+0x176>
 800ab1c:	7863      	ldrb	r3, [r4, #1]
 800ab1e:	2b2a      	cmp	r3, #42	; 0x2a
 800ab20:	d135      	bne.n	800ab8e <_vfiprintf_r+0x1ce>
 800ab22:	9b03      	ldr	r3, [sp, #12]
 800ab24:	3402      	adds	r4, #2
 800ab26:	1d1a      	adds	r2, r3, #4
 800ab28:	681b      	ldr	r3, [r3, #0]
 800ab2a:	9203      	str	r2, [sp, #12]
 800ab2c:	2b00      	cmp	r3, #0
 800ab2e:	bfb8      	it	lt
 800ab30:	f04f 33ff 	movlt.w	r3, #4294967295
 800ab34:	9305      	str	r3, [sp, #20]
 800ab36:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 800ac10 <_vfiprintf_r+0x250>
 800ab3a:	2203      	movs	r2, #3
 800ab3c:	4650      	mov	r0, sl
 800ab3e:	7821      	ldrb	r1, [r4, #0]
 800ab40:	f7fe fff6 	bl	8009b30 <memchr>
 800ab44:	b140      	cbz	r0, 800ab58 <_vfiprintf_r+0x198>
 800ab46:	2340      	movs	r3, #64	; 0x40
 800ab48:	eba0 000a 	sub.w	r0, r0, sl
 800ab4c:	fa03 f000 	lsl.w	r0, r3, r0
 800ab50:	9b04      	ldr	r3, [sp, #16]
 800ab52:	3401      	adds	r4, #1
 800ab54:	4303      	orrs	r3, r0
 800ab56:	9304      	str	r3, [sp, #16]
 800ab58:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ab5c:	2206      	movs	r2, #6
 800ab5e:	482d      	ldr	r0, [pc, #180]	; (800ac14 <_vfiprintf_r+0x254>)
 800ab60:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800ab64:	f7fe ffe4 	bl	8009b30 <memchr>
 800ab68:	2800      	cmp	r0, #0
 800ab6a:	d03f      	beq.n	800abec <_vfiprintf_r+0x22c>
 800ab6c:	4b2a      	ldr	r3, [pc, #168]	; (800ac18 <_vfiprintf_r+0x258>)
 800ab6e:	bb1b      	cbnz	r3, 800abb8 <_vfiprintf_r+0x1f8>
 800ab70:	9b03      	ldr	r3, [sp, #12]
 800ab72:	3307      	adds	r3, #7
 800ab74:	f023 0307 	bic.w	r3, r3, #7
 800ab78:	3308      	adds	r3, #8
 800ab7a:	9303      	str	r3, [sp, #12]
 800ab7c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ab7e:	443b      	add	r3, r7
 800ab80:	9309      	str	r3, [sp, #36]	; 0x24
 800ab82:	e767      	b.n	800aa54 <_vfiprintf_r+0x94>
 800ab84:	460c      	mov	r4, r1
 800ab86:	2001      	movs	r0, #1
 800ab88:	fb0c 3202 	mla	r2, ip, r2, r3
 800ab8c:	e7a5      	b.n	800aada <_vfiprintf_r+0x11a>
 800ab8e:	2300      	movs	r3, #0
 800ab90:	f04f 0c0a 	mov.w	ip, #10
 800ab94:	4619      	mov	r1, r3
 800ab96:	3401      	adds	r4, #1
 800ab98:	9305      	str	r3, [sp, #20]
 800ab9a:	4620      	mov	r0, r4
 800ab9c:	f810 2b01 	ldrb.w	r2, [r0], #1
 800aba0:	3a30      	subs	r2, #48	; 0x30
 800aba2:	2a09      	cmp	r2, #9
 800aba4:	d903      	bls.n	800abae <_vfiprintf_r+0x1ee>
 800aba6:	2b00      	cmp	r3, #0
 800aba8:	d0c5      	beq.n	800ab36 <_vfiprintf_r+0x176>
 800abaa:	9105      	str	r1, [sp, #20]
 800abac:	e7c3      	b.n	800ab36 <_vfiprintf_r+0x176>
 800abae:	4604      	mov	r4, r0
 800abb0:	2301      	movs	r3, #1
 800abb2:	fb0c 2101 	mla	r1, ip, r1, r2
 800abb6:	e7f0      	b.n	800ab9a <_vfiprintf_r+0x1da>
 800abb8:	ab03      	add	r3, sp, #12
 800abba:	9300      	str	r3, [sp, #0]
 800abbc:	462a      	mov	r2, r5
 800abbe:	4630      	mov	r0, r6
 800abc0:	4b16      	ldr	r3, [pc, #88]	; (800ac1c <_vfiprintf_r+0x25c>)
 800abc2:	a904      	add	r1, sp, #16
 800abc4:	f7fc f822 	bl	8006c0c <_printf_float>
 800abc8:	4607      	mov	r7, r0
 800abca:	1c78      	adds	r0, r7, #1
 800abcc:	d1d6      	bne.n	800ab7c <_vfiprintf_r+0x1bc>
 800abce:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800abd0:	07d9      	lsls	r1, r3, #31
 800abd2:	d405      	bmi.n	800abe0 <_vfiprintf_r+0x220>
 800abd4:	89ab      	ldrh	r3, [r5, #12]
 800abd6:	059a      	lsls	r2, r3, #22
 800abd8:	d402      	bmi.n	800abe0 <_vfiprintf_r+0x220>
 800abda:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800abdc:	f7fe ff8c 	bl	8009af8 <__retarget_lock_release_recursive>
 800abe0:	89ab      	ldrh	r3, [r5, #12]
 800abe2:	065b      	lsls	r3, r3, #25
 800abe4:	f53f af12 	bmi.w	800aa0c <_vfiprintf_r+0x4c>
 800abe8:	9809      	ldr	r0, [sp, #36]	; 0x24
 800abea:	e711      	b.n	800aa10 <_vfiprintf_r+0x50>
 800abec:	ab03      	add	r3, sp, #12
 800abee:	9300      	str	r3, [sp, #0]
 800abf0:	462a      	mov	r2, r5
 800abf2:	4630      	mov	r0, r6
 800abf4:	4b09      	ldr	r3, [pc, #36]	; (800ac1c <_vfiprintf_r+0x25c>)
 800abf6:	a904      	add	r1, sp, #16
 800abf8:	f7fc faa4 	bl	8007144 <_printf_i>
 800abfc:	e7e4      	b.n	800abc8 <_vfiprintf_r+0x208>
 800abfe:	bf00      	nop
 800ac00:	0800bb4c 	.word	0x0800bb4c
 800ac04:	0800bb6c 	.word	0x0800bb6c
 800ac08:	0800bb2c 	.word	0x0800bb2c
 800ac0c:	0800bd64 	.word	0x0800bd64
 800ac10:	0800bd6a 	.word	0x0800bd6a
 800ac14:	0800bd6e 	.word	0x0800bd6e
 800ac18:	08006c0d 	.word	0x08006c0d
 800ac1c:	0800a99b 	.word	0x0800a99b

0800ac20 <nan>:
 800ac20:	2000      	movs	r0, #0
 800ac22:	4901      	ldr	r1, [pc, #4]	; (800ac28 <nan+0x8>)
 800ac24:	4770      	bx	lr
 800ac26:	bf00      	nop
 800ac28:	7ff80000 	.word	0x7ff80000

0800ac2c <_sbrk_r>:
 800ac2c:	b538      	push	{r3, r4, r5, lr}
 800ac2e:	2300      	movs	r3, #0
 800ac30:	4d05      	ldr	r5, [pc, #20]	; (800ac48 <_sbrk_r+0x1c>)
 800ac32:	4604      	mov	r4, r0
 800ac34:	4608      	mov	r0, r1
 800ac36:	602b      	str	r3, [r5, #0]
 800ac38:	f7f8 f894 	bl	8002d64 <_sbrk>
 800ac3c:	1c43      	adds	r3, r0, #1
 800ac3e:	d102      	bne.n	800ac46 <_sbrk_r+0x1a>
 800ac40:	682b      	ldr	r3, [r5, #0]
 800ac42:	b103      	cbz	r3, 800ac46 <_sbrk_r+0x1a>
 800ac44:	6023      	str	r3, [r4, #0]
 800ac46:	bd38      	pop	{r3, r4, r5, pc}
 800ac48:	20000660 	.word	0x20000660

0800ac4c <__sread>:
 800ac4c:	b510      	push	{r4, lr}
 800ac4e:	460c      	mov	r4, r1
 800ac50:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ac54:	f000 fafe 	bl	800b254 <_read_r>
 800ac58:	2800      	cmp	r0, #0
 800ac5a:	bfab      	itete	ge
 800ac5c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800ac5e:	89a3      	ldrhlt	r3, [r4, #12]
 800ac60:	181b      	addge	r3, r3, r0
 800ac62:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800ac66:	bfac      	ite	ge
 800ac68:	6563      	strge	r3, [r4, #84]	; 0x54
 800ac6a:	81a3      	strhlt	r3, [r4, #12]
 800ac6c:	bd10      	pop	{r4, pc}

0800ac6e <__swrite>:
 800ac6e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ac72:	461f      	mov	r7, r3
 800ac74:	898b      	ldrh	r3, [r1, #12]
 800ac76:	4605      	mov	r5, r0
 800ac78:	05db      	lsls	r3, r3, #23
 800ac7a:	460c      	mov	r4, r1
 800ac7c:	4616      	mov	r6, r2
 800ac7e:	d505      	bpl.n	800ac8c <__swrite+0x1e>
 800ac80:	2302      	movs	r3, #2
 800ac82:	2200      	movs	r2, #0
 800ac84:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ac88:	f000 fa16 	bl	800b0b8 <_lseek_r>
 800ac8c:	89a3      	ldrh	r3, [r4, #12]
 800ac8e:	4632      	mov	r2, r6
 800ac90:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800ac94:	81a3      	strh	r3, [r4, #12]
 800ac96:	4628      	mov	r0, r5
 800ac98:	463b      	mov	r3, r7
 800ac9a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ac9e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800aca2:	f000 b88b 	b.w	800adbc <_write_r>

0800aca6 <__sseek>:
 800aca6:	b510      	push	{r4, lr}
 800aca8:	460c      	mov	r4, r1
 800acaa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800acae:	f000 fa03 	bl	800b0b8 <_lseek_r>
 800acb2:	1c43      	adds	r3, r0, #1
 800acb4:	89a3      	ldrh	r3, [r4, #12]
 800acb6:	bf15      	itete	ne
 800acb8:	6560      	strne	r0, [r4, #84]	; 0x54
 800acba:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800acbe:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800acc2:	81a3      	strheq	r3, [r4, #12]
 800acc4:	bf18      	it	ne
 800acc6:	81a3      	strhne	r3, [r4, #12]
 800acc8:	bd10      	pop	{r4, pc}

0800acca <__sclose>:
 800acca:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800acce:	f000 b913 	b.w	800aef8 <_close_r>

0800acd2 <strncmp>:
 800acd2:	4603      	mov	r3, r0
 800acd4:	b510      	push	{r4, lr}
 800acd6:	b172      	cbz	r2, 800acf6 <strncmp+0x24>
 800acd8:	3901      	subs	r1, #1
 800acda:	1884      	adds	r4, r0, r2
 800acdc:	f813 0b01 	ldrb.w	r0, [r3], #1
 800ace0:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800ace4:	4290      	cmp	r0, r2
 800ace6:	d101      	bne.n	800acec <strncmp+0x1a>
 800ace8:	42a3      	cmp	r3, r4
 800acea:	d101      	bne.n	800acf0 <strncmp+0x1e>
 800acec:	1a80      	subs	r0, r0, r2
 800acee:	bd10      	pop	{r4, pc}
 800acf0:	2800      	cmp	r0, #0
 800acf2:	d1f3      	bne.n	800acdc <strncmp+0xa>
 800acf4:	e7fa      	b.n	800acec <strncmp+0x1a>
 800acf6:	4610      	mov	r0, r2
 800acf8:	e7f9      	b.n	800acee <strncmp+0x1c>
	...

0800acfc <__swbuf_r>:
 800acfc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800acfe:	460e      	mov	r6, r1
 800ad00:	4614      	mov	r4, r2
 800ad02:	4605      	mov	r5, r0
 800ad04:	b118      	cbz	r0, 800ad0e <__swbuf_r+0x12>
 800ad06:	6983      	ldr	r3, [r0, #24]
 800ad08:	b90b      	cbnz	r3, 800ad0e <__swbuf_r+0x12>
 800ad0a:	f7fe faeb 	bl	80092e4 <__sinit>
 800ad0e:	4b21      	ldr	r3, [pc, #132]	; (800ad94 <__swbuf_r+0x98>)
 800ad10:	429c      	cmp	r4, r3
 800ad12:	d12b      	bne.n	800ad6c <__swbuf_r+0x70>
 800ad14:	686c      	ldr	r4, [r5, #4]
 800ad16:	69a3      	ldr	r3, [r4, #24]
 800ad18:	60a3      	str	r3, [r4, #8]
 800ad1a:	89a3      	ldrh	r3, [r4, #12]
 800ad1c:	071a      	lsls	r2, r3, #28
 800ad1e:	d52f      	bpl.n	800ad80 <__swbuf_r+0x84>
 800ad20:	6923      	ldr	r3, [r4, #16]
 800ad22:	b36b      	cbz	r3, 800ad80 <__swbuf_r+0x84>
 800ad24:	6923      	ldr	r3, [r4, #16]
 800ad26:	6820      	ldr	r0, [r4, #0]
 800ad28:	b2f6      	uxtb	r6, r6
 800ad2a:	1ac0      	subs	r0, r0, r3
 800ad2c:	6963      	ldr	r3, [r4, #20]
 800ad2e:	4637      	mov	r7, r6
 800ad30:	4283      	cmp	r3, r0
 800ad32:	dc04      	bgt.n	800ad3e <__swbuf_r+0x42>
 800ad34:	4621      	mov	r1, r4
 800ad36:	4628      	mov	r0, r5
 800ad38:	f000 f970 	bl	800b01c <_fflush_r>
 800ad3c:	bb30      	cbnz	r0, 800ad8c <__swbuf_r+0x90>
 800ad3e:	68a3      	ldr	r3, [r4, #8]
 800ad40:	3001      	adds	r0, #1
 800ad42:	3b01      	subs	r3, #1
 800ad44:	60a3      	str	r3, [r4, #8]
 800ad46:	6823      	ldr	r3, [r4, #0]
 800ad48:	1c5a      	adds	r2, r3, #1
 800ad4a:	6022      	str	r2, [r4, #0]
 800ad4c:	701e      	strb	r6, [r3, #0]
 800ad4e:	6963      	ldr	r3, [r4, #20]
 800ad50:	4283      	cmp	r3, r0
 800ad52:	d004      	beq.n	800ad5e <__swbuf_r+0x62>
 800ad54:	89a3      	ldrh	r3, [r4, #12]
 800ad56:	07db      	lsls	r3, r3, #31
 800ad58:	d506      	bpl.n	800ad68 <__swbuf_r+0x6c>
 800ad5a:	2e0a      	cmp	r6, #10
 800ad5c:	d104      	bne.n	800ad68 <__swbuf_r+0x6c>
 800ad5e:	4621      	mov	r1, r4
 800ad60:	4628      	mov	r0, r5
 800ad62:	f000 f95b 	bl	800b01c <_fflush_r>
 800ad66:	b988      	cbnz	r0, 800ad8c <__swbuf_r+0x90>
 800ad68:	4638      	mov	r0, r7
 800ad6a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ad6c:	4b0a      	ldr	r3, [pc, #40]	; (800ad98 <__swbuf_r+0x9c>)
 800ad6e:	429c      	cmp	r4, r3
 800ad70:	d101      	bne.n	800ad76 <__swbuf_r+0x7a>
 800ad72:	68ac      	ldr	r4, [r5, #8]
 800ad74:	e7cf      	b.n	800ad16 <__swbuf_r+0x1a>
 800ad76:	4b09      	ldr	r3, [pc, #36]	; (800ad9c <__swbuf_r+0xa0>)
 800ad78:	429c      	cmp	r4, r3
 800ad7a:	bf08      	it	eq
 800ad7c:	68ec      	ldreq	r4, [r5, #12]
 800ad7e:	e7ca      	b.n	800ad16 <__swbuf_r+0x1a>
 800ad80:	4621      	mov	r1, r4
 800ad82:	4628      	mov	r0, r5
 800ad84:	f000 f82c 	bl	800ade0 <__swsetup_r>
 800ad88:	2800      	cmp	r0, #0
 800ad8a:	d0cb      	beq.n	800ad24 <__swbuf_r+0x28>
 800ad8c:	f04f 37ff 	mov.w	r7, #4294967295
 800ad90:	e7ea      	b.n	800ad68 <__swbuf_r+0x6c>
 800ad92:	bf00      	nop
 800ad94:	0800bb4c 	.word	0x0800bb4c
 800ad98:	0800bb6c 	.word	0x0800bb6c
 800ad9c:	0800bb2c 	.word	0x0800bb2c

0800ada0 <__ascii_wctomb>:
 800ada0:	4603      	mov	r3, r0
 800ada2:	4608      	mov	r0, r1
 800ada4:	b141      	cbz	r1, 800adb8 <__ascii_wctomb+0x18>
 800ada6:	2aff      	cmp	r2, #255	; 0xff
 800ada8:	d904      	bls.n	800adb4 <__ascii_wctomb+0x14>
 800adaa:	228a      	movs	r2, #138	; 0x8a
 800adac:	f04f 30ff 	mov.w	r0, #4294967295
 800adb0:	601a      	str	r2, [r3, #0]
 800adb2:	4770      	bx	lr
 800adb4:	2001      	movs	r0, #1
 800adb6:	700a      	strb	r2, [r1, #0]
 800adb8:	4770      	bx	lr
	...

0800adbc <_write_r>:
 800adbc:	b538      	push	{r3, r4, r5, lr}
 800adbe:	4604      	mov	r4, r0
 800adc0:	4608      	mov	r0, r1
 800adc2:	4611      	mov	r1, r2
 800adc4:	2200      	movs	r2, #0
 800adc6:	4d05      	ldr	r5, [pc, #20]	; (800addc <_write_r+0x20>)
 800adc8:	602a      	str	r2, [r5, #0]
 800adca:	461a      	mov	r2, r3
 800adcc:	f7f7 ff7e 	bl	8002ccc <_write>
 800add0:	1c43      	adds	r3, r0, #1
 800add2:	d102      	bne.n	800adda <_write_r+0x1e>
 800add4:	682b      	ldr	r3, [r5, #0]
 800add6:	b103      	cbz	r3, 800adda <_write_r+0x1e>
 800add8:	6023      	str	r3, [r4, #0]
 800adda:	bd38      	pop	{r3, r4, r5, pc}
 800addc:	20000660 	.word	0x20000660

0800ade0 <__swsetup_r>:
 800ade0:	4b32      	ldr	r3, [pc, #200]	; (800aeac <__swsetup_r+0xcc>)
 800ade2:	b570      	push	{r4, r5, r6, lr}
 800ade4:	681d      	ldr	r5, [r3, #0]
 800ade6:	4606      	mov	r6, r0
 800ade8:	460c      	mov	r4, r1
 800adea:	b125      	cbz	r5, 800adf6 <__swsetup_r+0x16>
 800adec:	69ab      	ldr	r3, [r5, #24]
 800adee:	b913      	cbnz	r3, 800adf6 <__swsetup_r+0x16>
 800adf0:	4628      	mov	r0, r5
 800adf2:	f7fe fa77 	bl	80092e4 <__sinit>
 800adf6:	4b2e      	ldr	r3, [pc, #184]	; (800aeb0 <__swsetup_r+0xd0>)
 800adf8:	429c      	cmp	r4, r3
 800adfa:	d10f      	bne.n	800ae1c <__swsetup_r+0x3c>
 800adfc:	686c      	ldr	r4, [r5, #4]
 800adfe:	89a3      	ldrh	r3, [r4, #12]
 800ae00:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800ae04:	0719      	lsls	r1, r3, #28
 800ae06:	d42c      	bmi.n	800ae62 <__swsetup_r+0x82>
 800ae08:	06dd      	lsls	r5, r3, #27
 800ae0a:	d411      	bmi.n	800ae30 <__swsetup_r+0x50>
 800ae0c:	2309      	movs	r3, #9
 800ae0e:	6033      	str	r3, [r6, #0]
 800ae10:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800ae14:	f04f 30ff 	mov.w	r0, #4294967295
 800ae18:	81a3      	strh	r3, [r4, #12]
 800ae1a:	e03e      	b.n	800ae9a <__swsetup_r+0xba>
 800ae1c:	4b25      	ldr	r3, [pc, #148]	; (800aeb4 <__swsetup_r+0xd4>)
 800ae1e:	429c      	cmp	r4, r3
 800ae20:	d101      	bne.n	800ae26 <__swsetup_r+0x46>
 800ae22:	68ac      	ldr	r4, [r5, #8]
 800ae24:	e7eb      	b.n	800adfe <__swsetup_r+0x1e>
 800ae26:	4b24      	ldr	r3, [pc, #144]	; (800aeb8 <__swsetup_r+0xd8>)
 800ae28:	429c      	cmp	r4, r3
 800ae2a:	bf08      	it	eq
 800ae2c:	68ec      	ldreq	r4, [r5, #12]
 800ae2e:	e7e6      	b.n	800adfe <__swsetup_r+0x1e>
 800ae30:	0758      	lsls	r0, r3, #29
 800ae32:	d512      	bpl.n	800ae5a <__swsetup_r+0x7a>
 800ae34:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800ae36:	b141      	cbz	r1, 800ae4a <__swsetup_r+0x6a>
 800ae38:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800ae3c:	4299      	cmp	r1, r3
 800ae3e:	d002      	beq.n	800ae46 <__swsetup_r+0x66>
 800ae40:	4630      	mov	r0, r6
 800ae42:	f7ff fb5d 	bl	800a500 <_free_r>
 800ae46:	2300      	movs	r3, #0
 800ae48:	6363      	str	r3, [r4, #52]	; 0x34
 800ae4a:	89a3      	ldrh	r3, [r4, #12]
 800ae4c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800ae50:	81a3      	strh	r3, [r4, #12]
 800ae52:	2300      	movs	r3, #0
 800ae54:	6063      	str	r3, [r4, #4]
 800ae56:	6923      	ldr	r3, [r4, #16]
 800ae58:	6023      	str	r3, [r4, #0]
 800ae5a:	89a3      	ldrh	r3, [r4, #12]
 800ae5c:	f043 0308 	orr.w	r3, r3, #8
 800ae60:	81a3      	strh	r3, [r4, #12]
 800ae62:	6923      	ldr	r3, [r4, #16]
 800ae64:	b94b      	cbnz	r3, 800ae7a <__swsetup_r+0x9a>
 800ae66:	89a3      	ldrh	r3, [r4, #12]
 800ae68:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800ae6c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800ae70:	d003      	beq.n	800ae7a <__swsetup_r+0x9a>
 800ae72:	4621      	mov	r1, r4
 800ae74:	4630      	mov	r0, r6
 800ae76:	f000 f957 	bl	800b128 <__smakebuf_r>
 800ae7a:	89a0      	ldrh	r0, [r4, #12]
 800ae7c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800ae80:	f010 0301 	ands.w	r3, r0, #1
 800ae84:	d00a      	beq.n	800ae9c <__swsetup_r+0xbc>
 800ae86:	2300      	movs	r3, #0
 800ae88:	60a3      	str	r3, [r4, #8]
 800ae8a:	6963      	ldr	r3, [r4, #20]
 800ae8c:	425b      	negs	r3, r3
 800ae8e:	61a3      	str	r3, [r4, #24]
 800ae90:	6923      	ldr	r3, [r4, #16]
 800ae92:	b943      	cbnz	r3, 800aea6 <__swsetup_r+0xc6>
 800ae94:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800ae98:	d1ba      	bne.n	800ae10 <__swsetup_r+0x30>
 800ae9a:	bd70      	pop	{r4, r5, r6, pc}
 800ae9c:	0781      	lsls	r1, r0, #30
 800ae9e:	bf58      	it	pl
 800aea0:	6963      	ldrpl	r3, [r4, #20]
 800aea2:	60a3      	str	r3, [r4, #8]
 800aea4:	e7f4      	b.n	800ae90 <__swsetup_r+0xb0>
 800aea6:	2000      	movs	r0, #0
 800aea8:	e7f7      	b.n	800ae9a <__swsetup_r+0xba>
 800aeaa:	bf00      	nop
 800aeac:	20000010 	.word	0x20000010
 800aeb0:	0800bb4c 	.word	0x0800bb4c
 800aeb4:	0800bb6c 	.word	0x0800bb6c
 800aeb8:	0800bb2c 	.word	0x0800bb2c

0800aebc <__assert_func>:
 800aebc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800aebe:	4614      	mov	r4, r2
 800aec0:	461a      	mov	r2, r3
 800aec2:	4b09      	ldr	r3, [pc, #36]	; (800aee8 <__assert_func+0x2c>)
 800aec4:	4605      	mov	r5, r0
 800aec6:	681b      	ldr	r3, [r3, #0]
 800aec8:	68d8      	ldr	r0, [r3, #12]
 800aeca:	b14c      	cbz	r4, 800aee0 <__assert_func+0x24>
 800aecc:	4b07      	ldr	r3, [pc, #28]	; (800aeec <__assert_func+0x30>)
 800aece:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800aed2:	9100      	str	r1, [sp, #0]
 800aed4:	462b      	mov	r3, r5
 800aed6:	4906      	ldr	r1, [pc, #24]	; (800aef0 <__assert_func+0x34>)
 800aed8:	f000 f8dc 	bl	800b094 <fiprintf>
 800aedc:	f000 f9cc 	bl	800b278 <abort>
 800aee0:	4b04      	ldr	r3, [pc, #16]	; (800aef4 <__assert_func+0x38>)
 800aee2:	461c      	mov	r4, r3
 800aee4:	e7f3      	b.n	800aece <__assert_func+0x12>
 800aee6:	bf00      	nop
 800aee8:	20000010 	.word	0x20000010
 800aeec:	0800bd75 	.word	0x0800bd75
 800aef0:	0800bd82 	.word	0x0800bd82
 800aef4:	0800bdb0 	.word	0x0800bdb0

0800aef8 <_close_r>:
 800aef8:	b538      	push	{r3, r4, r5, lr}
 800aefa:	2300      	movs	r3, #0
 800aefc:	4d05      	ldr	r5, [pc, #20]	; (800af14 <_close_r+0x1c>)
 800aefe:	4604      	mov	r4, r0
 800af00:	4608      	mov	r0, r1
 800af02:	602b      	str	r3, [r5, #0]
 800af04:	f7f7 fefe 	bl	8002d04 <_close>
 800af08:	1c43      	adds	r3, r0, #1
 800af0a:	d102      	bne.n	800af12 <_close_r+0x1a>
 800af0c:	682b      	ldr	r3, [r5, #0]
 800af0e:	b103      	cbz	r3, 800af12 <_close_r+0x1a>
 800af10:	6023      	str	r3, [r4, #0]
 800af12:	bd38      	pop	{r3, r4, r5, pc}
 800af14:	20000660 	.word	0x20000660

0800af18 <__sflush_r>:
 800af18:	898a      	ldrh	r2, [r1, #12]
 800af1a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800af1c:	4605      	mov	r5, r0
 800af1e:	0710      	lsls	r0, r2, #28
 800af20:	460c      	mov	r4, r1
 800af22:	d457      	bmi.n	800afd4 <__sflush_r+0xbc>
 800af24:	684b      	ldr	r3, [r1, #4]
 800af26:	2b00      	cmp	r3, #0
 800af28:	dc04      	bgt.n	800af34 <__sflush_r+0x1c>
 800af2a:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800af2c:	2b00      	cmp	r3, #0
 800af2e:	dc01      	bgt.n	800af34 <__sflush_r+0x1c>
 800af30:	2000      	movs	r0, #0
 800af32:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800af34:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800af36:	2e00      	cmp	r6, #0
 800af38:	d0fa      	beq.n	800af30 <__sflush_r+0x18>
 800af3a:	2300      	movs	r3, #0
 800af3c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800af40:	682f      	ldr	r7, [r5, #0]
 800af42:	602b      	str	r3, [r5, #0]
 800af44:	d032      	beq.n	800afac <__sflush_r+0x94>
 800af46:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800af48:	89a3      	ldrh	r3, [r4, #12]
 800af4a:	075a      	lsls	r2, r3, #29
 800af4c:	d505      	bpl.n	800af5a <__sflush_r+0x42>
 800af4e:	6863      	ldr	r3, [r4, #4]
 800af50:	1ac0      	subs	r0, r0, r3
 800af52:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800af54:	b10b      	cbz	r3, 800af5a <__sflush_r+0x42>
 800af56:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800af58:	1ac0      	subs	r0, r0, r3
 800af5a:	2300      	movs	r3, #0
 800af5c:	4602      	mov	r2, r0
 800af5e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800af60:	4628      	mov	r0, r5
 800af62:	6a21      	ldr	r1, [r4, #32]
 800af64:	47b0      	blx	r6
 800af66:	1c43      	adds	r3, r0, #1
 800af68:	89a3      	ldrh	r3, [r4, #12]
 800af6a:	d106      	bne.n	800af7a <__sflush_r+0x62>
 800af6c:	6829      	ldr	r1, [r5, #0]
 800af6e:	291d      	cmp	r1, #29
 800af70:	d82c      	bhi.n	800afcc <__sflush_r+0xb4>
 800af72:	4a29      	ldr	r2, [pc, #164]	; (800b018 <__sflush_r+0x100>)
 800af74:	40ca      	lsrs	r2, r1
 800af76:	07d6      	lsls	r6, r2, #31
 800af78:	d528      	bpl.n	800afcc <__sflush_r+0xb4>
 800af7a:	2200      	movs	r2, #0
 800af7c:	6062      	str	r2, [r4, #4]
 800af7e:	6922      	ldr	r2, [r4, #16]
 800af80:	04d9      	lsls	r1, r3, #19
 800af82:	6022      	str	r2, [r4, #0]
 800af84:	d504      	bpl.n	800af90 <__sflush_r+0x78>
 800af86:	1c42      	adds	r2, r0, #1
 800af88:	d101      	bne.n	800af8e <__sflush_r+0x76>
 800af8a:	682b      	ldr	r3, [r5, #0]
 800af8c:	b903      	cbnz	r3, 800af90 <__sflush_r+0x78>
 800af8e:	6560      	str	r0, [r4, #84]	; 0x54
 800af90:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800af92:	602f      	str	r7, [r5, #0]
 800af94:	2900      	cmp	r1, #0
 800af96:	d0cb      	beq.n	800af30 <__sflush_r+0x18>
 800af98:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800af9c:	4299      	cmp	r1, r3
 800af9e:	d002      	beq.n	800afa6 <__sflush_r+0x8e>
 800afa0:	4628      	mov	r0, r5
 800afa2:	f7ff faad 	bl	800a500 <_free_r>
 800afa6:	2000      	movs	r0, #0
 800afa8:	6360      	str	r0, [r4, #52]	; 0x34
 800afaa:	e7c2      	b.n	800af32 <__sflush_r+0x1a>
 800afac:	6a21      	ldr	r1, [r4, #32]
 800afae:	2301      	movs	r3, #1
 800afb0:	4628      	mov	r0, r5
 800afb2:	47b0      	blx	r6
 800afb4:	1c41      	adds	r1, r0, #1
 800afb6:	d1c7      	bne.n	800af48 <__sflush_r+0x30>
 800afb8:	682b      	ldr	r3, [r5, #0]
 800afba:	2b00      	cmp	r3, #0
 800afbc:	d0c4      	beq.n	800af48 <__sflush_r+0x30>
 800afbe:	2b1d      	cmp	r3, #29
 800afc0:	d001      	beq.n	800afc6 <__sflush_r+0xae>
 800afc2:	2b16      	cmp	r3, #22
 800afc4:	d101      	bne.n	800afca <__sflush_r+0xb2>
 800afc6:	602f      	str	r7, [r5, #0]
 800afc8:	e7b2      	b.n	800af30 <__sflush_r+0x18>
 800afca:	89a3      	ldrh	r3, [r4, #12]
 800afcc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800afd0:	81a3      	strh	r3, [r4, #12]
 800afd2:	e7ae      	b.n	800af32 <__sflush_r+0x1a>
 800afd4:	690f      	ldr	r7, [r1, #16]
 800afd6:	2f00      	cmp	r7, #0
 800afd8:	d0aa      	beq.n	800af30 <__sflush_r+0x18>
 800afda:	0793      	lsls	r3, r2, #30
 800afdc:	bf18      	it	ne
 800afde:	2300      	movne	r3, #0
 800afe0:	680e      	ldr	r6, [r1, #0]
 800afe2:	bf08      	it	eq
 800afe4:	694b      	ldreq	r3, [r1, #20]
 800afe6:	1bf6      	subs	r6, r6, r7
 800afe8:	600f      	str	r7, [r1, #0]
 800afea:	608b      	str	r3, [r1, #8]
 800afec:	2e00      	cmp	r6, #0
 800afee:	dd9f      	ble.n	800af30 <__sflush_r+0x18>
 800aff0:	4633      	mov	r3, r6
 800aff2:	463a      	mov	r2, r7
 800aff4:	4628      	mov	r0, r5
 800aff6:	6a21      	ldr	r1, [r4, #32]
 800aff8:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 800affc:	47e0      	blx	ip
 800affe:	2800      	cmp	r0, #0
 800b000:	dc06      	bgt.n	800b010 <__sflush_r+0xf8>
 800b002:	89a3      	ldrh	r3, [r4, #12]
 800b004:	f04f 30ff 	mov.w	r0, #4294967295
 800b008:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b00c:	81a3      	strh	r3, [r4, #12]
 800b00e:	e790      	b.n	800af32 <__sflush_r+0x1a>
 800b010:	4407      	add	r7, r0
 800b012:	1a36      	subs	r6, r6, r0
 800b014:	e7ea      	b.n	800afec <__sflush_r+0xd4>
 800b016:	bf00      	nop
 800b018:	20400001 	.word	0x20400001

0800b01c <_fflush_r>:
 800b01c:	b538      	push	{r3, r4, r5, lr}
 800b01e:	690b      	ldr	r3, [r1, #16]
 800b020:	4605      	mov	r5, r0
 800b022:	460c      	mov	r4, r1
 800b024:	b913      	cbnz	r3, 800b02c <_fflush_r+0x10>
 800b026:	2500      	movs	r5, #0
 800b028:	4628      	mov	r0, r5
 800b02a:	bd38      	pop	{r3, r4, r5, pc}
 800b02c:	b118      	cbz	r0, 800b036 <_fflush_r+0x1a>
 800b02e:	6983      	ldr	r3, [r0, #24]
 800b030:	b90b      	cbnz	r3, 800b036 <_fflush_r+0x1a>
 800b032:	f7fe f957 	bl	80092e4 <__sinit>
 800b036:	4b14      	ldr	r3, [pc, #80]	; (800b088 <_fflush_r+0x6c>)
 800b038:	429c      	cmp	r4, r3
 800b03a:	d11b      	bne.n	800b074 <_fflush_r+0x58>
 800b03c:	686c      	ldr	r4, [r5, #4]
 800b03e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b042:	2b00      	cmp	r3, #0
 800b044:	d0ef      	beq.n	800b026 <_fflush_r+0xa>
 800b046:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800b048:	07d0      	lsls	r0, r2, #31
 800b04a:	d404      	bmi.n	800b056 <_fflush_r+0x3a>
 800b04c:	0599      	lsls	r1, r3, #22
 800b04e:	d402      	bmi.n	800b056 <_fflush_r+0x3a>
 800b050:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b052:	f7fe fd50 	bl	8009af6 <__retarget_lock_acquire_recursive>
 800b056:	4628      	mov	r0, r5
 800b058:	4621      	mov	r1, r4
 800b05a:	f7ff ff5d 	bl	800af18 <__sflush_r>
 800b05e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800b060:	4605      	mov	r5, r0
 800b062:	07da      	lsls	r2, r3, #31
 800b064:	d4e0      	bmi.n	800b028 <_fflush_r+0xc>
 800b066:	89a3      	ldrh	r3, [r4, #12]
 800b068:	059b      	lsls	r3, r3, #22
 800b06a:	d4dd      	bmi.n	800b028 <_fflush_r+0xc>
 800b06c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b06e:	f7fe fd43 	bl	8009af8 <__retarget_lock_release_recursive>
 800b072:	e7d9      	b.n	800b028 <_fflush_r+0xc>
 800b074:	4b05      	ldr	r3, [pc, #20]	; (800b08c <_fflush_r+0x70>)
 800b076:	429c      	cmp	r4, r3
 800b078:	d101      	bne.n	800b07e <_fflush_r+0x62>
 800b07a:	68ac      	ldr	r4, [r5, #8]
 800b07c:	e7df      	b.n	800b03e <_fflush_r+0x22>
 800b07e:	4b04      	ldr	r3, [pc, #16]	; (800b090 <_fflush_r+0x74>)
 800b080:	429c      	cmp	r4, r3
 800b082:	bf08      	it	eq
 800b084:	68ec      	ldreq	r4, [r5, #12]
 800b086:	e7da      	b.n	800b03e <_fflush_r+0x22>
 800b088:	0800bb4c 	.word	0x0800bb4c
 800b08c:	0800bb6c 	.word	0x0800bb6c
 800b090:	0800bb2c 	.word	0x0800bb2c

0800b094 <fiprintf>:
 800b094:	b40e      	push	{r1, r2, r3}
 800b096:	b503      	push	{r0, r1, lr}
 800b098:	4601      	mov	r1, r0
 800b09a:	ab03      	add	r3, sp, #12
 800b09c:	4805      	ldr	r0, [pc, #20]	; (800b0b4 <fiprintf+0x20>)
 800b09e:	f853 2b04 	ldr.w	r2, [r3], #4
 800b0a2:	6800      	ldr	r0, [r0, #0]
 800b0a4:	9301      	str	r3, [sp, #4]
 800b0a6:	f7ff fc8b 	bl	800a9c0 <_vfiprintf_r>
 800b0aa:	b002      	add	sp, #8
 800b0ac:	f85d eb04 	ldr.w	lr, [sp], #4
 800b0b0:	b003      	add	sp, #12
 800b0b2:	4770      	bx	lr
 800b0b4:	20000010 	.word	0x20000010

0800b0b8 <_lseek_r>:
 800b0b8:	b538      	push	{r3, r4, r5, lr}
 800b0ba:	4604      	mov	r4, r0
 800b0bc:	4608      	mov	r0, r1
 800b0be:	4611      	mov	r1, r2
 800b0c0:	2200      	movs	r2, #0
 800b0c2:	4d05      	ldr	r5, [pc, #20]	; (800b0d8 <_lseek_r+0x20>)
 800b0c4:	602a      	str	r2, [r5, #0]
 800b0c6:	461a      	mov	r2, r3
 800b0c8:	f7f7 fe40 	bl	8002d4c <_lseek>
 800b0cc:	1c43      	adds	r3, r0, #1
 800b0ce:	d102      	bne.n	800b0d6 <_lseek_r+0x1e>
 800b0d0:	682b      	ldr	r3, [r5, #0]
 800b0d2:	b103      	cbz	r3, 800b0d6 <_lseek_r+0x1e>
 800b0d4:	6023      	str	r3, [r4, #0]
 800b0d6:	bd38      	pop	{r3, r4, r5, pc}
 800b0d8:	20000660 	.word	0x20000660

0800b0dc <__swhatbuf_r>:
 800b0dc:	b570      	push	{r4, r5, r6, lr}
 800b0de:	460e      	mov	r6, r1
 800b0e0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b0e4:	4614      	mov	r4, r2
 800b0e6:	2900      	cmp	r1, #0
 800b0e8:	461d      	mov	r5, r3
 800b0ea:	b096      	sub	sp, #88	; 0x58
 800b0ec:	da08      	bge.n	800b100 <__swhatbuf_r+0x24>
 800b0ee:	2200      	movs	r2, #0
 800b0f0:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800b0f4:	602a      	str	r2, [r5, #0]
 800b0f6:	061a      	lsls	r2, r3, #24
 800b0f8:	d410      	bmi.n	800b11c <__swhatbuf_r+0x40>
 800b0fa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b0fe:	e00e      	b.n	800b11e <__swhatbuf_r+0x42>
 800b100:	466a      	mov	r2, sp
 800b102:	f000 f8c1 	bl	800b288 <_fstat_r>
 800b106:	2800      	cmp	r0, #0
 800b108:	dbf1      	blt.n	800b0ee <__swhatbuf_r+0x12>
 800b10a:	9a01      	ldr	r2, [sp, #4]
 800b10c:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800b110:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800b114:	425a      	negs	r2, r3
 800b116:	415a      	adcs	r2, r3
 800b118:	602a      	str	r2, [r5, #0]
 800b11a:	e7ee      	b.n	800b0fa <__swhatbuf_r+0x1e>
 800b11c:	2340      	movs	r3, #64	; 0x40
 800b11e:	2000      	movs	r0, #0
 800b120:	6023      	str	r3, [r4, #0]
 800b122:	b016      	add	sp, #88	; 0x58
 800b124:	bd70      	pop	{r4, r5, r6, pc}
	...

0800b128 <__smakebuf_r>:
 800b128:	898b      	ldrh	r3, [r1, #12]
 800b12a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800b12c:	079d      	lsls	r5, r3, #30
 800b12e:	4606      	mov	r6, r0
 800b130:	460c      	mov	r4, r1
 800b132:	d507      	bpl.n	800b144 <__smakebuf_r+0x1c>
 800b134:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800b138:	6023      	str	r3, [r4, #0]
 800b13a:	6123      	str	r3, [r4, #16]
 800b13c:	2301      	movs	r3, #1
 800b13e:	6163      	str	r3, [r4, #20]
 800b140:	b002      	add	sp, #8
 800b142:	bd70      	pop	{r4, r5, r6, pc}
 800b144:	466a      	mov	r2, sp
 800b146:	ab01      	add	r3, sp, #4
 800b148:	f7ff ffc8 	bl	800b0dc <__swhatbuf_r>
 800b14c:	9900      	ldr	r1, [sp, #0]
 800b14e:	4605      	mov	r5, r0
 800b150:	4630      	mov	r0, r6
 800b152:	f7ff fa3d 	bl	800a5d0 <_malloc_r>
 800b156:	b948      	cbnz	r0, 800b16c <__smakebuf_r+0x44>
 800b158:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b15c:	059a      	lsls	r2, r3, #22
 800b15e:	d4ef      	bmi.n	800b140 <__smakebuf_r+0x18>
 800b160:	f023 0303 	bic.w	r3, r3, #3
 800b164:	f043 0302 	orr.w	r3, r3, #2
 800b168:	81a3      	strh	r3, [r4, #12]
 800b16a:	e7e3      	b.n	800b134 <__smakebuf_r+0xc>
 800b16c:	4b0d      	ldr	r3, [pc, #52]	; (800b1a4 <__smakebuf_r+0x7c>)
 800b16e:	62b3      	str	r3, [r6, #40]	; 0x28
 800b170:	89a3      	ldrh	r3, [r4, #12]
 800b172:	6020      	str	r0, [r4, #0]
 800b174:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b178:	81a3      	strh	r3, [r4, #12]
 800b17a:	9b00      	ldr	r3, [sp, #0]
 800b17c:	6120      	str	r0, [r4, #16]
 800b17e:	6163      	str	r3, [r4, #20]
 800b180:	9b01      	ldr	r3, [sp, #4]
 800b182:	b15b      	cbz	r3, 800b19c <__smakebuf_r+0x74>
 800b184:	4630      	mov	r0, r6
 800b186:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b18a:	f000 f88f 	bl	800b2ac <_isatty_r>
 800b18e:	b128      	cbz	r0, 800b19c <__smakebuf_r+0x74>
 800b190:	89a3      	ldrh	r3, [r4, #12]
 800b192:	f023 0303 	bic.w	r3, r3, #3
 800b196:	f043 0301 	orr.w	r3, r3, #1
 800b19a:	81a3      	strh	r3, [r4, #12]
 800b19c:	89a0      	ldrh	r0, [r4, #12]
 800b19e:	4305      	orrs	r5, r0
 800b1a0:	81a5      	strh	r5, [r4, #12]
 800b1a2:	e7cd      	b.n	800b140 <__smakebuf_r+0x18>
 800b1a4:	0800927d 	.word	0x0800927d

0800b1a8 <memmove>:
 800b1a8:	4288      	cmp	r0, r1
 800b1aa:	b510      	push	{r4, lr}
 800b1ac:	eb01 0402 	add.w	r4, r1, r2
 800b1b0:	d902      	bls.n	800b1b8 <memmove+0x10>
 800b1b2:	4284      	cmp	r4, r0
 800b1b4:	4623      	mov	r3, r4
 800b1b6:	d807      	bhi.n	800b1c8 <memmove+0x20>
 800b1b8:	1e43      	subs	r3, r0, #1
 800b1ba:	42a1      	cmp	r1, r4
 800b1bc:	d008      	beq.n	800b1d0 <memmove+0x28>
 800b1be:	f811 2b01 	ldrb.w	r2, [r1], #1
 800b1c2:	f803 2f01 	strb.w	r2, [r3, #1]!
 800b1c6:	e7f8      	b.n	800b1ba <memmove+0x12>
 800b1c8:	4601      	mov	r1, r0
 800b1ca:	4402      	add	r2, r0
 800b1cc:	428a      	cmp	r2, r1
 800b1ce:	d100      	bne.n	800b1d2 <memmove+0x2a>
 800b1d0:	bd10      	pop	{r4, pc}
 800b1d2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800b1d6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800b1da:	e7f7      	b.n	800b1cc <memmove+0x24>

0800b1dc <__malloc_lock>:
 800b1dc:	4801      	ldr	r0, [pc, #4]	; (800b1e4 <__malloc_lock+0x8>)
 800b1de:	f7fe bc8a 	b.w	8009af6 <__retarget_lock_acquire_recursive>
 800b1e2:	bf00      	nop
 800b1e4:	20000654 	.word	0x20000654

0800b1e8 <__malloc_unlock>:
 800b1e8:	4801      	ldr	r0, [pc, #4]	; (800b1f0 <__malloc_unlock+0x8>)
 800b1ea:	f7fe bc85 	b.w	8009af8 <__retarget_lock_release_recursive>
 800b1ee:	bf00      	nop
 800b1f0:	20000654 	.word	0x20000654

0800b1f4 <_realloc_r>:
 800b1f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b1f8:	4680      	mov	r8, r0
 800b1fa:	4614      	mov	r4, r2
 800b1fc:	460e      	mov	r6, r1
 800b1fe:	b921      	cbnz	r1, 800b20a <_realloc_r+0x16>
 800b200:	4611      	mov	r1, r2
 800b202:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b206:	f7ff b9e3 	b.w	800a5d0 <_malloc_r>
 800b20a:	b92a      	cbnz	r2, 800b218 <_realloc_r+0x24>
 800b20c:	f7ff f978 	bl	800a500 <_free_r>
 800b210:	4625      	mov	r5, r4
 800b212:	4628      	mov	r0, r5
 800b214:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b218:	f000 f858 	bl	800b2cc <_malloc_usable_size_r>
 800b21c:	4284      	cmp	r4, r0
 800b21e:	4607      	mov	r7, r0
 800b220:	d802      	bhi.n	800b228 <_realloc_r+0x34>
 800b222:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800b226:	d812      	bhi.n	800b24e <_realloc_r+0x5a>
 800b228:	4621      	mov	r1, r4
 800b22a:	4640      	mov	r0, r8
 800b22c:	f7ff f9d0 	bl	800a5d0 <_malloc_r>
 800b230:	4605      	mov	r5, r0
 800b232:	2800      	cmp	r0, #0
 800b234:	d0ed      	beq.n	800b212 <_realloc_r+0x1e>
 800b236:	42bc      	cmp	r4, r7
 800b238:	4622      	mov	r2, r4
 800b23a:	4631      	mov	r1, r6
 800b23c:	bf28      	it	cs
 800b23e:	463a      	movcs	r2, r7
 800b240:	f7fe fc84 	bl	8009b4c <memcpy>
 800b244:	4631      	mov	r1, r6
 800b246:	4640      	mov	r0, r8
 800b248:	f7ff f95a 	bl	800a500 <_free_r>
 800b24c:	e7e1      	b.n	800b212 <_realloc_r+0x1e>
 800b24e:	4635      	mov	r5, r6
 800b250:	e7df      	b.n	800b212 <_realloc_r+0x1e>
	...

0800b254 <_read_r>:
 800b254:	b538      	push	{r3, r4, r5, lr}
 800b256:	4604      	mov	r4, r0
 800b258:	4608      	mov	r0, r1
 800b25a:	4611      	mov	r1, r2
 800b25c:	2200      	movs	r2, #0
 800b25e:	4d05      	ldr	r5, [pc, #20]	; (800b274 <_read_r+0x20>)
 800b260:	602a      	str	r2, [r5, #0]
 800b262:	461a      	mov	r2, r3
 800b264:	f7f7 fd15 	bl	8002c92 <_read>
 800b268:	1c43      	adds	r3, r0, #1
 800b26a:	d102      	bne.n	800b272 <_read_r+0x1e>
 800b26c:	682b      	ldr	r3, [r5, #0]
 800b26e:	b103      	cbz	r3, 800b272 <_read_r+0x1e>
 800b270:	6023      	str	r3, [r4, #0]
 800b272:	bd38      	pop	{r3, r4, r5, pc}
 800b274:	20000660 	.word	0x20000660

0800b278 <abort>:
 800b278:	2006      	movs	r0, #6
 800b27a:	b508      	push	{r3, lr}
 800b27c:	f000 f856 	bl	800b32c <raise>
 800b280:	2001      	movs	r0, #1
 800b282:	f7f7 fcfc 	bl	8002c7e <_exit>
	...

0800b288 <_fstat_r>:
 800b288:	b538      	push	{r3, r4, r5, lr}
 800b28a:	2300      	movs	r3, #0
 800b28c:	4d06      	ldr	r5, [pc, #24]	; (800b2a8 <_fstat_r+0x20>)
 800b28e:	4604      	mov	r4, r0
 800b290:	4608      	mov	r0, r1
 800b292:	4611      	mov	r1, r2
 800b294:	602b      	str	r3, [r5, #0]
 800b296:	f7f7 fd40 	bl	8002d1a <_fstat>
 800b29a:	1c43      	adds	r3, r0, #1
 800b29c:	d102      	bne.n	800b2a4 <_fstat_r+0x1c>
 800b29e:	682b      	ldr	r3, [r5, #0]
 800b2a0:	b103      	cbz	r3, 800b2a4 <_fstat_r+0x1c>
 800b2a2:	6023      	str	r3, [r4, #0]
 800b2a4:	bd38      	pop	{r3, r4, r5, pc}
 800b2a6:	bf00      	nop
 800b2a8:	20000660 	.word	0x20000660

0800b2ac <_isatty_r>:
 800b2ac:	b538      	push	{r3, r4, r5, lr}
 800b2ae:	2300      	movs	r3, #0
 800b2b0:	4d05      	ldr	r5, [pc, #20]	; (800b2c8 <_isatty_r+0x1c>)
 800b2b2:	4604      	mov	r4, r0
 800b2b4:	4608      	mov	r0, r1
 800b2b6:	602b      	str	r3, [r5, #0]
 800b2b8:	f7f7 fd3e 	bl	8002d38 <_isatty>
 800b2bc:	1c43      	adds	r3, r0, #1
 800b2be:	d102      	bne.n	800b2c6 <_isatty_r+0x1a>
 800b2c0:	682b      	ldr	r3, [r5, #0]
 800b2c2:	b103      	cbz	r3, 800b2c6 <_isatty_r+0x1a>
 800b2c4:	6023      	str	r3, [r4, #0]
 800b2c6:	bd38      	pop	{r3, r4, r5, pc}
 800b2c8:	20000660 	.word	0x20000660

0800b2cc <_malloc_usable_size_r>:
 800b2cc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b2d0:	1f18      	subs	r0, r3, #4
 800b2d2:	2b00      	cmp	r3, #0
 800b2d4:	bfbc      	itt	lt
 800b2d6:	580b      	ldrlt	r3, [r1, r0]
 800b2d8:	18c0      	addlt	r0, r0, r3
 800b2da:	4770      	bx	lr

0800b2dc <_raise_r>:
 800b2dc:	291f      	cmp	r1, #31
 800b2de:	b538      	push	{r3, r4, r5, lr}
 800b2e0:	4604      	mov	r4, r0
 800b2e2:	460d      	mov	r5, r1
 800b2e4:	d904      	bls.n	800b2f0 <_raise_r+0x14>
 800b2e6:	2316      	movs	r3, #22
 800b2e8:	6003      	str	r3, [r0, #0]
 800b2ea:	f04f 30ff 	mov.w	r0, #4294967295
 800b2ee:	bd38      	pop	{r3, r4, r5, pc}
 800b2f0:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800b2f2:	b112      	cbz	r2, 800b2fa <_raise_r+0x1e>
 800b2f4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800b2f8:	b94b      	cbnz	r3, 800b30e <_raise_r+0x32>
 800b2fa:	4620      	mov	r0, r4
 800b2fc:	f000 f830 	bl	800b360 <_getpid_r>
 800b300:	462a      	mov	r2, r5
 800b302:	4601      	mov	r1, r0
 800b304:	4620      	mov	r0, r4
 800b306:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b30a:	f000 b817 	b.w	800b33c <_kill_r>
 800b30e:	2b01      	cmp	r3, #1
 800b310:	d00a      	beq.n	800b328 <_raise_r+0x4c>
 800b312:	1c59      	adds	r1, r3, #1
 800b314:	d103      	bne.n	800b31e <_raise_r+0x42>
 800b316:	2316      	movs	r3, #22
 800b318:	6003      	str	r3, [r0, #0]
 800b31a:	2001      	movs	r0, #1
 800b31c:	e7e7      	b.n	800b2ee <_raise_r+0x12>
 800b31e:	2400      	movs	r4, #0
 800b320:	4628      	mov	r0, r5
 800b322:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800b326:	4798      	blx	r3
 800b328:	2000      	movs	r0, #0
 800b32a:	e7e0      	b.n	800b2ee <_raise_r+0x12>

0800b32c <raise>:
 800b32c:	4b02      	ldr	r3, [pc, #8]	; (800b338 <raise+0xc>)
 800b32e:	4601      	mov	r1, r0
 800b330:	6818      	ldr	r0, [r3, #0]
 800b332:	f7ff bfd3 	b.w	800b2dc <_raise_r>
 800b336:	bf00      	nop
 800b338:	20000010 	.word	0x20000010

0800b33c <_kill_r>:
 800b33c:	b538      	push	{r3, r4, r5, lr}
 800b33e:	2300      	movs	r3, #0
 800b340:	4d06      	ldr	r5, [pc, #24]	; (800b35c <_kill_r+0x20>)
 800b342:	4604      	mov	r4, r0
 800b344:	4608      	mov	r0, r1
 800b346:	4611      	mov	r1, r2
 800b348:	602b      	str	r3, [r5, #0]
 800b34a:	f7f7 fc88 	bl	8002c5e <_kill>
 800b34e:	1c43      	adds	r3, r0, #1
 800b350:	d102      	bne.n	800b358 <_kill_r+0x1c>
 800b352:	682b      	ldr	r3, [r5, #0]
 800b354:	b103      	cbz	r3, 800b358 <_kill_r+0x1c>
 800b356:	6023      	str	r3, [r4, #0]
 800b358:	bd38      	pop	{r3, r4, r5, pc}
 800b35a:	bf00      	nop
 800b35c:	20000660 	.word	0x20000660

0800b360 <_getpid_r>:
 800b360:	f7f7 bc76 	b.w	8002c50 <_getpid>
 800b364:	0000      	movs	r0, r0
	...

0800b368 <atan>:
 800b368:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b36c:	4bb6      	ldr	r3, [pc, #728]	; (800b648 <atan+0x2e0>)
 800b36e:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 800b372:	429e      	cmp	r6, r3
 800b374:	4604      	mov	r4, r0
 800b376:	460d      	mov	r5, r1
 800b378:	468b      	mov	fp, r1
 800b37a:	dd17      	ble.n	800b3ac <atan+0x44>
 800b37c:	4bb3      	ldr	r3, [pc, #716]	; (800b64c <atan+0x2e4>)
 800b37e:	429e      	cmp	r6, r3
 800b380:	dc01      	bgt.n	800b386 <atan+0x1e>
 800b382:	d109      	bne.n	800b398 <atan+0x30>
 800b384:	b140      	cbz	r0, 800b398 <atan+0x30>
 800b386:	4622      	mov	r2, r4
 800b388:	462b      	mov	r3, r5
 800b38a:	4620      	mov	r0, r4
 800b38c:	4629      	mov	r1, r5
 800b38e:	f7f4 feed 	bl	800016c <__adddf3>
 800b392:	4604      	mov	r4, r0
 800b394:	460d      	mov	r5, r1
 800b396:	e005      	b.n	800b3a4 <atan+0x3c>
 800b398:	f1bb 0f00 	cmp.w	fp, #0
 800b39c:	4cac      	ldr	r4, [pc, #688]	; (800b650 <atan+0x2e8>)
 800b39e:	f300 8121 	bgt.w	800b5e4 <atan+0x27c>
 800b3a2:	4dac      	ldr	r5, [pc, #688]	; (800b654 <atan+0x2ec>)
 800b3a4:	4620      	mov	r0, r4
 800b3a6:	4629      	mov	r1, r5
 800b3a8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b3ac:	4baa      	ldr	r3, [pc, #680]	; (800b658 <atan+0x2f0>)
 800b3ae:	429e      	cmp	r6, r3
 800b3b0:	dc11      	bgt.n	800b3d6 <atan+0x6e>
 800b3b2:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 800b3b6:	429e      	cmp	r6, r3
 800b3b8:	dc0a      	bgt.n	800b3d0 <atan+0x68>
 800b3ba:	a38b      	add	r3, pc, #556	; (adr r3, 800b5e8 <atan+0x280>)
 800b3bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b3c0:	f7f4 fed4 	bl	800016c <__adddf3>
 800b3c4:	2200      	movs	r2, #0
 800b3c6:	4ba5      	ldr	r3, [pc, #660]	; (800b65c <atan+0x2f4>)
 800b3c8:	f7f5 fb16 	bl	80009f8 <__aeabi_dcmpgt>
 800b3cc:	2800      	cmp	r0, #0
 800b3ce:	d1e9      	bne.n	800b3a4 <atan+0x3c>
 800b3d0:	f04f 3aff 	mov.w	sl, #4294967295
 800b3d4:	e027      	b.n	800b426 <atan+0xbe>
 800b3d6:	f000 f951 	bl	800b67c <fabs>
 800b3da:	4ba1      	ldr	r3, [pc, #644]	; (800b660 <atan+0x2f8>)
 800b3dc:	4604      	mov	r4, r0
 800b3de:	429e      	cmp	r6, r3
 800b3e0:	460d      	mov	r5, r1
 800b3e2:	f300 80b8 	bgt.w	800b556 <atan+0x1ee>
 800b3e6:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 800b3ea:	429e      	cmp	r6, r3
 800b3ec:	f300 809c 	bgt.w	800b528 <atan+0x1c0>
 800b3f0:	4602      	mov	r2, r0
 800b3f2:	460b      	mov	r3, r1
 800b3f4:	f7f4 feba 	bl	800016c <__adddf3>
 800b3f8:	2200      	movs	r2, #0
 800b3fa:	4b98      	ldr	r3, [pc, #608]	; (800b65c <atan+0x2f4>)
 800b3fc:	f7f4 feb4 	bl	8000168 <__aeabi_dsub>
 800b400:	2200      	movs	r2, #0
 800b402:	4606      	mov	r6, r0
 800b404:	460f      	mov	r7, r1
 800b406:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800b40a:	4620      	mov	r0, r4
 800b40c:	4629      	mov	r1, r5
 800b40e:	f7f4 fead 	bl	800016c <__adddf3>
 800b412:	4602      	mov	r2, r0
 800b414:	460b      	mov	r3, r1
 800b416:	4630      	mov	r0, r6
 800b418:	4639      	mov	r1, r7
 800b41a:	f7f5 f987 	bl	800072c <__aeabi_ddiv>
 800b41e:	f04f 0a00 	mov.w	sl, #0
 800b422:	4604      	mov	r4, r0
 800b424:	460d      	mov	r5, r1
 800b426:	4622      	mov	r2, r4
 800b428:	462b      	mov	r3, r5
 800b42a:	4620      	mov	r0, r4
 800b42c:	4629      	mov	r1, r5
 800b42e:	f7f5 f853 	bl	80004d8 <__aeabi_dmul>
 800b432:	4602      	mov	r2, r0
 800b434:	460b      	mov	r3, r1
 800b436:	4680      	mov	r8, r0
 800b438:	4689      	mov	r9, r1
 800b43a:	f7f5 f84d 	bl	80004d8 <__aeabi_dmul>
 800b43e:	a36c      	add	r3, pc, #432	; (adr r3, 800b5f0 <atan+0x288>)
 800b440:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b444:	4606      	mov	r6, r0
 800b446:	460f      	mov	r7, r1
 800b448:	f7f5 f846 	bl	80004d8 <__aeabi_dmul>
 800b44c:	a36a      	add	r3, pc, #424	; (adr r3, 800b5f8 <atan+0x290>)
 800b44e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b452:	f7f4 fe8b 	bl	800016c <__adddf3>
 800b456:	4632      	mov	r2, r6
 800b458:	463b      	mov	r3, r7
 800b45a:	f7f5 f83d 	bl	80004d8 <__aeabi_dmul>
 800b45e:	a368      	add	r3, pc, #416	; (adr r3, 800b600 <atan+0x298>)
 800b460:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b464:	f7f4 fe82 	bl	800016c <__adddf3>
 800b468:	4632      	mov	r2, r6
 800b46a:	463b      	mov	r3, r7
 800b46c:	f7f5 f834 	bl	80004d8 <__aeabi_dmul>
 800b470:	a365      	add	r3, pc, #404	; (adr r3, 800b608 <atan+0x2a0>)
 800b472:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b476:	f7f4 fe79 	bl	800016c <__adddf3>
 800b47a:	4632      	mov	r2, r6
 800b47c:	463b      	mov	r3, r7
 800b47e:	f7f5 f82b 	bl	80004d8 <__aeabi_dmul>
 800b482:	a363      	add	r3, pc, #396	; (adr r3, 800b610 <atan+0x2a8>)
 800b484:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b488:	f7f4 fe70 	bl	800016c <__adddf3>
 800b48c:	4632      	mov	r2, r6
 800b48e:	463b      	mov	r3, r7
 800b490:	f7f5 f822 	bl	80004d8 <__aeabi_dmul>
 800b494:	a360      	add	r3, pc, #384	; (adr r3, 800b618 <atan+0x2b0>)
 800b496:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b49a:	f7f4 fe67 	bl	800016c <__adddf3>
 800b49e:	4642      	mov	r2, r8
 800b4a0:	464b      	mov	r3, r9
 800b4a2:	f7f5 f819 	bl	80004d8 <__aeabi_dmul>
 800b4a6:	a35e      	add	r3, pc, #376	; (adr r3, 800b620 <atan+0x2b8>)
 800b4a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b4ac:	4680      	mov	r8, r0
 800b4ae:	4689      	mov	r9, r1
 800b4b0:	4630      	mov	r0, r6
 800b4b2:	4639      	mov	r1, r7
 800b4b4:	f7f5 f810 	bl	80004d8 <__aeabi_dmul>
 800b4b8:	a35b      	add	r3, pc, #364	; (adr r3, 800b628 <atan+0x2c0>)
 800b4ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b4be:	f7f4 fe53 	bl	8000168 <__aeabi_dsub>
 800b4c2:	4632      	mov	r2, r6
 800b4c4:	463b      	mov	r3, r7
 800b4c6:	f7f5 f807 	bl	80004d8 <__aeabi_dmul>
 800b4ca:	a359      	add	r3, pc, #356	; (adr r3, 800b630 <atan+0x2c8>)
 800b4cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b4d0:	f7f4 fe4a 	bl	8000168 <__aeabi_dsub>
 800b4d4:	4632      	mov	r2, r6
 800b4d6:	463b      	mov	r3, r7
 800b4d8:	f7f4 fffe 	bl	80004d8 <__aeabi_dmul>
 800b4dc:	a356      	add	r3, pc, #344	; (adr r3, 800b638 <atan+0x2d0>)
 800b4de:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b4e2:	f7f4 fe41 	bl	8000168 <__aeabi_dsub>
 800b4e6:	4632      	mov	r2, r6
 800b4e8:	463b      	mov	r3, r7
 800b4ea:	f7f4 fff5 	bl	80004d8 <__aeabi_dmul>
 800b4ee:	a354      	add	r3, pc, #336	; (adr r3, 800b640 <atan+0x2d8>)
 800b4f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b4f4:	f7f4 fe38 	bl	8000168 <__aeabi_dsub>
 800b4f8:	4632      	mov	r2, r6
 800b4fa:	463b      	mov	r3, r7
 800b4fc:	f7f4 ffec 	bl	80004d8 <__aeabi_dmul>
 800b500:	4602      	mov	r2, r0
 800b502:	460b      	mov	r3, r1
 800b504:	4640      	mov	r0, r8
 800b506:	4649      	mov	r1, r9
 800b508:	f7f4 fe30 	bl	800016c <__adddf3>
 800b50c:	4622      	mov	r2, r4
 800b50e:	462b      	mov	r3, r5
 800b510:	f7f4 ffe2 	bl	80004d8 <__aeabi_dmul>
 800b514:	f1ba 3fff 	cmp.w	sl, #4294967295
 800b518:	4602      	mov	r2, r0
 800b51a:	460b      	mov	r3, r1
 800b51c:	d144      	bne.n	800b5a8 <atan+0x240>
 800b51e:	4620      	mov	r0, r4
 800b520:	4629      	mov	r1, r5
 800b522:	f7f4 fe21 	bl	8000168 <__aeabi_dsub>
 800b526:	e734      	b.n	800b392 <atan+0x2a>
 800b528:	2200      	movs	r2, #0
 800b52a:	4b4c      	ldr	r3, [pc, #304]	; (800b65c <atan+0x2f4>)
 800b52c:	f7f4 fe1c 	bl	8000168 <__aeabi_dsub>
 800b530:	2200      	movs	r2, #0
 800b532:	4606      	mov	r6, r0
 800b534:	460f      	mov	r7, r1
 800b536:	4620      	mov	r0, r4
 800b538:	4629      	mov	r1, r5
 800b53a:	4b48      	ldr	r3, [pc, #288]	; (800b65c <atan+0x2f4>)
 800b53c:	f7f4 fe16 	bl	800016c <__adddf3>
 800b540:	4602      	mov	r2, r0
 800b542:	460b      	mov	r3, r1
 800b544:	4630      	mov	r0, r6
 800b546:	4639      	mov	r1, r7
 800b548:	f7f5 f8f0 	bl	800072c <__aeabi_ddiv>
 800b54c:	f04f 0a01 	mov.w	sl, #1
 800b550:	4604      	mov	r4, r0
 800b552:	460d      	mov	r5, r1
 800b554:	e767      	b.n	800b426 <atan+0xbe>
 800b556:	4b43      	ldr	r3, [pc, #268]	; (800b664 <atan+0x2fc>)
 800b558:	429e      	cmp	r6, r3
 800b55a:	da1a      	bge.n	800b592 <atan+0x22a>
 800b55c:	2200      	movs	r2, #0
 800b55e:	4b42      	ldr	r3, [pc, #264]	; (800b668 <atan+0x300>)
 800b560:	f7f4 fe02 	bl	8000168 <__aeabi_dsub>
 800b564:	2200      	movs	r2, #0
 800b566:	4606      	mov	r6, r0
 800b568:	460f      	mov	r7, r1
 800b56a:	4620      	mov	r0, r4
 800b56c:	4629      	mov	r1, r5
 800b56e:	4b3e      	ldr	r3, [pc, #248]	; (800b668 <atan+0x300>)
 800b570:	f7f4 ffb2 	bl	80004d8 <__aeabi_dmul>
 800b574:	2200      	movs	r2, #0
 800b576:	4b39      	ldr	r3, [pc, #228]	; (800b65c <atan+0x2f4>)
 800b578:	f7f4 fdf8 	bl	800016c <__adddf3>
 800b57c:	4602      	mov	r2, r0
 800b57e:	460b      	mov	r3, r1
 800b580:	4630      	mov	r0, r6
 800b582:	4639      	mov	r1, r7
 800b584:	f7f5 f8d2 	bl	800072c <__aeabi_ddiv>
 800b588:	f04f 0a02 	mov.w	sl, #2
 800b58c:	4604      	mov	r4, r0
 800b58e:	460d      	mov	r5, r1
 800b590:	e749      	b.n	800b426 <atan+0xbe>
 800b592:	4602      	mov	r2, r0
 800b594:	460b      	mov	r3, r1
 800b596:	2000      	movs	r0, #0
 800b598:	4934      	ldr	r1, [pc, #208]	; (800b66c <atan+0x304>)
 800b59a:	f7f5 f8c7 	bl	800072c <__aeabi_ddiv>
 800b59e:	f04f 0a03 	mov.w	sl, #3
 800b5a2:	4604      	mov	r4, r0
 800b5a4:	460d      	mov	r5, r1
 800b5a6:	e73e      	b.n	800b426 <atan+0xbe>
 800b5a8:	4b31      	ldr	r3, [pc, #196]	; (800b670 <atan+0x308>)
 800b5aa:	4e32      	ldr	r6, [pc, #200]	; (800b674 <atan+0x30c>)
 800b5ac:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 800b5b0:	eb03 0aca 	add.w	sl, r3, sl, lsl #3
 800b5b4:	e9da 2300 	ldrd	r2, r3, [sl]
 800b5b8:	f7f4 fdd6 	bl	8000168 <__aeabi_dsub>
 800b5bc:	4622      	mov	r2, r4
 800b5be:	462b      	mov	r3, r5
 800b5c0:	f7f4 fdd2 	bl	8000168 <__aeabi_dsub>
 800b5c4:	4602      	mov	r2, r0
 800b5c6:	460b      	mov	r3, r1
 800b5c8:	e9d6 0100 	ldrd	r0, r1, [r6]
 800b5cc:	f7f4 fdcc 	bl	8000168 <__aeabi_dsub>
 800b5d0:	f1bb 0f00 	cmp.w	fp, #0
 800b5d4:	4604      	mov	r4, r0
 800b5d6:	460d      	mov	r5, r1
 800b5d8:	f6bf aee4 	bge.w	800b3a4 <atan+0x3c>
 800b5dc:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800b5e0:	461d      	mov	r5, r3
 800b5e2:	e6df      	b.n	800b3a4 <atan+0x3c>
 800b5e4:	4d24      	ldr	r5, [pc, #144]	; (800b678 <atan+0x310>)
 800b5e6:	e6dd      	b.n	800b3a4 <atan+0x3c>
 800b5e8:	8800759c 	.word	0x8800759c
 800b5ec:	7e37e43c 	.word	0x7e37e43c
 800b5f0:	e322da11 	.word	0xe322da11
 800b5f4:	3f90ad3a 	.word	0x3f90ad3a
 800b5f8:	24760deb 	.word	0x24760deb
 800b5fc:	3fa97b4b 	.word	0x3fa97b4b
 800b600:	a0d03d51 	.word	0xa0d03d51
 800b604:	3fb10d66 	.word	0x3fb10d66
 800b608:	c54c206e 	.word	0xc54c206e
 800b60c:	3fb745cd 	.word	0x3fb745cd
 800b610:	920083ff 	.word	0x920083ff
 800b614:	3fc24924 	.word	0x3fc24924
 800b618:	5555550d 	.word	0x5555550d
 800b61c:	3fd55555 	.word	0x3fd55555
 800b620:	2c6a6c2f 	.word	0x2c6a6c2f
 800b624:	bfa2b444 	.word	0xbfa2b444
 800b628:	52defd9a 	.word	0x52defd9a
 800b62c:	3fadde2d 	.word	0x3fadde2d
 800b630:	af749a6d 	.word	0xaf749a6d
 800b634:	3fb3b0f2 	.word	0x3fb3b0f2
 800b638:	fe231671 	.word	0xfe231671
 800b63c:	3fbc71c6 	.word	0x3fbc71c6
 800b640:	9998ebc4 	.word	0x9998ebc4
 800b644:	3fc99999 	.word	0x3fc99999
 800b648:	440fffff 	.word	0x440fffff
 800b64c:	7ff00000 	.word	0x7ff00000
 800b650:	54442d18 	.word	0x54442d18
 800b654:	bff921fb 	.word	0xbff921fb
 800b658:	3fdbffff 	.word	0x3fdbffff
 800b65c:	3ff00000 	.word	0x3ff00000
 800b660:	3ff2ffff 	.word	0x3ff2ffff
 800b664:	40038000 	.word	0x40038000
 800b668:	3ff80000 	.word	0x3ff80000
 800b66c:	bff00000 	.word	0xbff00000
 800b670:	0800bdd8 	.word	0x0800bdd8
 800b674:	0800bdb8 	.word	0x0800bdb8
 800b678:	3ff921fb 	.word	0x3ff921fb

0800b67c <fabs>:
 800b67c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800b680:	4770      	bx	lr

0800b682 <sqrt>:
 800b682:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b684:	4606      	mov	r6, r0
 800b686:	460f      	mov	r7, r1
 800b688:	f000 f820 	bl	800b6cc <__ieee754_sqrt>
 800b68c:	4632      	mov	r2, r6
 800b68e:	4604      	mov	r4, r0
 800b690:	460d      	mov	r5, r1
 800b692:	463b      	mov	r3, r7
 800b694:	4630      	mov	r0, r6
 800b696:	4639      	mov	r1, r7
 800b698:	f7f5 f9b8 	bl	8000a0c <__aeabi_dcmpun>
 800b69c:	b990      	cbnz	r0, 800b6c4 <sqrt+0x42>
 800b69e:	2200      	movs	r2, #0
 800b6a0:	2300      	movs	r3, #0
 800b6a2:	4630      	mov	r0, r6
 800b6a4:	4639      	mov	r1, r7
 800b6a6:	f7f5 f989 	bl	80009bc <__aeabi_dcmplt>
 800b6aa:	b158      	cbz	r0, 800b6c4 <sqrt+0x42>
 800b6ac:	f7fb f9de 	bl	8006a6c <__errno>
 800b6b0:	2321      	movs	r3, #33	; 0x21
 800b6b2:	2200      	movs	r2, #0
 800b6b4:	6003      	str	r3, [r0, #0]
 800b6b6:	2300      	movs	r3, #0
 800b6b8:	4610      	mov	r0, r2
 800b6ba:	4619      	mov	r1, r3
 800b6bc:	f7f5 f836 	bl	800072c <__aeabi_ddiv>
 800b6c0:	4604      	mov	r4, r0
 800b6c2:	460d      	mov	r5, r1
 800b6c4:	4620      	mov	r0, r4
 800b6c6:	4629      	mov	r1, r5
 800b6c8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800b6cc <__ieee754_sqrt>:
 800b6cc:	f8df c158 	ldr.w	ip, [pc, #344]	; 800b828 <__ieee754_sqrt+0x15c>
 800b6d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b6d4:	ea3c 0c01 	bics.w	ip, ip, r1
 800b6d8:	4606      	mov	r6, r0
 800b6da:	460d      	mov	r5, r1
 800b6dc:	460c      	mov	r4, r1
 800b6de:	460a      	mov	r2, r1
 800b6e0:	4607      	mov	r7, r0
 800b6e2:	4603      	mov	r3, r0
 800b6e4:	d10f      	bne.n	800b706 <__ieee754_sqrt+0x3a>
 800b6e6:	4602      	mov	r2, r0
 800b6e8:	460b      	mov	r3, r1
 800b6ea:	f7f4 fef5 	bl	80004d8 <__aeabi_dmul>
 800b6ee:	4602      	mov	r2, r0
 800b6f0:	460b      	mov	r3, r1
 800b6f2:	4630      	mov	r0, r6
 800b6f4:	4629      	mov	r1, r5
 800b6f6:	f7f4 fd39 	bl	800016c <__adddf3>
 800b6fa:	4606      	mov	r6, r0
 800b6fc:	460d      	mov	r5, r1
 800b6fe:	4630      	mov	r0, r6
 800b700:	4629      	mov	r1, r5
 800b702:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b706:	2900      	cmp	r1, #0
 800b708:	dc0e      	bgt.n	800b728 <__ieee754_sqrt+0x5c>
 800b70a:	f021 4c00 	bic.w	ip, r1, #2147483648	; 0x80000000
 800b70e:	ea5c 0707 	orrs.w	r7, ip, r7
 800b712:	d0f4      	beq.n	800b6fe <__ieee754_sqrt+0x32>
 800b714:	b141      	cbz	r1, 800b728 <__ieee754_sqrt+0x5c>
 800b716:	4602      	mov	r2, r0
 800b718:	460b      	mov	r3, r1
 800b71a:	f7f4 fd25 	bl	8000168 <__aeabi_dsub>
 800b71e:	4602      	mov	r2, r0
 800b720:	460b      	mov	r3, r1
 800b722:	f7f5 f803 	bl	800072c <__aeabi_ddiv>
 800b726:	e7e8      	b.n	800b6fa <__ieee754_sqrt+0x2e>
 800b728:	1521      	asrs	r1, r4, #20
 800b72a:	d075      	beq.n	800b818 <__ieee754_sqrt+0x14c>
 800b72c:	07cc      	lsls	r4, r1, #31
 800b72e:	f04f 0400 	mov.w	r4, #0
 800b732:	f3c2 0213 	ubfx	r2, r2, #0, #20
 800b736:	f2a1 37ff 	subw	r7, r1, #1023	; 0x3ff
 800b73a:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 800b73e:	bf5e      	ittt	pl
 800b740:	0fd9      	lsrpl	r1, r3, #31
 800b742:	005b      	lslpl	r3, r3, #1
 800b744:	eb01 0242 	addpl.w	r2, r1, r2, lsl #1
 800b748:	0fd9      	lsrs	r1, r3, #31
 800b74a:	eb01 0242 	add.w	r2, r1, r2, lsl #1
 800b74e:	2516      	movs	r5, #22
 800b750:	4620      	mov	r0, r4
 800b752:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800b756:	107f      	asrs	r7, r7, #1
 800b758:	005b      	lsls	r3, r3, #1
 800b75a:	1846      	adds	r6, r0, r1
 800b75c:	4296      	cmp	r6, r2
 800b75e:	bfde      	ittt	le
 800b760:	1b92      	suble	r2, r2, r6
 800b762:	1870      	addle	r0, r6, r1
 800b764:	1864      	addle	r4, r4, r1
 800b766:	0052      	lsls	r2, r2, #1
 800b768:	3d01      	subs	r5, #1
 800b76a:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 800b76e:	ea4f 0151 	mov.w	r1, r1, lsr #1
 800b772:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800b776:	d1f0      	bne.n	800b75a <__ieee754_sqrt+0x8e>
 800b778:	4629      	mov	r1, r5
 800b77a:	f04f 0e20 	mov.w	lr, #32
 800b77e:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 800b782:	4282      	cmp	r2, r0
 800b784:	eb06 0c05 	add.w	ip, r6, r5
 800b788:	dc02      	bgt.n	800b790 <__ieee754_sqrt+0xc4>
 800b78a:	d113      	bne.n	800b7b4 <__ieee754_sqrt+0xe8>
 800b78c:	459c      	cmp	ip, r3
 800b78e:	d811      	bhi.n	800b7b4 <__ieee754_sqrt+0xe8>
 800b790:	f1bc 0f00 	cmp.w	ip, #0
 800b794:	eb0c 0506 	add.w	r5, ip, r6
 800b798:	da43      	bge.n	800b822 <__ieee754_sqrt+0x156>
 800b79a:	2d00      	cmp	r5, #0
 800b79c:	db41      	blt.n	800b822 <__ieee754_sqrt+0x156>
 800b79e:	f100 0801 	add.w	r8, r0, #1
 800b7a2:	1a12      	subs	r2, r2, r0
 800b7a4:	4640      	mov	r0, r8
 800b7a6:	459c      	cmp	ip, r3
 800b7a8:	bf88      	it	hi
 800b7aa:	f102 32ff 	addhi.w	r2, r2, #4294967295
 800b7ae:	eba3 030c 	sub.w	r3, r3, ip
 800b7b2:	4431      	add	r1, r6
 800b7b4:	ea4f 7cd3 	mov.w	ip, r3, lsr #31
 800b7b8:	f1be 0e01 	subs.w	lr, lr, #1
 800b7bc:	eb0c 0242 	add.w	r2, ip, r2, lsl #1
 800b7c0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800b7c4:	ea4f 0656 	mov.w	r6, r6, lsr #1
 800b7c8:	d1db      	bne.n	800b782 <__ieee754_sqrt+0xb6>
 800b7ca:	4313      	orrs	r3, r2
 800b7cc:	d006      	beq.n	800b7dc <__ieee754_sqrt+0x110>
 800b7ce:	1c48      	adds	r0, r1, #1
 800b7d0:	bf0b      	itete	eq
 800b7d2:	4671      	moveq	r1, lr
 800b7d4:	3101      	addne	r1, #1
 800b7d6:	3401      	addeq	r4, #1
 800b7d8:	f021 0101 	bicne.w	r1, r1, #1
 800b7dc:	1063      	asrs	r3, r4, #1
 800b7de:	0849      	lsrs	r1, r1, #1
 800b7e0:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 800b7e4:	07e2      	lsls	r2, r4, #31
 800b7e6:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 800b7ea:	bf48      	it	mi
 800b7ec:	f041 4100 	orrmi.w	r1, r1, #2147483648	; 0x80000000
 800b7f0:	460e      	mov	r6, r1
 800b7f2:	eb03 5507 	add.w	r5, r3, r7, lsl #20
 800b7f6:	e782      	b.n	800b6fe <__ieee754_sqrt+0x32>
 800b7f8:	0ada      	lsrs	r2, r3, #11
 800b7fa:	3815      	subs	r0, #21
 800b7fc:	055b      	lsls	r3, r3, #21
 800b7fe:	2a00      	cmp	r2, #0
 800b800:	d0fa      	beq.n	800b7f8 <__ieee754_sqrt+0x12c>
 800b802:	02d5      	lsls	r5, r2, #11
 800b804:	d50a      	bpl.n	800b81c <__ieee754_sqrt+0x150>
 800b806:	f1c1 0420 	rsb	r4, r1, #32
 800b80a:	fa23 f404 	lsr.w	r4, r3, r4
 800b80e:	1e4d      	subs	r5, r1, #1
 800b810:	408b      	lsls	r3, r1
 800b812:	4322      	orrs	r2, r4
 800b814:	1b41      	subs	r1, r0, r5
 800b816:	e789      	b.n	800b72c <__ieee754_sqrt+0x60>
 800b818:	4608      	mov	r0, r1
 800b81a:	e7f0      	b.n	800b7fe <__ieee754_sqrt+0x132>
 800b81c:	0052      	lsls	r2, r2, #1
 800b81e:	3101      	adds	r1, #1
 800b820:	e7ef      	b.n	800b802 <__ieee754_sqrt+0x136>
 800b822:	4680      	mov	r8, r0
 800b824:	e7bd      	b.n	800b7a2 <__ieee754_sqrt+0xd6>
 800b826:	bf00      	nop
 800b828:	7ff00000 	.word	0x7ff00000

0800b82c <_init>:
 800b82c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b82e:	bf00      	nop
 800b830:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b832:	bc08      	pop	{r3}
 800b834:	469e      	mov	lr, r3
 800b836:	4770      	bx	lr

0800b838 <_fini>:
 800b838:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b83a:	bf00      	nop
 800b83c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b83e:	bc08      	pop	{r3}
 800b840:	469e      	mov	lr, r3
 800b842:	4770      	bx	lr
